/* WARNING: autogenerated file */

#include "THC.h"
#include "luaT.h"
#include "torch/utils.h"


static int torch_isnonemptytable(lua_State *L, int idx)
{
  int empty;
  if (!lua_istable(L, idx)) return 0;

  lua_rawgeti(L, idx, 1);
  empty = lua_isnil(L, -1);
  lua_pop(L, 1);
  return !empty;
}

#ifndef _CWRAP_STR_ARG_TYPES_4821726c1947cdf3eebacade98173939
#define _CWRAP_STR_ARG_TYPES_4821726c1947cdf3eebacade98173939
#include "string.h"
static void str_arg_types(lua_State *L, char *buf, int n) {
    int i;
  int nargs = lua_gettop(L);
  if (nargs == 0) {
    snprintf(buf, n, "no arguments provided");
    return;
  }
  for (i = 1; i <= nargs; i++) {
    int l;
    const char *torch_type = luaT_typename(L, i);
    if(torch_type && !strncmp(torch_type, "torch.", 6)) torch_type += 6;
    if (torch_type) l = snprintf(buf, n, "%s ", torch_type);
    else if(lua_isnil(L, i)) l = snprintf(buf, n, "%s ", "nil");
    else if(lua_isboolean(L, i)) l = snprintf(buf, n, "%s ", "boolean");
    else if(lua_isnumber(L, i)) l = snprintf(buf, n, "%s ", "number");
    else if(lua_isstring(L, i)) l = snprintf(buf, n, "%s ", "string");
    else if(lua_istable(L, i)) l = snprintf(buf, n, "%s ", "table");
    else if(lua_isuserdata(L, i)) l = snprintf(buf, n, "%s ", "userdata");
    else l = snprintf(buf, n, "%s ", "???");
    if (l >= n) return;
    buf += l;
    n   -= l;
  }
}
#endif
static int cutorch_CudaByteTensor_fill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
unsigned char arg2 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (unsigned char)lua_tonumber(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor* unsigned char", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_fill(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaByteTensor_zero(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor*", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_zero(default_arg1,arg1);
return 1;
}

static int cutorch_CudaByteTensor_zeros(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 1
&& cutorch_islongargs(L, 1)
)
{
arg2 = cutorch_checklongargs(L, 1);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_zeros(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int cutorch_CudaByteTensor_ones(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 1
&& cutorch_islongargs(L, 1)
)
{
arg2 = cutorch_checklongargs(L, 1);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_ones(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int cutorch_CudaByteTensor_reshape(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THLongStorage *arg3 = NULL;
if(narg >= 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg3 = cutorch_checklongargs(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg >= 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& cutorch_islongargs(L, 3)
)
{
arg1_idx = 1;
arg3 = cutorch_checklongargs(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_reshape(default_arg1,arg1,arg2,arg3);
THLongStorage_free(arg3);
return 1;
}

static int cutorch_CudaByteTensor_numel(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
ptrdiff_t arg2 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaByteTensor", type_buf);
}
arg2 = THCudaByteTensor_numel(default_arg1,arg1);
lua_pushinteger(L, (lua_Integer)arg2);
return 1;
}

static int cutorch_CudaByteTensor_add(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
THCudaByteTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
unsigned char arg6 = 1;
THCudaByteTensor *arg7 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (unsigned char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 2;
arg4 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 2;
arg6 = (unsigned char)lua_tonumber(L, 2);
arg4 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaByteTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor unsigned char | [*CudaByteTensor*] CudaByteTensor [unsigned char] CudaByteTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_add(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaByteTensor");
THCudaByteTensor_cadd(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int cutorch_CudaByteTensor_csub(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
THCudaByteTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
unsigned char arg6 = 1;
THCudaByteTensor *arg7 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (unsigned char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 2;
arg4 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 2;
arg6 = (unsigned char)lua_tonumber(L, 2);
arg4 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaByteTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor unsigned char | [*CudaByteTensor*] CudaByteTensor [unsigned char] CudaByteTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_sub(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaByteTensor");
THCudaByteTensor_csub(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int cutorch_CudaByteTensor_mul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (unsigned char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor unsigned char", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_mul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaByteTensor_clamp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
unsigned char arg4 = 0;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg3 = (unsigned char)lua_tonumber(L, 2);
arg4 = (unsigned char)lua_tonumber(L, 3);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
arg4 = (unsigned char)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor unsigned char unsigned char", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_clamp(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaByteTensor_cross(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
long arg4 = -1;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor CudaByteTensor [index]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_cross(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaByteTensor_div(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (unsigned char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor unsigned char", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_div(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaByteTensor_cmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_cmul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaByteTensor_cpow(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_cpow(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaByteTensor_cdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_cdiv(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaByteTensor_addcmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 1;
THCudaByteTensor *arg4 = NULL;
THCudaByteTensor *arg5 = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaByteTensor"))
)
{
arg3 = (unsigned char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor [unsigned char] CudaByteTensor CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_addcmul(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int cutorch_CudaByteTensor_addcdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 1;
THCudaByteTensor *arg4 = NULL;
THCudaByteTensor *arg5 = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaByteTensor"))
)
{
arg3 = (unsigned char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor [unsigned char] CudaByteTensor CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_addcdiv(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int cutorch_CudaByteTensor_min(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
unsigned char arg2 = 0;
THCudaByteTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaByteTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaByteTensor | [*CudaByteTensor*] [*CudaLongTensor*] CudaByteTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaByteTensor_minall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaByteTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaByteTensor_min(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int cutorch_CudaByteTensor_max(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
unsigned char arg2 = 0;
THCudaByteTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaByteTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaByteTensor | [*CudaByteTensor*] [*CudaLongTensor*] CudaByteTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaByteTensor_maxall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaByteTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaByteTensor_max(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int cutorch_CudaByteTensor_cmin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
THCudaByteTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
unsigned char arg6 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 1;
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (unsigned char)lua_tonumber(L, 2);
arg4 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor CudaByteTensor | [*CudaByteTensor*] CudaByteTensor unsigned char", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_cmin(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaByteTensor");
THCudaByteTensor_cminValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaByteTensor_cmax(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
THCudaByteTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
unsigned char arg6 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 1;
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (unsigned char)lua_tonumber(L, 2);
arg4 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor CudaByteTensor | [*CudaByteTensor*] CudaByteTensor unsigned char", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_cmax(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaByteTensor");
THCudaByteTensor_cmaxValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaByteTensor_all(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg2 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaByteTensor", type_buf);
}
arg2 = THCudaByteTensor_logicalall(default_arg1,arg1);
lua_pushboolean(L, arg2);
return 1;
}

static int cutorch_CudaByteTensor_any(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg2 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaByteTensor", type_buf);
}
arg2 = THCudaByteTensor_logicalany(default_arg1,arg1);
lua_pushboolean(L, arg2);
return 1;
}

static int cutorch_CudaByteTensor_lt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
THCudaByteTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
unsigned char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaByteTensor *arg8 = NULL;
THCudaByteTensor *arg9 = NULL;
THCudaByteTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaByteTensor *arg11 = NULL;
THCudaByteTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (unsigned char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor unsigned char | *CudaByteTensor* CudaByteTensor unsigned char | [*CudaByteTensor*] CudaByteTensor CudaByteTensor | *CudaByteTensor* CudaByteTensor CudaByteTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_ltValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaByteTensor_ltValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaByteTensor_ltTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaByteTensor_ltTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaByteTensor_gt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
THCudaByteTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
unsigned char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaByteTensor *arg8 = NULL;
THCudaByteTensor *arg9 = NULL;
THCudaByteTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaByteTensor *arg11 = NULL;
THCudaByteTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (unsigned char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor unsigned char | *CudaByteTensor* CudaByteTensor unsigned char | [*CudaByteTensor*] CudaByteTensor CudaByteTensor | *CudaByteTensor* CudaByteTensor CudaByteTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_gtValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaByteTensor_gtValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaByteTensor_gtTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaByteTensor_gtTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaByteTensor_le(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
THCudaByteTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
unsigned char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaByteTensor *arg8 = NULL;
THCudaByteTensor *arg9 = NULL;
THCudaByteTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaByteTensor *arg11 = NULL;
THCudaByteTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (unsigned char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor unsigned char | *CudaByteTensor* CudaByteTensor unsigned char | [*CudaByteTensor*] CudaByteTensor CudaByteTensor | *CudaByteTensor* CudaByteTensor CudaByteTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_leValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaByteTensor_leValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaByteTensor_leTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaByteTensor_leTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaByteTensor_ge(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
THCudaByteTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
unsigned char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaByteTensor *arg8 = NULL;
THCudaByteTensor *arg9 = NULL;
THCudaByteTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaByteTensor *arg11 = NULL;
THCudaByteTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (unsigned char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor unsigned char | *CudaByteTensor* CudaByteTensor unsigned char | [*CudaByteTensor*] CudaByteTensor CudaByteTensor | *CudaByteTensor* CudaByteTensor CudaByteTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_geValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaByteTensor_geValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaByteTensor_geTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaByteTensor_geTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaByteTensor_eq(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
THCudaByteTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
unsigned char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaByteTensor *arg8 = NULL;
THCudaByteTensor *arg9 = NULL;
THCudaByteTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaByteTensor *arg11 = NULL;
THCudaByteTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (unsigned char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor unsigned char | *CudaByteTensor* CudaByteTensor unsigned char | [*CudaByteTensor*] CudaByteTensor CudaByteTensor | *CudaByteTensor* CudaByteTensor CudaByteTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_eqValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaByteTensor_eqValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaByteTensor_eqTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaByteTensor_eqTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaByteTensor_ne(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
THCudaByteTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
unsigned char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaByteTensor *arg8 = NULL;
THCudaByteTensor *arg9 = NULL;
THCudaByteTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaByteTensor *arg11 = NULL;
THCudaByteTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (unsigned char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor unsigned char | *CudaByteTensor* CudaByteTensor unsigned char | [*CudaByteTensor*] CudaByteTensor CudaByteTensor | *CudaByteTensor* CudaByteTensor CudaByteTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_neValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaByteTensor_neValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaByteTensor_neTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaByteTensor_neTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaByteTensor_sum(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
long arg2 = 0;
THCudaByteTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaByteTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaByteTensor | [*CudaByteTensor*] CudaByteTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaByteTensor_sumall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaByteTensor");
THCudaByteTensor_sum(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaByteTensor_prod(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
long arg2 = 0;
THCudaByteTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaByteTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaByteTensor | [*CudaByteTensor*] CudaByteTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaByteTensor_prodall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaByteTensor");
THCudaByteTensor_prod(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaByteTensor_mean(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
long arg2 = 0;
THCudaByteTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaByteTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaByteTensor | [*CudaByteTensor*] CudaByteTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaByteTensor_meanall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaByteTensor");
THCudaByteTensor_mean(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaByteTensor_maskedFill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor* CudaByteTensor unsigned char", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_maskedFill(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaByteTensor_maskedCopy(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor* CudaByteTensor CudaByteTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_maskedCopy(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaByteTensor_maskedSelect(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_maskedSelect(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaByteTensor_gather(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
THCudaByteTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaByteTensor *arg6 = NULL;
long arg7 = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaByteTensor *dummyIndexTensor = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
THCudaByteTensor_checkGPU(cutorch_getstate(L), 1, arg4);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg4);
		  THCudaByteTensor_resize(state, arg1, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg6 = (decltype(arg6))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 2;
arg7 = (long)lua_tonumber(L, 2)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaByteTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaByte(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
arg5 = THCudaByteTensor_new(cutorch_getstate(L));
THCudaByteTensor_checkGPU(cutorch_getstate(L), 1, arg8);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg8);
		  THCudaByteTensor_resize(state, arg5, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 4, "torch.CudaByteTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg7 = (long)lua_tonumber(L, 3)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaByteTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaByte(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor index CudaLongTensor | [*CudaByteTensor*] CudaByteTensor index CudaByteTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_gather(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaByteTensor");
THCudaByteTensor_gather(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int cutorch_CudaByteTensor_scatter(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
THCudaByteTensor *arg4 = NULL;
THCudaByteTensor *arg5 = NULL;
int arg5_idx = 0;
long arg6 = 0;
THCudaLongTensor *arg7 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaByteTensor *dummyIndexTensor = NULL;
THCudaByteTensor *arg8 = NULL;
THCudaByteTensor *arg9 = NULL;
int arg9_idx = 0;
long arg10 = 0;
THCudaLongTensor *arg11 = NULL;
unsigned char arg12 = 0;
THCudaByteTensor *arg13 = NULL;
int arg13_idx = 0;
long arg14 = 0;
THCudaLongTensor *arg15 = NULL;
unsigned char arg16 = 0;
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaByteTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = (long)lua_tonumber(L, 2)-1;
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 4, "torch.CudaByteTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg6 = (long)lua_tonumber(L, 2)-1;
arg7 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaByteTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg7, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaByte(default_arg1, arg7, dummyIndexTensor);
indexLongTensor = arg7;
}
else if(narg == 4
&& (arg9 = (decltype(arg9))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 3;
arg9_idx = 1;
arg10 = (long)lua_tonumber(L, 2)-1;
arg12 = (unsigned char)lua_tonumber(L, 4);
}
else if(narg == 4
&& (arg13 = (decltype(arg13))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 4;
arg13_idx = 1;
arg14 = (long)lua_tonumber(L, 2)-1;
arg15 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaByteTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg15, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaByte(default_arg1, arg15, dummyIndexTensor);
indexLongTensor = arg15;
arg16 = (unsigned char)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor* index CudaLongTensor CudaByteTensor | *CudaByteTensor* index CudaByteTensor CudaByteTensor | *CudaByteTensor* index CudaLongTensor unsigned char | *CudaByteTensor* index CudaByteTensor unsigned char", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_scatter(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg5_idx);
THCudaByteTensor_scatter(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
else if(argset == 3)
{
lua_pushvalue(L, arg9_idx);
THCudaByteTensor_scatterFill(default_arg1,arg9,arg10,arg11,arg12);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg13_idx);
THCudaByteTensor_scatterFill(default_arg1,arg13,arg14,arg15,arg16);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int cutorch_CudaByteTensor_sort(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaByteTensor *arg3 = NULL;
long arg4 = 0;
int arg5 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg2_idx = 1;
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
arg4 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isboolean(L, 2)
)
{
arg5 = lua_toboolean(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isboolean(L, 3)
)
{
arg1_idx = 1;
arg5 = lua_toboolean(L, 3);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isboolean(L, 3)
)
{
arg2_idx = 1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
arg4 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = lua_toboolean(L, 4);
arg4 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = lua_toboolean(L, 5);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] [*CudaLongTensor*] CudaByteTensor [index] [boolean]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
if(arg2_idx)
lua_pushvalue(L, arg2_idx);
else
luaT_pushudata(L, arg2, "torch.CudaLongTensor");
THCudaByteTensor_sort(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 2;
}

static int cutorch_CudaByteTensor_squeeze(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaByteTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
argset = 1;
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor | [*CudaByteTensor*] CudaByteTensor index", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_squeeze(default_arg1,arg1,arg2);
if(arg1->nDimension == 1 && arg1->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaByteTensor_get1d(cutorch_getstate(L), arg1, 0)));
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaByteTensor");
{int hasdims = arg4->nDimension > 1;
THCudaByteTensor_squeeze1d(default_arg1,arg3,arg4,arg5);
if(!hasdims && arg3->nDimension == 1 && arg3->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaByteTensor_get1d(cutorch_getstate(L), arg3, 0)));}
return 1;
}
return 0;
}

static int cutorch_CudaByteTensor_abs(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_abs(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaByteTensor_sign(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_sign(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaByteTensor_cat(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
long arg4 = 0;
THCudaByteTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaByteTensor **arg6_data = NULL;
long arg6_size = 0;
int arg6_i = 0;
long arg7 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 1;
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
arg4 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg4 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 1
&& torch_isnonemptytable(L, 1)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaByteTensor**)THAlloc(arg6_size * sizeof(THCudaByteTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaByteTensor*)luaT_toudata(L, -1, "torch.CudaByteTensor")))
    luaL_error(L, "expected CudaByteTensor in tensor array");
  lua_pop(L, 1);
}

arg5 = THCudaByteTensor_new(cutorch_getstate(L));
arg7 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& torch_isnonemptytable(L, 2)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaByteTensor**)THAlloc(arg6_size * sizeof(THCudaByteTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaByteTensor*)luaT_toudata(L, -1, "torch.CudaByteTensor")))
    luaL_error(L, "expected CudaByteTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& torch_isnonemptytable(L, 1)
&& lua_isnumber(L, 2)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaByteTensor**)THAlloc(arg6_size * sizeof(THCudaByteTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaByteTensor*)luaT_toudata(L, -1, "torch.CudaByteTensor")))
    luaL_error(L, "expected CudaByteTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 2)-1;
arg5 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& torch_isnonemptytable(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaByteTensor**)THAlloc(arg6_size * sizeof(THCudaByteTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaByteTensor*)luaT_toudata(L, -1, "torch.CudaByteTensor")))
    luaL_error(L, "expected CudaByteTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor CudaByteTensor [index] | [*CudaByteTensor*] {CudaByteTensor+} [index]", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_cat(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaByteTensor");
THCudaByteTensor_catArray(default_arg1,arg5,arg6_data,arg6_size,arg7);
THFree(arg6_data);
return 1;
}
return 0;
}

static int cutorch_CudaByteTensor_dot(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaByteTensor CudaByteTensor", type_buf);
}
arg3 = THCudaByteTensor_dot(default_arg1,arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}

#ifndef _CWRAP_STR_ARG_TYPES_4821726c1947cdf3eebacade98173939
#define _CWRAP_STR_ARG_TYPES_4821726c1947cdf3eebacade98173939
#include "string.h"
static void str_arg_types(lua_State *L, char *buf, int n) {
    int i;
  int nargs = lua_gettop(L);
  if (nargs == 0) {
    snprintf(buf, n, "no arguments provided");
    return;
  }
  for (i = 1; i <= nargs; i++) {
    int l;
    const char *torch_type = luaT_typename(L, i);
    if(torch_type && !strncmp(torch_type, "torch.", 6)) torch_type += 6;
    if (torch_type) l = snprintf(buf, n, "%s ", torch_type);
    else if(lua_isnil(L, i)) l = snprintf(buf, n, "%s ", "nil");
    else if(lua_isboolean(L, i)) l = snprintf(buf, n, "%s ", "boolean");
    else if(lua_isnumber(L, i)) l = snprintf(buf, n, "%s ", "number");
    else if(lua_isstring(L, i)) l = snprintf(buf, n, "%s ", "string");
    else if(lua_istable(L, i)) l = snprintf(buf, n, "%s ", "table");
    else if(lua_isuserdata(L, i)) l = snprintf(buf, n, "%s ", "userdata");
    else l = snprintf(buf, n, "%s ", "???");
    if (l >= n) return;
    buf += l;
    n   -= l;
  }
}
#endif
static int m_cutorch_CudaByteTensor_fill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
unsigned char arg2 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (unsigned char)lua_tonumber(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor* unsigned char", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_fill(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaByteTensor_zero(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor*", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_zero(default_arg1,arg1);
return 1;
}

static int m_cutorch_CudaByteTensor_zeros(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor* (LongStorage | dim1 [dim2...])", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_zeros(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int m_cutorch_CudaByteTensor_ones(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor* (LongStorage | dim1 [dim2...])", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_ones(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int m_cutorch_CudaByteTensor_reshape(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THLongStorage *arg3 = NULL;
if(narg >= 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg3 = cutorch_checklongargs(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg >= 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& cutorch_islongargs(L, 3)
)
{
arg1_idx = 1;
arg3 = cutorch_checklongargs(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_reshape(default_arg1,arg1,arg2,arg3);
THLongStorage_free(arg3);
return 1;
}

static int m_cutorch_CudaByteTensor_numel(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
ptrdiff_t arg2 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaByteTensor", type_buf);
}
arg2 = THCudaByteTensor_numel(default_arg1,arg1);
lua_pushinteger(L, (lua_Integer)arg2);
return 1;
}

static int m_cutorch_CudaByteTensor_add(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
THCudaByteTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
unsigned char arg6 = 1;
THCudaByteTensor *arg7 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg5 = arg4;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaByteTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor* [CudaByteTensor] unsigned char | *CudaByteTensor* [CudaByteTensor] [unsigned char] CudaByteTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_add(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaByteTensor_cadd(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int m_cutorch_CudaByteTensor_csub(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
THCudaByteTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
unsigned char arg6 = 1;
THCudaByteTensor *arg7 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg5 = arg4;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaByteTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor* [CudaByteTensor] unsigned char | *CudaByteTensor* [CudaByteTensor] [unsigned char] CudaByteTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_sub(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaByteTensor_csub(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int m_cutorch_CudaByteTensor_mul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor* [CudaByteTensor] unsigned char", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_mul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaByteTensor_clamp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
unsigned char arg4 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 2);
arg4 = (unsigned char)lua_tonumber(L, 3);
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
arg4 = (unsigned char)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor* [CudaByteTensor] unsigned char unsigned char", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_clamp(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int m_cutorch_CudaByteTensor_cross(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
long arg4 = -1;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor CudaByteTensor [index]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_cross(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int m_cutorch_CudaByteTensor_div(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor* [CudaByteTensor] unsigned char", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_div(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaByteTensor_cmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor* [CudaByteTensor] CudaByteTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_cmul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaByteTensor_cpow(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor* [CudaByteTensor] CudaByteTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_cpow(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaByteTensor_cdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor* [CudaByteTensor] CudaByteTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_cdiv(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaByteTensor_addcmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 1;
THCudaByteTensor *arg4 = NULL;
THCudaByteTensor *arg5 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor* [CudaByteTensor] [unsigned char] CudaByteTensor CudaByteTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_addcmul(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int m_cutorch_CudaByteTensor_addcdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 1;
THCudaByteTensor *arg4 = NULL;
THCudaByteTensor *arg5 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor* [CudaByteTensor] [unsigned char] CudaByteTensor CudaByteTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_addcdiv(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int m_cutorch_CudaByteTensor_min(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
unsigned char arg2 = 0;
THCudaByteTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaByteTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaByteTensor | [*CudaByteTensor*] [*CudaLongTensor*] CudaByteTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaByteTensor_minall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaByteTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaByteTensor_min(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int m_cutorch_CudaByteTensor_max(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
unsigned char arg2 = 0;
THCudaByteTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaByteTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaByteTensor | [*CudaByteTensor*] [*CudaLongTensor*] CudaByteTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaByteTensor_maxall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaByteTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaByteTensor_max(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int m_cutorch_CudaByteTensor_cmin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
THCudaByteTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
unsigned char arg6 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
argset = 1;
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 1;
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 1
&& lua_isnumber(L, 1)
)
{
argset = 2;
arg6 = (unsigned char)lua_tonumber(L, 1);
arg4 = THCudaByteTensor_new(cutorch_getstate(L));
arg5 = arg4;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (unsigned char)lua_tonumber(L, 2);
arg4 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] [CudaByteTensor] CudaByteTensor | [*CudaByteTensor*] [CudaByteTensor] unsigned char", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_cmin(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaByteTensor");
THCudaByteTensor_cminValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaByteTensor_cmax(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
THCudaByteTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
unsigned char arg6 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
argset = 1;
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 1;
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 1
&& lua_isnumber(L, 1)
)
{
argset = 2;
arg6 = (unsigned char)lua_tonumber(L, 1);
arg4 = THCudaByteTensor_new(cutorch_getstate(L));
arg5 = arg4;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (unsigned char)lua_tonumber(L, 2);
arg4 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] [CudaByteTensor] CudaByteTensor | [*CudaByteTensor*] [CudaByteTensor] unsigned char", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_cmax(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaByteTensor");
THCudaByteTensor_cmaxValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaByteTensor_all(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg2 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaByteTensor", type_buf);
}
arg2 = THCudaByteTensor_logicalall(default_arg1,arg1);
lua_pushboolean(L, arg2);
return 1;
}

static int m_cutorch_CudaByteTensor_any(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg2 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaByteTensor", type_buf);
}
arg2 = THCudaByteTensor_logicalany(default_arg1,arg1);
lua_pushboolean(L, arg2);
return 1;
}

static int m_cutorch_CudaByteTensor_lt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
THCudaByteTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
unsigned char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaByteTensor *arg8 = NULL;
THCudaByteTensor *arg9 = NULL;
THCudaByteTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaByteTensor *arg11 = NULL;
THCudaByteTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (unsigned char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor unsigned char | *CudaByteTensor* CudaByteTensor unsigned char | [*CudaByteTensor*] CudaByteTensor CudaByteTensor | *CudaByteTensor* CudaByteTensor CudaByteTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_ltValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaByteTensor_ltValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaByteTensor_ltTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaByteTensor_ltTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaByteTensor_gt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
THCudaByteTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
unsigned char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaByteTensor *arg8 = NULL;
THCudaByteTensor *arg9 = NULL;
THCudaByteTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaByteTensor *arg11 = NULL;
THCudaByteTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (unsigned char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor unsigned char | *CudaByteTensor* CudaByteTensor unsigned char | [*CudaByteTensor*] CudaByteTensor CudaByteTensor | *CudaByteTensor* CudaByteTensor CudaByteTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_gtValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaByteTensor_gtValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaByteTensor_gtTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaByteTensor_gtTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaByteTensor_le(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
THCudaByteTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
unsigned char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaByteTensor *arg8 = NULL;
THCudaByteTensor *arg9 = NULL;
THCudaByteTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaByteTensor *arg11 = NULL;
THCudaByteTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (unsigned char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor unsigned char | *CudaByteTensor* CudaByteTensor unsigned char | [*CudaByteTensor*] CudaByteTensor CudaByteTensor | *CudaByteTensor* CudaByteTensor CudaByteTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_leValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaByteTensor_leValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaByteTensor_leTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaByteTensor_leTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaByteTensor_ge(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
THCudaByteTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
unsigned char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaByteTensor *arg8 = NULL;
THCudaByteTensor *arg9 = NULL;
THCudaByteTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaByteTensor *arg11 = NULL;
THCudaByteTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (unsigned char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor unsigned char | *CudaByteTensor* CudaByteTensor unsigned char | [*CudaByteTensor*] CudaByteTensor CudaByteTensor | *CudaByteTensor* CudaByteTensor CudaByteTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_geValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaByteTensor_geValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaByteTensor_geTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaByteTensor_geTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaByteTensor_eq(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
THCudaByteTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
unsigned char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaByteTensor *arg8 = NULL;
THCudaByteTensor *arg9 = NULL;
THCudaByteTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaByteTensor *arg11 = NULL;
THCudaByteTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (unsigned char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor unsigned char | *CudaByteTensor* CudaByteTensor unsigned char | [*CudaByteTensor*] CudaByteTensor CudaByteTensor | *CudaByteTensor* CudaByteTensor CudaByteTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_eqValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaByteTensor_eqValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaByteTensor_eqTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaByteTensor_eqTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaByteTensor_ne(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
THCudaByteTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaByteTensor *arg5 = NULL;
unsigned char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaByteTensor *arg8 = NULL;
THCudaByteTensor *arg9 = NULL;
THCudaByteTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaByteTensor *arg11 = NULL;
THCudaByteTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (unsigned char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (unsigned char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor unsigned char | *CudaByteTensor* CudaByteTensor unsigned char | [*CudaByteTensor*] CudaByteTensor CudaByteTensor | *CudaByteTensor* CudaByteTensor CudaByteTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_neValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaByteTensor_neValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaByteTensor_neTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaByteTensor_neTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaByteTensor_sum(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
long arg2 = 0;
THCudaByteTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaByteTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaByteTensor | [*CudaByteTensor*] CudaByteTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaByteTensor_sumall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaByteTensor");
THCudaByteTensor_sum(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaByteTensor_prod(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
long arg2 = 0;
THCudaByteTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaByteTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaByteTensor | [*CudaByteTensor*] CudaByteTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaByteTensor_prodall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaByteTensor");
THCudaByteTensor_prod(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaByteTensor_mean(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
long arg2 = 0;
THCudaByteTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaByteTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaByteTensor | [*CudaByteTensor*] CudaByteTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaByteTensor_meanall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaByteTensor");
THCudaByteTensor_mean(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaByteTensor_maskedFill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (unsigned char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor* CudaByteTensor unsigned char", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_maskedFill(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaByteTensor_maskedCopy(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor* CudaByteTensor CudaByteTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_maskedCopy(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaByteTensor_maskedSelect(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_maskedSelect(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaByteTensor_gather(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
THCudaByteTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaByteTensor *arg6 = NULL;
long arg7 = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaByteTensor *dummyIndexTensor = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
THCudaByteTensor_checkGPU(cutorch_getstate(L), 1, arg4);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg4);
		  THCudaByteTensor_resize(state, arg1, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg6 = (decltype(arg6))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 2;
arg7 = (long)lua_tonumber(L, 2)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaByteTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaByte(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
arg5 = THCudaByteTensor_new(cutorch_getstate(L));
THCudaByteTensor_checkGPU(cutorch_getstate(L), 1, arg8);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg8);
		  THCudaByteTensor_resize(state, arg5, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 4, "torch.CudaByteTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg7 = (long)lua_tonumber(L, 3)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaByteTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaByte(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor index CudaLongTensor | [*CudaByteTensor*] CudaByteTensor index CudaByteTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_gather(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaByteTensor");
THCudaByteTensor_gather(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int m_cutorch_CudaByteTensor_scatter(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
THCudaByteTensor *arg4 = NULL;
THCudaByteTensor *arg5 = NULL;
int arg5_idx = 0;
long arg6 = 0;
THCudaLongTensor *arg7 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaByteTensor *dummyIndexTensor = NULL;
THCudaByteTensor *arg8 = NULL;
THCudaByteTensor *arg9 = NULL;
int arg9_idx = 0;
long arg10 = 0;
THCudaLongTensor *arg11 = NULL;
unsigned char arg12 = 0;
THCudaByteTensor *arg13 = NULL;
int arg13_idx = 0;
long arg14 = 0;
THCudaLongTensor *arg15 = NULL;
unsigned char arg16 = 0;
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaByteTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = (long)lua_tonumber(L, 2)-1;
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 4, "torch.CudaByteTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg6 = (long)lua_tonumber(L, 2)-1;
arg7 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaByteTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg7, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaByte(default_arg1, arg7, dummyIndexTensor);
indexLongTensor = arg7;
}
else if(narg == 4
&& (arg9 = (decltype(arg9))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 3;
arg9_idx = 1;
arg10 = (long)lua_tonumber(L, 2)-1;
arg12 = (unsigned char)lua_tonumber(L, 4);
}
else if(narg == 4
&& (arg13 = (decltype(arg13))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 4;
arg13_idx = 1;
arg14 = (long)lua_tonumber(L, 2)-1;
arg15 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaByteTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg15, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaByte(default_arg1, arg15, dummyIndexTensor);
indexLongTensor = arg15;
arg16 = (unsigned char)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor* index CudaLongTensor CudaByteTensor | *CudaByteTensor* index CudaByteTensor CudaByteTensor | *CudaByteTensor* index CudaLongTensor unsigned char | *CudaByteTensor* index CudaByteTensor unsigned char", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_scatter(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg5_idx);
THCudaByteTensor_scatter(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
else if(argset == 3)
{
lua_pushvalue(L, arg9_idx);
THCudaByteTensor_scatterFill(default_arg1,arg9,arg10,arg11,arg12);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg13_idx);
THCudaByteTensor_scatterFill(default_arg1,arg13,arg14,arg15,arg16);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int m_cutorch_CudaByteTensor_sort(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaByteTensor *arg3 = NULL;
long arg4 = 0;
int arg5 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg2_idx = 1;
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
arg4 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isboolean(L, 2)
)
{
arg5 = lua_toboolean(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isboolean(L, 3)
)
{
arg1_idx = 1;
arg5 = lua_toboolean(L, 3);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isboolean(L, 3)
)
{
arg2_idx = 1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
arg4 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = lua_toboolean(L, 4);
arg4 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = lua_toboolean(L, 5);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] [*CudaLongTensor*] CudaByteTensor [index] [boolean]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
if(arg2_idx)
lua_pushvalue(L, arg2_idx);
else
luaT_pushudata(L, arg2, "torch.CudaLongTensor");
THCudaByteTensor_sort(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 2;
}

static int m_cutorch_CudaByteTensor_squeeze(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaByteTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
argset = 1;
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor | [*CudaByteTensor*] CudaByteTensor index", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_squeeze(default_arg1,arg1,arg2);
if(arg1->nDimension == 1 && arg1->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaByteTensor_get1d(cutorch_getstate(L), arg1, 0)));
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaByteTensor");
{int hasdims = arg4->nDimension > 1;
THCudaByteTensor_squeeze1d(default_arg1,arg3,arg4,arg5);
if(!hasdims && arg3->nDimension == 1 && arg3->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaByteTensor_get1d(cutorch_getstate(L), arg3, 0)));}
return 1;
}
return 0;
}

static int m_cutorch_CudaByteTensor_abs(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor* [CudaByteTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_abs(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaByteTensor_sign(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaByteTensor* [CudaByteTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaByteTensor_sign(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaByteTensor_cat(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
long arg4 = 0;
THCudaByteTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaByteTensor **arg6_data = NULL;
long arg6_size = 0;
int arg6_i = 0;
long arg7 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
argset = 1;
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
arg4 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg4 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 1
&& torch_isnonemptytable(L, 1)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaByteTensor**)THAlloc(arg6_size * sizeof(THCudaByteTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaByteTensor*)luaT_toudata(L, -1, "torch.CudaByteTensor")))
    luaL_error(L, "expected CudaByteTensor in tensor array");
  lua_pop(L, 1);
}

arg5 = THCudaByteTensor_new(cutorch_getstate(L));
arg7 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& torch_isnonemptytable(L, 2)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaByteTensor**)THAlloc(arg6_size * sizeof(THCudaByteTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaByteTensor*)luaT_toudata(L, -1, "torch.CudaByteTensor")))
    luaL_error(L, "expected CudaByteTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = THCudaByteTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& torch_isnonemptytable(L, 1)
&& lua_isnumber(L, 2)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaByteTensor**)THAlloc(arg6_size * sizeof(THCudaByteTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaByteTensor*)luaT_toudata(L, -1, "torch.CudaByteTensor")))
    luaL_error(L, "expected CudaByteTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 2)-1;
arg5 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& torch_isnonemptytable(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaByteTensor**)THAlloc(arg6_size * sizeof(THCudaByteTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaByteTensor*)luaT_toudata(L, -1, "torch.CudaByteTensor")))
    luaL_error(L, "expected CudaByteTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaByteTensor CudaByteTensor [index] | [*CudaByteTensor*] {CudaByteTensor+} [index]", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaByteTensor_cat(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaByteTensor");
THCudaByteTensor_catArray(default_arg1,arg5,arg6_data,arg6_size,arg7);
THFree(arg6_data);
return 1;
}
return 0;
}

static int m_cutorch_CudaByteTensor_dot(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaByteTensor *arg1 = NULL;
THCudaByteTensor *arg2 = NULL;
unsigned char arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaByteTensor CudaByteTensor", type_buf);
}
arg3 = THCudaByteTensor_dot(default_arg1,arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}

static const struct luaL_Reg m_cutorch_CudaByteTensorMath__ [] = {
{"fill", m_cutorch_CudaByteTensor_fill},
{"zero", m_cutorch_CudaByteTensor_zero},
{"zeros", m_cutorch_CudaByteTensor_zeros},
{"ones", m_cutorch_CudaByteTensor_ones},
{"reshape", m_cutorch_CudaByteTensor_reshape},
{"numel", m_cutorch_CudaByteTensor_numel},
{"add", m_cutorch_CudaByteTensor_add},
{"csub", m_cutorch_CudaByteTensor_csub},
{"mul", m_cutorch_CudaByteTensor_mul},
{"clamp", m_cutorch_CudaByteTensor_clamp},
{"cross", m_cutorch_CudaByteTensor_cross},
{"div", m_cutorch_CudaByteTensor_div},
{"cmul", m_cutorch_CudaByteTensor_cmul},
{"cpow", m_cutorch_CudaByteTensor_cpow},
{"cdiv", m_cutorch_CudaByteTensor_cdiv},
{"addcmul", m_cutorch_CudaByteTensor_addcmul},
{"addcdiv", m_cutorch_CudaByteTensor_addcdiv},
{"min", m_cutorch_CudaByteTensor_min},
{"max", m_cutorch_CudaByteTensor_max},
{"cmin", m_cutorch_CudaByteTensor_cmin},
{"cmax", m_cutorch_CudaByteTensor_cmax},
{"all", m_cutorch_CudaByteTensor_all},
{"any", m_cutorch_CudaByteTensor_any},
{"lt", m_cutorch_CudaByteTensor_lt},
{"gt", m_cutorch_CudaByteTensor_gt},
{"le", m_cutorch_CudaByteTensor_le},
{"ge", m_cutorch_CudaByteTensor_ge},
{"eq", m_cutorch_CudaByteTensor_eq},
{"ne", m_cutorch_CudaByteTensor_ne},
{"sum", m_cutorch_CudaByteTensor_sum},
{"prod", m_cutorch_CudaByteTensor_prod},
{"mean", m_cutorch_CudaByteTensor_mean},
{"maskedFill", m_cutorch_CudaByteTensor_maskedFill},
{"maskedCopy", m_cutorch_CudaByteTensor_maskedCopy},
{"maskedSelect", m_cutorch_CudaByteTensor_maskedSelect},
{"gather", m_cutorch_CudaByteTensor_gather},
{"scatter", m_cutorch_CudaByteTensor_scatter},
{"sort", m_cutorch_CudaByteTensor_sort},
{"squeeze", m_cutorch_CudaByteTensor_squeeze},
{"abs", m_cutorch_CudaByteTensor_abs},
{"sign", m_cutorch_CudaByteTensor_sign},
{"cat", m_cutorch_CudaByteTensor_cat},
{"dot", m_cutorch_CudaByteTensor_dot},
{NULL, NULL}
};

static const struct luaL_Reg cutorch_CudaByteTensorMath__ [] = {
{"fill", cutorch_CudaByteTensor_fill},
{"zero", cutorch_CudaByteTensor_zero},
{"zeros", cutorch_CudaByteTensor_zeros},
{"ones", cutorch_CudaByteTensor_ones},
{"reshape", cutorch_CudaByteTensor_reshape},
{"numel", cutorch_CudaByteTensor_numel},
{"add", cutorch_CudaByteTensor_add},
{"csub", cutorch_CudaByteTensor_csub},
{"mul", cutorch_CudaByteTensor_mul},
{"clamp", cutorch_CudaByteTensor_clamp},
{"cross", cutorch_CudaByteTensor_cross},
{"div", cutorch_CudaByteTensor_div},
{"cmul", cutorch_CudaByteTensor_cmul},
{"cpow", cutorch_CudaByteTensor_cpow},
{"cdiv", cutorch_CudaByteTensor_cdiv},
{"addcmul", cutorch_CudaByteTensor_addcmul},
{"addcdiv", cutorch_CudaByteTensor_addcdiv},
{"min", cutorch_CudaByteTensor_min},
{"max", cutorch_CudaByteTensor_max},
{"cmin", cutorch_CudaByteTensor_cmin},
{"cmax", cutorch_CudaByteTensor_cmax},
{"all", cutorch_CudaByteTensor_all},
{"any", cutorch_CudaByteTensor_any},
{"lt", cutorch_CudaByteTensor_lt},
{"gt", cutorch_CudaByteTensor_gt},
{"le", cutorch_CudaByteTensor_le},
{"ge", cutorch_CudaByteTensor_ge},
{"eq", cutorch_CudaByteTensor_eq},
{"ne", cutorch_CudaByteTensor_ne},
{"sum", cutorch_CudaByteTensor_sum},
{"prod", cutorch_CudaByteTensor_prod},
{"mean", cutorch_CudaByteTensor_mean},
{"maskedFill", cutorch_CudaByteTensor_maskedFill},
{"maskedCopy", cutorch_CudaByteTensor_maskedCopy},
{"maskedSelect", cutorch_CudaByteTensor_maskedSelect},
{"gather", cutorch_CudaByteTensor_gather},
{"scatter", cutorch_CudaByteTensor_scatter},
{"sort", cutorch_CudaByteTensor_sort},
{"squeeze", cutorch_CudaByteTensor_squeeze},
{"abs", cutorch_CudaByteTensor_abs},
{"sign", cutorch_CudaByteTensor_sign},
{"cat", cutorch_CudaByteTensor_cat},
{"dot", cutorch_CudaByteTensor_dot},
{NULL, NULL}
};

void cutorch_CudaByteTensorMath_init(lua_State *L)
{
  luaT_pushmetatable(L, "torch.CudaByteTensor");

  /* register methods */
  luaL_setfuncs(L, m_cutorch_CudaByteTensorMath__, 0);

  /* register functions into the "torch" field of the tensor metaclass */
  lua_pushstring(L, "torch");
  lua_newtable(L);
  luaL_setfuncs(L, cutorch_CudaByteTensorMath__, 0);
  lua_rawset(L, -3);
  lua_pop(L, 1);
}

static int cutorch_CudaCharTensor_fill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
char arg2 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (char)lua_tonumber(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor* char", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_fill(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaCharTensor_zero(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor*", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_zero(default_arg1,arg1);
return 1;
}

static int cutorch_CudaCharTensor_zeros(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 1
&& cutorch_islongargs(L, 1)
)
{
arg2 = cutorch_checklongargs(L, 1);
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_zeros(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int cutorch_CudaCharTensor_ones(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 1
&& cutorch_islongargs(L, 1)
)
{
arg2 = cutorch_checklongargs(L, 1);
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_ones(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int cutorch_CudaCharTensor_reshape(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
THLongStorage *arg3 = NULL;
if(narg >= 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg3 = cutorch_checklongargs(L, 2);
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg >= 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& cutorch_islongargs(L, 3)
)
{
arg1_idx = 1;
arg3 = cutorch_checklongargs(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_reshape(default_arg1,arg1,arg2,arg3);
THLongStorage_free(arg3);
return 1;
}

static int cutorch_CudaCharTensor_numel(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
ptrdiff_t arg2 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaCharTensor", type_buf);
}
arg2 = THCudaCharTensor_numel(default_arg1,arg1);
lua_pushinteger(L, (lua_Integer)arg2);
return 1;
}

static int cutorch_CudaCharTensor_add(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
THCudaCharTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
char arg6 = 1;
THCudaCharTensor *arg7 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (char)lua_tonumber(L, 2);
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 2;
arg4 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 2;
arg6 = (char)lua_tonumber(L, 2);
arg4 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaCharTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor char | [*CudaCharTensor*] CudaCharTensor [char] CudaCharTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_add(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaCharTensor");
THCudaCharTensor_cadd(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int cutorch_CudaCharTensor_csub(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
THCudaCharTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
char arg6 = 1;
THCudaCharTensor *arg7 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (char)lua_tonumber(L, 2);
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 2;
arg4 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 2;
arg6 = (char)lua_tonumber(L, 2);
arg4 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaCharTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor char | [*CudaCharTensor*] CudaCharTensor [char] CudaCharTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_sub(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaCharTensor");
THCudaCharTensor_csub(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int cutorch_CudaCharTensor_mul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (char)lua_tonumber(L, 2);
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor char", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_mul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaCharTensor_clamp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
char arg4 = 0;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg3 = (char)lua_tonumber(L, 2);
arg4 = (char)lua_tonumber(L, 3);
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
arg4 = (char)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor char char", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_clamp(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaCharTensor_cross(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
THCudaCharTensor *arg3 = NULL;
long arg4 = -1;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor CudaCharTensor [index]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_cross(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaCharTensor_div(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (char)lua_tonumber(L, 2);
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor char", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_div(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaCharTensor_cmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
THCudaCharTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor CudaCharTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_cmul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaCharTensor_cpow(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
THCudaCharTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor CudaCharTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_cpow(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaCharTensor_cdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
THCudaCharTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor CudaCharTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_cdiv(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaCharTensor_addcmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 1;
THCudaCharTensor *arg4 = NULL;
THCudaCharTensor *arg5 = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaCharTensor"))
)
{
arg3 = (char)lua_tonumber(L, 2);
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor [char] CudaCharTensor CudaCharTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_addcmul(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int cutorch_CudaCharTensor_addcdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 1;
THCudaCharTensor *arg4 = NULL;
THCudaCharTensor *arg5 = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaCharTensor"))
)
{
arg3 = (char)lua_tonumber(L, 2);
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor [char] CudaCharTensor CudaCharTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_addcdiv(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int cutorch_CudaCharTensor_min(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
char arg2 = 0;
THCudaCharTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaCharTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaCharTensor | [*CudaCharTensor*] [*CudaLongTensor*] CudaCharTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaCharTensor_minall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaCharTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaCharTensor_min(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int cutorch_CudaCharTensor_max(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
char arg2 = 0;
THCudaCharTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaCharTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaCharTensor | [*CudaCharTensor*] [*CudaLongTensor*] CudaCharTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaCharTensor_maxall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaCharTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaCharTensor_max(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int cutorch_CudaCharTensor_cmin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
THCudaCharTensor *arg3 = NULL;
THCudaCharTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
char arg6 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 1;
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (char)lua_tonumber(L, 2);
arg4 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor CudaCharTensor | [*CudaCharTensor*] CudaCharTensor char", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_cmin(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaCharTensor");
THCudaCharTensor_cminValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaCharTensor_cmax(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
THCudaCharTensor *arg3 = NULL;
THCudaCharTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
char arg6 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 1;
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (char)lua_tonumber(L, 2);
arg4 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor CudaCharTensor | [*CudaCharTensor*] CudaCharTensor char", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_cmax(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaCharTensor");
THCudaCharTensor_cmaxValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaCharTensor_lt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
THCudaCharTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaCharTensor *arg8 = NULL;
THCudaCharTensor *arg9 = NULL;
THCudaCharTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaCharTensor *arg11 = NULL;
THCudaCharTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaCharTensor char | *CudaCharTensor* CudaCharTensor char | [*CudaByteTensor*] CudaCharTensor CudaCharTensor | *CudaCharTensor* CudaCharTensor CudaCharTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaCharTensor_ltValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaCharTensor_ltValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaCharTensor_ltTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaCharTensor_ltTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaCharTensor_gt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
THCudaCharTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaCharTensor *arg8 = NULL;
THCudaCharTensor *arg9 = NULL;
THCudaCharTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaCharTensor *arg11 = NULL;
THCudaCharTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaCharTensor char | *CudaCharTensor* CudaCharTensor char | [*CudaByteTensor*] CudaCharTensor CudaCharTensor | *CudaCharTensor* CudaCharTensor CudaCharTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaCharTensor_gtValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaCharTensor_gtValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaCharTensor_gtTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaCharTensor_gtTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaCharTensor_le(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
THCudaCharTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaCharTensor *arg8 = NULL;
THCudaCharTensor *arg9 = NULL;
THCudaCharTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaCharTensor *arg11 = NULL;
THCudaCharTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaCharTensor char | *CudaCharTensor* CudaCharTensor char | [*CudaByteTensor*] CudaCharTensor CudaCharTensor | *CudaCharTensor* CudaCharTensor CudaCharTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaCharTensor_leValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaCharTensor_leValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaCharTensor_leTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaCharTensor_leTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaCharTensor_ge(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
THCudaCharTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaCharTensor *arg8 = NULL;
THCudaCharTensor *arg9 = NULL;
THCudaCharTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaCharTensor *arg11 = NULL;
THCudaCharTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaCharTensor char | *CudaCharTensor* CudaCharTensor char | [*CudaByteTensor*] CudaCharTensor CudaCharTensor | *CudaCharTensor* CudaCharTensor CudaCharTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaCharTensor_geValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaCharTensor_geValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaCharTensor_geTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaCharTensor_geTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaCharTensor_eq(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
THCudaCharTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaCharTensor *arg8 = NULL;
THCudaCharTensor *arg9 = NULL;
THCudaCharTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaCharTensor *arg11 = NULL;
THCudaCharTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaCharTensor char | *CudaCharTensor* CudaCharTensor char | [*CudaByteTensor*] CudaCharTensor CudaCharTensor | *CudaCharTensor* CudaCharTensor CudaCharTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaCharTensor_eqValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaCharTensor_eqValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaCharTensor_eqTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaCharTensor_eqTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaCharTensor_ne(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
THCudaCharTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaCharTensor *arg8 = NULL;
THCudaCharTensor *arg9 = NULL;
THCudaCharTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaCharTensor *arg11 = NULL;
THCudaCharTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaCharTensor char | *CudaCharTensor* CudaCharTensor char | [*CudaByteTensor*] CudaCharTensor CudaCharTensor | *CudaCharTensor* CudaCharTensor CudaCharTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaCharTensor_neValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaCharTensor_neValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaCharTensor_neTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaCharTensor_neTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaCharTensor_sum(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
long arg2 = 0;
THCudaCharTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaCharTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaCharTensor | [*CudaCharTensor*] CudaCharTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaCharTensor_sumall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaCharTensor");
THCudaCharTensor_sum(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaCharTensor_prod(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
long arg2 = 0;
THCudaCharTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaCharTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaCharTensor | [*CudaCharTensor*] CudaCharTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaCharTensor_prodall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaCharTensor");
THCudaCharTensor_prod(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaCharTensor_mean(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
long arg2 = 0;
THCudaCharTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaCharTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaCharTensor | [*CudaCharTensor*] CudaCharTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaCharTensor_meanall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaCharTensor");
THCudaCharTensor_mean(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaCharTensor_maskedFill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
char arg3 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor* CudaByteTensor char", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_maskedFill(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaCharTensor_maskedCopy(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaCharTensor *arg3 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor* CudaByteTensor CudaCharTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_maskedCopy(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaCharTensor_maskedSelect(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_maskedSelect(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaCharTensor_gather(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
THCudaCharTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaCharTensor *arg6 = NULL;
long arg7 = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaCharTensor *dummyIndexTensor = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
THCudaCharTensor_checkGPU(cutorch_getstate(L), 1, arg4);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg4);
		  THCudaCharTensor_resize(state, arg1, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg6 = (decltype(arg6))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 2;
arg7 = (long)lua_tonumber(L, 2)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaCharTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaChar(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
arg5 = THCudaCharTensor_new(cutorch_getstate(L));
THCudaCharTensor_checkGPU(cutorch_getstate(L), 1, arg8);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg8);
		  THCudaCharTensor_resize(state, arg5, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 4, "torch.CudaCharTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg7 = (long)lua_tonumber(L, 3)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaCharTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaChar(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor index CudaLongTensor | [*CudaCharTensor*] CudaCharTensor index CudaCharTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_gather(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaCharTensor");
THCudaCharTensor_gather(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int cutorch_CudaCharTensor_scatter(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
THCudaCharTensor *arg4 = NULL;
THCudaCharTensor *arg5 = NULL;
int arg5_idx = 0;
long arg6 = 0;
THCudaLongTensor *arg7 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaCharTensor *dummyIndexTensor = NULL;
THCudaCharTensor *arg8 = NULL;
THCudaCharTensor *arg9 = NULL;
int arg9_idx = 0;
long arg10 = 0;
THCudaLongTensor *arg11 = NULL;
char arg12 = 0;
THCudaCharTensor *arg13 = NULL;
int arg13_idx = 0;
long arg14 = 0;
THCudaLongTensor *arg15 = NULL;
char arg16 = 0;
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaCharTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = (long)lua_tonumber(L, 2)-1;
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 4, "torch.CudaCharTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg6 = (long)lua_tonumber(L, 2)-1;
arg7 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaCharTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg7, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaChar(default_arg1, arg7, dummyIndexTensor);
indexLongTensor = arg7;
}
else if(narg == 4
&& (arg9 = (decltype(arg9))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 3;
arg9_idx = 1;
arg10 = (long)lua_tonumber(L, 2)-1;
arg12 = (char)lua_tonumber(L, 4);
}
else if(narg == 4
&& (arg13 = (decltype(arg13))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 4;
arg13_idx = 1;
arg14 = (long)lua_tonumber(L, 2)-1;
arg15 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaCharTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg15, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaChar(default_arg1, arg15, dummyIndexTensor);
indexLongTensor = arg15;
arg16 = (char)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor* index CudaLongTensor CudaCharTensor | *CudaCharTensor* index CudaCharTensor CudaCharTensor | *CudaCharTensor* index CudaLongTensor char | *CudaCharTensor* index CudaCharTensor char", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_scatter(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg5_idx);
THCudaCharTensor_scatter(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
else if(argset == 3)
{
lua_pushvalue(L, arg9_idx);
THCudaCharTensor_scatterFill(default_arg1,arg9,arg10,arg11,arg12);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg13_idx);
THCudaCharTensor_scatterFill(default_arg1,arg13,arg14,arg15,arg16);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int cutorch_CudaCharTensor_sort(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaCharTensor *arg3 = NULL;
long arg4 = 0;
int arg5 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
arg2_idx = 1;
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
arg4 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isboolean(L, 2)
)
{
arg5 = lua_toboolean(L, 2);
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isboolean(L, 3)
)
{
arg1_idx = 1;
arg5 = lua_toboolean(L, 3);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isboolean(L, 3)
)
{
arg2_idx = 1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
arg4 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = lua_toboolean(L, 4);
arg4 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = lua_toboolean(L, 5);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] [*CudaLongTensor*] CudaCharTensor [index] [boolean]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
if(arg2_idx)
lua_pushvalue(L, arg2_idx);
else
luaT_pushudata(L, arg2, "torch.CudaLongTensor");
THCudaCharTensor_sort(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 2;
}

static int cutorch_CudaCharTensor_squeeze(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
THCudaCharTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaCharTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
argset = 1;
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor | [*CudaCharTensor*] CudaCharTensor index", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_squeeze(default_arg1,arg1,arg2);
if(arg1->nDimension == 1 && arg1->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaCharTensor_get1d(cutorch_getstate(L), arg1, 0)));
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaCharTensor");
{int hasdims = arg4->nDimension > 1;
THCudaCharTensor_squeeze1d(default_arg1,arg3,arg4,arg5);
if(!hasdims && arg3->nDimension == 1 && arg3->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaCharTensor_get1d(cutorch_getstate(L), arg3, 0)));}
return 1;
}
return 0;
}

static int cutorch_CudaCharTensor_abs(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_abs(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaCharTensor_sign(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_sign(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaCharTensor_cat(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
THCudaCharTensor *arg3 = NULL;
long arg4 = 0;
THCudaCharTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaCharTensor **arg6_data = NULL;
long arg6_size = 0;
int arg6_i = 0;
long arg7 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 1;
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
arg4 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg4 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 1
&& torch_isnonemptytable(L, 1)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaCharTensor**)THAlloc(arg6_size * sizeof(THCudaCharTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaCharTensor*)luaT_toudata(L, -1, "torch.CudaCharTensor")))
    luaL_error(L, "expected CudaCharTensor in tensor array");
  lua_pop(L, 1);
}

arg5 = THCudaCharTensor_new(cutorch_getstate(L));
arg7 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& torch_isnonemptytable(L, 2)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaCharTensor**)THAlloc(arg6_size * sizeof(THCudaCharTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaCharTensor*)luaT_toudata(L, -1, "torch.CudaCharTensor")))
    luaL_error(L, "expected CudaCharTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& torch_isnonemptytable(L, 1)
&& lua_isnumber(L, 2)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaCharTensor**)THAlloc(arg6_size * sizeof(THCudaCharTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaCharTensor*)luaT_toudata(L, -1, "torch.CudaCharTensor")))
    luaL_error(L, "expected CudaCharTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 2)-1;
arg5 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& torch_isnonemptytable(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaCharTensor**)THAlloc(arg6_size * sizeof(THCudaCharTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaCharTensor*)luaT_toudata(L, -1, "torch.CudaCharTensor")))
    luaL_error(L, "expected CudaCharTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor CudaCharTensor [index] | [*CudaCharTensor*] {CudaCharTensor+} [index]", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_cat(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaCharTensor");
THCudaCharTensor_catArray(default_arg1,arg5,arg6_data,arg6_size,arg7);
THFree(arg6_data);
return 1;
}
return 0;
}

static int cutorch_CudaCharTensor_dot(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaCharTensor CudaCharTensor", type_buf);
}
arg3 = THCudaCharTensor_dot(default_arg1,arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}

static int m_cutorch_CudaCharTensor_fill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
char arg2 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (char)lua_tonumber(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor* char", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_fill(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaCharTensor_zero(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor*", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_zero(default_arg1,arg1);
return 1;
}

static int m_cutorch_CudaCharTensor_zeros(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor* (LongStorage | dim1 [dim2...])", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_zeros(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int m_cutorch_CudaCharTensor_ones(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor* (LongStorage | dim1 [dim2...])", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_ones(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int m_cutorch_CudaCharTensor_reshape(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
THLongStorage *arg3 = NULL;
if(narg >= 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg3 = cutorch_checklongargs(L, 2);
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg >= 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& cutorch_islongargs(L, 3)
)
{
arg1_idx = 1;
arg3 = cutorch_checklongargs(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_reshape(default_arg1,arg1,arg2,arg3);
THLongStorage_free(arg3);
return 1;
}

static int m_cutorch_CudaCharTensor_numel(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
ptrdiff_t arg2 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaCharTensor", type_buf);
}
arg2 = THCudaCharTensor_numel(default_arg1,arg1);
lua_pushinteger(L, (lua_Integer)arg2);
return 1;
}

static int m_cutorch_CudaCharTensor_add(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
THCudaCharTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
char arg6 = 1;
THCudaCharTensor *arg7 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg5 = arg4;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaCharTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor* [CudaCharTensor] char | *CudaCharTensor* [CudaCharTensor] [char] CudaCharTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_add(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaCharTensor_cadd(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int m_cutorch_CudaCharTensor_csub(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
THCudaCharTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
char arg6 = 1;
THCudaCharTensor *arg7 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg5 = arg4;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaCharTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor* [CudaCharTensor] char | *CudaCharTensor* [CudaCharTensor] [char] CudaCharTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_sub(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaCharTensor_csub(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int m_cutorch_CudaCharTensor_mul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor* [CudaCharTensor] char", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_mul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaCharTensor_clamp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
char arg4 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 2);
arg4 = (char)lua_tonumber(L, 3);
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
arg4 = (char)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor* [CudaCharTensor] char char", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_clamp(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int m_cutorch_CudaCharTensor_cross(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
THCudaCharTensor *arg3 = NULL;
long arg4 = -1;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor CudaCharTensor [index]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_cross(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int m_cutorch_CudaCharTensor_div(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor* [CudaCharTensor] char", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_div(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaCharTensor_cmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
THCudaCharTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor* [CudaCharTensor] CudaCharTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_cmul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaCharTensor_cpow(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
THCudaCharTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor* [CudaCharTensor] CudaCharTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_cpow(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaCharTensor_cdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
THCudaCharTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor* [CudaCharTensor] CudaCharTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_cdiv(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaCharTensor_addcmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 1;
THCudaCharTensor *arg4 = NULL;
THCudaCharTensor *arg5 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor* [CudaCharTensor] [char] CudaCharTensor CudaCharTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_addcmul(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int m_cutorch_CudaCharTensor_addcdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 1;
THCudaCharTensor *arg4 = NULL;
THCudaCharTensor *arg5 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor* [CudaCharTensor] [char] CudaCharTensor CudaCharTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_addcdiv(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int m_cutorch_CudaCharTensor_min(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
char arg2 = 0;
THCudaCharTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaCharTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaCharTensor | [*CudaCharTensor*] [*CudaLongTensor*] CudaCharTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaCharTensor_minall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaCharTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaCharTensor_min(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int m_cutorch_CudaCharTensor_max(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
char arg2 = 0;
THCudaCharTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaCharTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaCharTensor | [*CudaCharTensor*] [*CudaLongTensor*] CudaCharTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaCharTensor_maxall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaCharTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaCharTensor_max(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int m_cutorch_CudaCharTensor_cmin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
THCudaCharTensor *arg3 = NULL;
THCudaCharTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
char arg6 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
argset = 1;
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 1;
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 1
&& lua_isnumber(L, 1)
)
{
argset = 2;
arg6 = (char)lua_tonumber(L, 1);
arg4 = THCudaCharTensor_new(cutorch_getstate(L));
arg5 = arg4;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (char)lua_tonumber(L, 2);
arg4 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] [CudaCharTensor] CudaCharTensor | [*CudaCharTensor*] [CudaCharTensor] char", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_cmin(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaCharTensor");
THCudaCharTensor_cminValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaCharTensor_cmax(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
THCudaCharTensor *arg3 = NULL;
THCudaCharTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
char arg6 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
argset = 1;
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 1;
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 1
&& lua_isnumber(L, 1)
)
{
argset = 2;
arg6 = (char)lua_tonumber(L, 1);
arg4 = THCudaCharTensor_new(cutorch_getstate(L));
arg5 = arg4;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (char)lua_tonumber(L, 2);
arg4 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] [CudaCharTensor] CudaCharTensor | [*CudaCharTensor*] [CudaCharTensor] char", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_cmax(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaCharTensor");
THCudaCharTensor_cmaxValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaCharTensor_lt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
THCudaCharTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaCharTensor *arg8 = NULL;
THCudaCharTensor *arg9 = NULL;
THCudaCharTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaCharTensor *arg11 = NULL;
THCudaCharTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaCharTensor char | *CudaCharTensor* CudaCharTensor char | [*CudaByteTensor*] CudaCharTensor CudaCharTensor | *CudaCharTensor* CudaCharTensor CudaCharTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaCharTensor_ltValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaCharTensor_ltValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaCharTensor_ltTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaCharTensor_ltTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaCharTensor_gt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
THCudaCharTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaCharTensor *arg8 = NULL;
THCudaCharTensor *arg9 = NULL;
THCudaCharTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaCharTensor *arg11 = NULL;
THCudaCharTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaCharTensor char | *CudaCharTensor* CudaCharTensor char | [*CudaByteTensor*] CudaCharTensor CudaCharTensor | *CudaCharTensor* CudaCharTensor CudaCharTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaCharTensor_gtValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaCharTensor_gtValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaCharTensor_gtTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaCharTensor_gtTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaCharTensor_le(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
THCudaCharTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaCharTensor *arg8 = NULL;
THCudaCharTensor *arg9 = NULL;
THCudaCharTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaCharTensor *arg11 = NULL;
THCudaCharTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaCharTensor char | *CudaCharTensor* CudaCharTensor char | [*CudaByteTensor*] CudaCharTensor CudaCharTensor | *CudaCharTensor* CudaCharTensor CudaCharTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaCharTensor_leValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaCharTensor_leValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaCharTensor_leTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaCharTensor_leTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaCharTensor_ge(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
THCudaCharTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaCharTensor *arg8 = NULL;
THCudaCharTensor *arg9 = NULL;
THCudaCharTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaCharTensor *arg11 = NULL;
THCudaCharTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaCharTensor char | *CudaCharTensor* CudaCharTensor char | [*CudaByteTensor*] CudaCharTensor CudaCharTensor | *CudaCharTensor* CudaCharTensor CudaCharTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaCharTensor_geValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaCharTensor_geValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaCharTensor_geTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaCharTensor_geTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaCharTensor_eq(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
THCudaCharTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaCharTensor *arg8 = NULL;
THCudaCharTensor *arg9 = NULL;
THCudaCharTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaCharTensor *arg11 = NULL;
THCudaCharTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaCharTensor char | *CudaCharTensor* CudaCharTensor char | [*CudaByteTensor*] CudaCharTensor CudaCharTensor | *CudaCharTensor* CudaCharTensor CudaCharTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaCharTensor_eqValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaCharTensor_eqValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaCharTensor_eqTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaCharTensor_eqTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaCharTensor_ne(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
THCudaCharTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaCharTensor *arg5 = NULL;
char arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaCharTensor *arg8 = NULL;
THCudaCharTensor *arg9 = NULL;
THCudaCharTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaCharTensor *arg11 = NULL;
THCudaCharTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (char)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (char)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaCharTensor char | *CudaCharTensor* CudaCharTensor char | [*CudaByteTensor*] CudaCharTensor CudaCharTensor | *CudaCharTensor* CudaCharTensor CudaCharTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaCharTensor_neValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaCharTensor_neValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaCharTensor_neTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaCharTensor_neTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaCharTensor_sum(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
long arg2 = 0;
THCudaCharTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaCharTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaCharTensor | [*CudaCharTensor*] CudaCharTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaCharTensor_sumall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaCharTensor");
THCudaCharTensor_sum(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaCharTensor_prod(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
long arg2 = 0;
THCudaCharTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaCharTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaCharTensor | [*CudaCharTensor*] CudaCharTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaCharTensor_prodall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaCharTensor");
THCudaCharTensor_prod(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaCharTensor_mean(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
long arg2 = 0;
THCudaCharTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaCharTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaCharTensor | [*CudaCharTensor*] CudaCharTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaCharTensor_meanall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaCharTensor");
THCudaCharTensor_mean(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaCharTensor_maskedFill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
char arg3 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (char)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor* CudaByteTensor char", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_maskedFill(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaCharTensor_maskedCopy(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaCharTensor *arg3 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor* CudaByteTensor CudaCharTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_maskedCopy(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaCharTensor_maskedSelect(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_maskedSelect(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaCharTensor_gather(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
THCudaCharTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaCharTensor *arg6 = NULL;
long arg7 = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaCharTensor *dummyIndexTensor = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
THCudaCharTensor_checkGPU(cutorch_getstate(L), 1, arg4);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg4);
		  THCudaCharTensor_resize(state, arg1, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg6 = (decltype(arg6))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 2;
arg7 = (long)lua_tonumber(L, 2)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaCharTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaChar(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
arg5 = THCudaCharTensor_new(cutorch_getstate(L));
THCudaCharTensor_checkGPU(cutorch_getstate(L), 1, arg8);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg8);
		  THCudaCharTensor_resize(state, arg5, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 4, "torch.CudaCharTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg7 = (long)lua_tonumber(L, 3)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaCharTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaChar(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor index CudaLongTensor | [*CudaCharTensor*] CudaCharTensor index CudaCharTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_gather(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaCharTensor");
THCudaCharTensor_gather(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int m_cutorch_CudaCharTensor_scatter(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
THCudaCharTensor *arg4 = NULL;
THCudaCharTensor *arg5 = NULL;
int arg5_idx = 0;
long arg6 = 0;
THCudaLongTensor *arg7 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaCharTensor *dummyIndexTensor = NULL;
THCudaCharTensor *arg8 = NULL;
THCudaCharTensor *arg9 = NULL;
int arg9_idx = 0;
long arg10 = 0;
THCudaLongTensor *arg11 = NULL;
char arg12 = 0;
THCudaCharTensor *arg13 = NULL;
int arg13_idx = 0;
long arg14 = 0;
THCudaLongTensor *arg15 = NULL;
char arg16 = 0;
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaCharTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = (long)lua_tonumber(L, 2)-1;
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 4, "torch.CudaCharTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg6 = (long)lua_tonumber(L, 2)-1;
arg7 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaCharTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg7, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaChar(default_arg1, arg7, dummyIndexTensor);
indexLongTensor = arg7;
}
else if(narg == 4
&& (arg9 = (decltype(arg9))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 3;
arg9_idx = 1;
arg10 = (long)lua_tonumber(L, 2)-1;
arg12 = (char)lua_tonumber(L, 4);
}
else if(narg == 4
&& (arg13 = (decltype(arg13))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 4;
arg13_idx = 1;
arg14 = (long)lua_tonumber(L, 2)-1;
arg15 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaCharTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg15, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaChar(default_arg1, arg15, dummyIndexTensor);
indexLongTensor = arg15;
arg16 = (char)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor* index CudaLongTensor CudaCharTensor | *CudaCharTensor* index CudaCharTensor CudaCharTensor | *CudaCharTensor* index CudaLongTensor char | *CudaCharTensor* index CudaCharTensor char", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_scatter(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg5_idx);
THCudaCharTensor_scatter(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
else if(argset == 3)
{
lua_pushvalue(L, arg9_idx);
THCudaCharTensor_scatterFill(default_arg1,arg9,arg10,arg11,arg12);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg13_idx);
THCudaCharTensor_scatterFill(default_arg1,arg13,arg14,arg15,arg16);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int m_cutorch_CudaCharTensor_sort(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaCharTensor *arg3 = NULL;
long arg4 = 0;
int arg5 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
arg2_idx = 1;
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
arg4 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isboolean(L, 2)
)
{
arg5 = lua_toboolean(L, 2);
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isboolean(L, 3)
)
{
arg1_idx = 1;
arg5 = lua_toboolean(L, 3);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isboolean(L, 3)
)
{
arg2_idx = 1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
arg4 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = lua_toboolean(L, 4);
arg4 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = lua_toboolean(L, 5);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] [*CudaLongTensor*] CudaCharTensor [index] [boolean]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
if(arg2_idx)
lua_pushvalue(L, arg2_idx);
else
luaT_pushudata(L, arg2, "torch.CudaLongTensor");
THCudaCharTensor_sort(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 2;
}

static int m_cutorch_CudaCharTensor_squeeze(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
THCudaCharTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaCharTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
argset = 1;
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor | [*CudaCharTensor*] CudaCharTensor index", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_squeeze(default_arg1,arg1,arg2);
if(arg1->nDimension == 1 && arg1->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaCharTensor_get1d(cutorch_getstate(L), arg1, 0)));
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaCharTensor");
{int hasdims = arg4->nDimension > 1;
THCudaCharTensor_squeeze1d(default_arg1,arg3,arg4,arg5);
if(!hasdims && arg3->nDimension == 1 && arg3->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaCharTensor_get1d(cutorch_getstate(L), arg3, 0)));}
return 1;
}
return 0;
}

static int m_cutorch_CudaCharTensor_abs(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor* [CudaCharTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_abs(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaCharTensor_sign(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaCharTensor* [CudaCharTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaCharTensor_sign(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaCharTensor_cat(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaCharTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaCharTensor *arg2 = NULL;
THCudaCharTensor *arg3 = NULL;
long arg4 = 0;
THCudaCharTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaCharTensor **arg6_data = NULL;
long arg6_size = 0;
int arg6_i = 0;
long arg7 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
argset = 1;
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
arg4 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg4 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaCharTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 1
&& torch_isnonemptytable(L, 1)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaCharTensor**)THAlloc(arg6_size * sizeof(THCudaCharTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaCharTensor*)luaT_toudata(L, -1, "torch.CudaCharTensor")))
    luaL_error(L, "expected CudaCharTensor in tensor array");
  lua_pop(L, 1);
}

arg5 = THCudaCharTensor_new(cutorch_getstate(L));
arg7 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& torch_isnonemptytable(L, 2)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaCharTensor**)THAlloc(arg6_size * sizeof(THCudaCharTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaCharTensor*)luaT_toudata(L, -1, "torch.CudaCharTensor")))
    luaL_error(L, "expected CudaCharTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = THCudaCharTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& torch_isnonemptytable(L, 1)
&& lua_isnumber(L, 2)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaCharTensor**)THAlloc(arg6_size * sizeof(THCudaCharTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaCharTensor*)luaT_toudata(L, -1, "torch.CudaCharTensor")))
    luaL_error(L, "expected CudaCharTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 2)-1;
arg5 = THCudaCharTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& torch_isnonemptytable(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaCharTensor**)THAlloc(arg6_size * sizeof(THCudaCharTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaCharTensor*)luaT_toudata(L, -1, "torch.CudaCharTensor")))
    luaL_error(L, "expected CudaCharTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaCharTensor*] CudaCharTensor CudaCharTensor [index] | [*CudaCharTensor*] {CudaCharTensor+} [index]", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaCharTensor");
THCudaCharTensor_cat(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaCharTensor");
THCudaCharTensor_catArray(default_arg1,arg5,arg6_data,arg6_size,arg7);
THFree(arg6_data);
return 1;
}
return 0;
}

static int m_cutorch_CudaCharTensor_dot(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaCharTensor *arg1 = NULL;
THCudaCharTensor *arg2 = NULL;
char arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaCharTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaCharTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaCharTensor CudaCharTensor", type_buf);
}
arg3 = THCudaCharTensor_dot(default_arg1,arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}

static const struct luaL_Reg m_cutorch_CudaCharTensorMath__ [] = {
{"fill", m_cutorch_CudaCharTensor_fill},
{"zero", m_cutorch_CudaCharTensor_zero},
{"zeros", m_cutorch_CudaCharTensor_zeros},
{"ones", m_cutorch_CudaCharTensor_ones},
{"reshape", m_cutorch_CudaCharTensor_reshape},
{"numel", m_cutorch_CudaCharTensor_numel},
{"add", m_cutorch_CudaCharTensor_add},
{"csub", m_cutorch_CudaCharTensor_csub},
{"mul", m_cutorch_CudaCharTensor_mul},
{"clamp", m_cutorch_CudaCharTensor_clamp},
{"cross", m_cutorch_CudaCharTensor_cross},
{"div", m_cutorch_CudaCharTensor_div},
{"cmul", m_cutorch_CudaCharTensor_cmul},
{"cpow", m_cutorch_CudaCharTensor_cpow},
{"cdiv", m_cutorch_CudaCharTensor_cdiv},
{"addcmul", m_cutorch_CudaCharTensor_addcmul},
{"addcdiv", m_cutorch_CudaCharTensor_addcdiv},
{"min", m_cutorch_CudaCharTensor_min},
{"max", m_cutorch_CudaCharTensor_max},
{"cmin", m_cutorch_CudaCharTensor_cmin},
{"cmax", m_cutorch_CudaCharTensor_cmax},
{"lt", m_cutorch_CudaCharTensor_lt},
{"gt", m_cutorch_CudaCharTensor_gt},
{"le", m_cutorch_CudaCharTensor_le},
{"ge", m_cutorch_CudaCharTensor_ge},
{"eq", m_cutorch_CudaCharTensor_eq},
{"ne", m_cutorch_CudaCharTensor_ne},
{"sum", m_cutorch_CudaCharTensor_sum},
{"prod", m_cutorch_CudaCharTensor_prod},
{"mean", m_cutorch_CudaCharTensor_mean},
{"maskedFill", m_cutorch_CudaCharTensor_maskedFill},
{"maskedCopy", m_cutorch_CudaCharTensor_maskedCopy},
{"maskedSelect", m_cutorch_CudaCharTensor_maskedSelect},
{"gather", m_cutorch_CudaCharTensor_gather},
{"scatter", m_cutorch_CudaCharTensor_scatter},
{"sort", m_cutorch_CudaCharTensor_sort},
{"squeeze", m_cutorch_CudaCharTensor_squeeze},
{"abs", m_cutorch_CudaCharTensor_abs},
{"sign", m_cutorch_CudaCharTensor_sign},
{"cat", m_cutorch_CudaCharTensor_cat},
{"dot", m_cutorch_CudaCharTensor_dot},
{NULL, NULL}
};

static const struct luaL_Reg cutorch_CudaCharTensorMath__ [] = {
{"fill", cutorch_CudaCharTensor_fill},
{"zero", cutorch_CudaCharTensor_zero},
{"zeros", cutorch_CudaCharTensor_zeros},
{"ones", cutorch_CudaCharTensor_ones},
{"reshape", cutorch_CudaCharTensor_reshape},
{"numel", cutorch_CudaCharTensor_numel},
{"add", cutorch_CudaCharTensor_add},
{"csub", cutorch_CudaCharTensor_csub},
{"mul", cutorch_CudaCharTensor_mul},
{"clamp", cutorch_CudaCharTensor_clamp},
{"cross", cutorch_CudaCharTensor_cross},
{"div", cutorch_CudaCharTensor_div},
{"cmul", cutorch_CudaCharTensor_cmul},
{"cpow", cutorch_CudaCharTensor_cpow},
{"cdiv", cutorch_CudaCharTensor_cdiv},
{"addcmul", cutorch_CudaCharTensor_addcmul},
{"addcdiv", cutorch_CudaCharTensor_addcdiv},
{"min", cutorch_CudaCharTensor_min},
{"max", cutorch_CudaCharTensor_max},
{"cmin", cutorch_CudaCharTensor_cmin},
{"cmax", cutorch_CudaCharTensor_cmax},
{"lt", cutorch_CudaCharTensor_lt},
{"gt", cutorch_CudaCharTensor_gt},
{"le", cutorch_CudaCharTensor_le},
{"ge", cutorch_CudaCharTensor_ge},
{"eq", cutorch_CudaCharTensor_eq},
{"ne", cutorch_CudaCharTensor_ne},
{"sum", cutorch_CudaCharTensor_sum},
{"prod", cutorch_CudaCharTensor_prod},
{"mean", cutorch_CudaCharTensor_mean},
{"maskedFill", cutorch_CudaCharTensor_maskedFill},
{"maskedCopy", cutorch_CudaCharTensor_maskedCopy},
{"maskedSelect", cutorch_CudaCharTensor_maskedSelect},
{"gather", cutorch_CudaCharTensor_gather},
{"scatter", cutorch_CudaCharTensor_scatter},
{"sort", cutorch_CudaCharTensor_sort},
{"squeeze", cutorch_CudaCharTensor_squeeze},
{"abs", cutorch_CudaCharTensor_abs},
{"sign", cutorch_CudaCharTensor_sign},
{"cat", cutorch_CudaCharTensor_cat},
{"dot", cutorch_CudaCharTensor_dot},
{NULL, NULL}
};

void cutorch_CudaCharTensorMath_init(lua_State *L)
{
  luaT_pushmetatable(L, "torch.CudaCharTensor");

  /* register methods */
  luaL_setfuncs(L, m_cutorch_CudaCharTensorMath__, 0);

  /* register functions into the "torch" field of the tensor metaclass */
  lua_pushstring(L, "torch");
  lua_newtable(L);
  luaL_setfuncs(L, cutorch_CudaCharTensorMath__, 0);
  lua_rawset(L, -3);
  lua_pop(L, 1);
}

static int cutorch_CudaShortTensor_fill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
short arg2 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (short)lua_tonumber(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor* short", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_fill(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaShortTensor_zero(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor*", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_zero(default_arg1,arg1);
return 1;
}

static int cutorch_CudaShortTensor_zeros(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 1
&& cutorch_islongargs(L, 1)
)
{
arg2 = cutorch_checklongargs(L, 1);
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_zeros(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int cutorch_CudaShortTensor_ones(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 1
&& cutorch_islongargs(L, 1)
)
{
arg2 = cutorch_checklongargs(L, 1);
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_ones(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int cutorch_CudaShortTensor_reshape(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
THLongStorage *arg3 = NULL;
if(narg >= 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg3 = cutorch_checklongargs(L, 2);
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg >= 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& cutorch_islongargs(L, 3)
)
{
arg1_idx = 1;
arg3 = cutorch_checklongargs(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_reshape(default_arg1,arg1,arg2,arg3);
THLongStorage_free(arg3);
return 1;
}

static int cutorch_CudaShortTensor_numel(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
ptrdiff_t arg2 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaShortTensor", type_buf);
}
arg2 = THCudaShortTensor_numel(default_arg1,arg1);
lua_pushinteger(L, (lua_Integer)arg2);
return 1;
}

static int cutorch_CudaShortTensor_add(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
THCudaShortTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
short arg6 = 1;
THCudaShortTensor *arg7 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (short)lua_tonumber(L, 2);
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 2;
arg4 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 2;
arg6 = (short)lua_tonumber(L, 2);
arg4 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaShortTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor short | [*CudaShortTensor*] CudaShortTensor [short] CudaShortTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_add(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaShortTensor");
THCudaShortTensor_cadd(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int cutorch_CudaShortTensor_csub(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
THCudaShortTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
short arg6 = 1;
THCudaShortTensor *arg7 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (short)lua_tonumber(L, 2);
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 2;
arg4 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 2;
arg6 = (short)lua_tonumber(L, 2);
arg4 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaShortTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor short | [*CudaShortTensor*] CudaShortTensor [short] CudaShortTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_sub(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaShortTensor");
THCudaShortTensor_csub(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int cutorch_CudaShortTensor_mul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (short)lua_tonumber(L, 2);
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor short", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_mul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaShortTensor_clamp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
short arg4 = 0;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg3 = (short)lua_tonumber(L, 2);
arg4 = (short)lua_tonumber(L, 3);
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
arg4 = (short)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor short short", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_clamp(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaShortTensor_cross(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
THCudaShortTensor *arg3 = NULL;
long arg4 = -1;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor CudaShortTensor [index]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_cross(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaShortTensor_div(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (short)lua_tonumber(L, 2);
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor short", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_div(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaShortTensor_cmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
THCudaShortTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor CudaShortTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_cmul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaShortTensor_cpow(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
THCudaShortTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor CudaShortTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_cpow(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaShortTensor_cdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
THCudaShortTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor CudaShortTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_cdiv(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaShortTensor_addcmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 1;
THCudaShortTensor *arg4 = NULL;
THCudaShortTensor *arg5 = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaShortTensor"))
)
{
arg3 = (short)lua_tonumber(L, 2);
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor [short] CudaShortTensor CudaShortTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_addcmul(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int cutorch_CudaShortTensor_addcdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 1;
THCudaShortTensor *arg4 = NULL;
THCudaShortTensor *arg5 = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaShortTensor"))
)
{
arg3 = (short)lua_tonumber(L, 2);
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor [short] CudaShortTensor CudaShortTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_addcdiv(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int cutorch_CudaShortTensor_min(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
short arg2 = 0;
THCudaShortTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaShortTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaShortTensor | [*CudaShortTensor*] [*CudaLongTensor*] CudaShortTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaShortTensor_minall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaShortTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaShortTensor_min(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int cutorch_CudaShortTensor_max(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
short arg2 = 0;
THCudaShortTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaShortTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaShortTensor | [*CudaShortTensor*] [*CudaLongTensor*] CudaShortTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaShortTensor_maxall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaShortTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaShortTensor_max(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int cutorch_CudaShortTensor_cmin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
THCudaShortTensor *arg3 = NULL;
THCudaShortTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
short arg6 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 1;
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (short)lua_tonumber(L, 2);
arg4 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor CudaShortTensor | [*CudaShortTensor*] CudaShortTensor short", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_cmin(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaShortTensor");
THCudaShortTensor_cminValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaShortTensor_cmax(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
THCudaShortTensor *arg3 = NULL;
THCudaShortTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
short arg6 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 1;
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (short)lua_tonumber(L, 2);
arg4 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor CudaShortTensor | [*CudaShortTensor*] CudaShortTensor short", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_cmax(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaShortTensor");
THCudaShortTensor_cmaxValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaShortTensor_lt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
THCudaShortTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
short arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaShortTensor *arg8 = NULL;
THCudaShortTensor *arg9 = NULL;
THCudaShortTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaShortTensor *arg11 = NULL;
THCudaShortTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (short)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaShortTensor short | *CudaShortTensor* CudaShortTensor short | [*CudaByteTensor*] CudaShortTensor CudaShortTensor | *CudaShortTensor* CudaShortTensor CudaShortTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaShortTensor_ltValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaShortTensor_ltValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaShortTensor_ltTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaShortTensor_ltTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaShortTensor_gt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
THCudaShortTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
short arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaShortTensor *arg8 = NULL;
THCudaShortTensor *arg9 = NULL;
THCudaShortTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaShortTensor *arg11 = NULL;
THCudaShortTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (short)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaShortTensor short | *CudaShortTensor* CudaShortTensor short | [*CudaByteTensor*] CudaShortTensor CudaShortTensor | *CudaShortTensor* CudaShortTensor CudaShortTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaShortTensor_gtValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaShortTensor_gtValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaShortTensor_gtTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaShortTensor_gtTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaShortTensor_le(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
THCudaShortTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
short arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaShortTensor *arg8 = NULL;
THCudaShortTensor *arg9 = NULL;
THCudaShortTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaShortTensor *arg11 = NULL;
THCudaShortTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (short)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaShortTensor short | *CudaShortTensor* CudaShortTensor short | [*CudaByteTensor*] CudaShortTensor CudaShortTensor | *CudaShortTensor* CudaShortTensor CudaShortTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaShortTensor_leValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaShortTensor_leValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaShortTensor_leTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaShortTensor_leTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaShortTensor_ge(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
THCudaShortTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
short arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaShortTensor *arg8 = NULL;
THCudaShortTensor *arg9 = NULL;
THCudaShortTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaShortTensor *arg11 = NULL;
THCudaShortTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (short)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaShortTensor short | *CudaShortTensor* CudaShortTensor short | [*CudaByteTensor*] CudaShortTensor CudaShortTensor | *CudaShortTensor* CudaShortTensor CudaShortTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaShortTensor_geValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaShortTensor_geValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaShortTensor_geTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaShortTensor_geTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaShortTensor_eq(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
THCudaShortTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
short arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaShortTensor *arg8 = NULL;
THCudaShortTensor *arg9 = NULL;
THCudaShortTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaShortTensor *arg11 = NULL;
THCudaShortTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (short)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaShortTensor short | *CudaShortTensor* CudaShortTensor short | [*CudaByteTensor*] CudaShortTensor CudaShortTensor | *CudaShortTensor* CudaShortTensor CudaShortTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaShortTensor_eqValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaShortTensor_eqValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaShortTensor_eqTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaShortTensor_eqTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaShortTensor_ne(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
THCudaShortTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
short arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaShortTensor *arg8 = NULL;
THCudaShortTensor *arg9 = NULL;
THCudaShortTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaShortTensor *arg11 = NULL;
THCudaShortTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (short)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaShortTensor short | *CudaShortTensor* CudaShortTensor short | [*CudaByteTensor*] CudaShortTensor CudaShortTensor | *CudaShortTensor* CudaShortTensor CudaShortTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaShortTensor_neValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaShortTensor_neValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaShortTensor_neTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaShortTensor_neTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaShortTensor_sum(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
long arg2 = 0;
THCudaShortTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaShortTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaShortTensor | [*CudaShortTensor*] CudaShortTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaShortTensor_sumall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaShortTensor");
THCudaShortTensor_sum(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaShortTensor_prod(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
long arg2 = 0;
THCudaShortTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaShortTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaShortTensor | [*CudaShortTensor*] CudaShortTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaShortTensor_prodall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaShortTensor");
THCudaShortTensor_prod(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaShortTensor_mean(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
long arg2 = 0;
THCudaShortTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaShortTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaShortTensor | [*CudaShortTensor*] CudaShortTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaShortTensor_meanall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaShortTensor");
THCudaShortTensor_mean(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaShortTensor_maskedFill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
short arg3 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor* CudaByteTensor short", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_maskedFill(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaShortTensor_maskedCopy(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaShortTensor *arg3 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor* CudaByteTensor CudaShortTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_maskedCopy(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaShortTensor_maskedSelect(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_maskedSelect(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaShortTensor_gather(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
THCudaShortTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaShortTensor *arg6 = NULL;
long arg7 = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaShortTensor *dummyIndexTensor = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
THCudaShortTensor_checkGPU(cutorch_getstate(L), 1, arg4);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg4);
		  THCudaShortTensor_resize(state, arg1, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg6 = (decltype(arg6))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 2;
arg7 = (long)lua_tonumber(L, 2)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaShortTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaShort(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
arg5 = THCudaShortTensor_new(cutorch_getstate(L));
THCudaShortTensor_checkGPU(cutorch_getstate(L), 1, arg8);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg8);
		  THCudaShortTensor_resize(state, arg5, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 4, "torch.CudaShortTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg7 = (long)lua_tonumber(L, 3)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaShortTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaShort(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor index CudaLongTensor | [*CudaShortTensor*] CudaShortTensor index CudaShortTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_gather(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaShortTensor");
THCudaShortTensor_gather(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int cutorch_CudaShortTensor_scatter(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
THCudaShortTensor *arg4 = NULL;
THCudaShortTensor *arg5 = NULL;
int arg5_idx = 0;
long arg6 = 0;
THCudaLongTensor *arg7 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaShortTensor *dummyIndexTensor = NULL;
THCudaShortTensor *arg8 = NULL;
THCudaShortTensor *arg9 = NULL;
int arg9_idx = 0;
long arg10 = 0;
THCudaLongTensor *arg11 = NULL;
short arg12 = 0;
THCudaShortTensor *arg13 = NULL;
int arg13_idx = 0;
long arg14 = 0;
THCudaLongTensor *arg15 = NULL;
short arg16 = 0;
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaShortTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = (long)lua_tonumber(L, 2)-1;
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 4, "torch.CudaShortTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg6 = (long)lua_tonumber(L, 2)-1;
arg7 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaShortTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg7, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaShort(default_arg1, arg7, dummyIndexTensor);
indexLongTensor = arg7;
}
else if(narg == 4
&& (arg9 = (decltype(arg9))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 3;
arg9_idx = 1;
arg10 = (long)lua_tonumber(L, 2)-1;
arg12 = (short)lua_tonumber(L, 4);
}
else if(narg == 4
&& (arg13 = (decltype(arg13))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 4;
arg13_idx = 1;
arg14 = (long)lua_tonumber(L, 2)-1;
arg15 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaShortTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg15, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaShort(default_arg1, arg15, dummyIndexTensor);
indexLongTensor = arg15;
arg16 = (short)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor* index CudaLongTensor CudaShortTensor | *CudaShortTensor* index CudaShortTensor CudaShortTensor | *CudaShortTensor* index CudaLongTensor short | *CudaShortTensor* index CudaShortTensor short", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_scatter(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg5_idx);
THCudaShortTensor_scatter(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
else if(argset == 3)
{
lua_pushvalue(L, arg9_idx);
THCudaShortTensor_scatterFill(default_arg1,arg9,arg10,arg11,arg12);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg13_idx);
THCudaShortTensor_scatterFill(default_arg1,arg13,arg14,arg15,arg16);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int cutorch_CudaShortTensor_sort(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaShortTensor *arg3 = NULL;
long arg4 = 0;
int arg5 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
arg2_idx = 1;
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
arg4 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isboolean(L, 2)
)
{
arg5 = lua_toboolean(L, 2);
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isboolean(L, 3)
)
{
arg1_idx = 1;
arg5 = lua_toboolean(L, 3);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isboolean(L, 3)
)
{
arg2_idx = 1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
arg4 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = lua_toboolean(L, 4);
arg4 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = lua_toboolean(L, 5);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] [*CudaLongTensor*] CudaShortTensor [index] [boolean]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
if(arg2_idx)
lua_pushvalue(L, arg2_idx);
else
luaT_pushudata(L, arg2, "torch.CudaLongTensor");
THCudaShortTensor_sort(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 2;
}

static int cutorch_CudaShortTensor_squeeze(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
THCudaShortTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaShortTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
argset = 1;
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor | [*CudaShortTensor*] CudaShortTensor index", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_squeeze(default_arg1,arg1,arg2);
if(arg1->nDimension == 1 && arg1->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaShortTensor_get1d(cutorch_getstate(L), arg1, 0)));
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaShortTensor");
{int hasdims = arg4->nDimension > 1;
THCudaShortTensor_squeeze1d(default_arg1,arg3,arg4,arg5);
if(!hasdims && arg3->nDimension == 1 && arg3->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaShortTensor_get1d(cutorch_getstate(L), arg3, 0)));}
return 1;
}
return 0;
}

static int cutorch_CudaShortTensor_abs(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_abs(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaShortTensor_sign(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_sign(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaShortTensor_cat(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
THCudaShortTensor *arg3 = NULL;
long arg4 = 0;
THCudaShortTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaShortTensor **arg6_data = NULL;
long arg6_size = 0;
int arg6_i = 0;
long arg7 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 1;
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
arg4 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg4 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 1
&& torch_isnonemptytable(L, 1)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaShortTensor**)THAlloc(arg6_size * sizeof(THCudaShortTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaShortTensor*)luaT_toudata(L, -1, "torch.CudaShortTensor")))
    luaL_error(L, "expected CudaShortTensor in tensor array");
  lua_pop(L, 1);
}

arg5 = THCudaShortTensor_new(cutorch_getstate(L));
arg7 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& torch_isnonemptytable(L, 2)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaShortTensor**)THAlloc(arg6_size * sizeof(THCudaShortTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaShortTensor*)luaT_toudata(L, -1, "torch.CudaShortTensor")))
    luaL_error(L, "expected CudaShortTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& torch_isnonemptytable(L, 1)
&& lua_isnumber(L, 2)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaShortTensor**)THAlloc(arg6_size * sizeof(THCudaShortTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaShortTensor*)luaT_toudata(L, -1, "torch.CudaShortTensor")))
    luaL_error(L, "expected CudaShortTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 2)-1;
arg5 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& torch_isnonemptytable(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaShortTensor**)THAlloc(arg6_size * sizeof(THCudaShortTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaShortTensor*)luaT_toudata(L, -1, "torch.CudaShortTensor")))
    luaL_error(L, "expected CudaShortTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor CudaShortTensor [index] | [*CudaShortTensor*] {CudaShortTensor+} [index]", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_cat(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaShortTensor");
THCudaShortTensor_catArray(default_arg1,arg5,arg6_data,arg6_size,arg7);
THFree(arg6_data);
return 1;
}
return 0;
}

static int cutorch_CudaShortTensor_dot(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaShortTensor CudaShortTensor", type_buf);
}
arg3 = THCudaShortTensor_dot(default_arg1,arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}

static int m_cutorch_CudaShortTensor_fill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
short arg2 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (short)lua_tonumber(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor* short", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_fill(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaShortTensor_zero(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor*", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_zero(default_arg1,arg1);
return 1;
}

static int m_cutorch_CudaShortTensor_zeros(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor* (LongStorage | dim1 [dim2...])", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_zeros(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int m_cutorch_CudaShortTensor_ones(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor* (LongStorage | dim1 [dim2...])", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_ones(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int m_cutorch_CudaShortTensor_reshape(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
THLongStorage *arg3 = NULL;
if(narg >= 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg3 = cutorch_checklongargs(L, 2);
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg >= 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& cutorch_islongargs(L, 3)
)
{
arg1_idx = 1;
arg3 = cutorch_checklongargs(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_reshape(default_arg1,arg1,arg2,arg3);
THLongStorage_free(arg3);
return 1;
}

static int m_cutorch_CudaShortTensor_numel(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
ptrdiff_t arg2 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaShortTensor", type_buf);
}
arg2 = THCudaShortTensor_numel(default_arg1,arg1);
lua_pushinteger(L, (lua_Integer)arg2);
return 1;
}

static int m_cutorch_CudaShortTensor_add(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
THCudaShortTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
short arg6 = 1;
THCudaShortTensor *arg7 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg5 = arg4;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaShortTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor* [CudaShortTensor] short | *CudaShortTensor* [CudaShortTensor] [short] CudaShortTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_add(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaShortTensor_cadd(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int m_cutorch_CudaShortTensor_csub(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
THCudaShortTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
short arg6 = 1;
THCudaShortTensor *arg7 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg5 = arg4;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaShortTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor* [CudaShortTensor] short | *CudaShortTensor* [CudaShortTensor] [short] CudaShortTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_sub(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaShortTensor_csub(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int m_cutorch_CudaShortTensor_mul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor* [CudaShortTensor] short", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_mul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaShortTensor_clamp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
short arg4 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 2);
arg4 = (short)lua_tonumber(L, 3);
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
arg4 = (short)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor* [CudaShortTensor] short short", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_clamp(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int m_cutorch_CudaShortTensor_cross(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
THCudaShortTensor *arg3 = NULL;
long arg4 = -1;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor CudaShortTensor [index]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_cross(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int m_cutorch_CudaShortTensor_div(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor* [CudaShortTensor] short", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_div(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaShortTensor_cmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
THCudaShortTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor* [CudaShortTensor] CudaShortTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_cmul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaShortTensor_cpow(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
THCudaShortTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor* [CudaShortTensor] CudaShortTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_cpow(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaShortTensor_cdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
THCudaShortTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor* [CudaShortTensor] CudaShortTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_cdiv(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaShortTensor_addcmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 1;
THCudaShortTensor *arg4 = NULL;
THCudaShortTensor *arg5 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor* [CudaShortTensor] [short] CudaShortTensor CudaShortTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_addcmul(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int m_cutorch_CudaShortTensor_addcdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 1;
THCudaShortTensor *arg4 = NULL;
THCudaShortTensor *arg5 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor* [CudaShortTensor] [short] CudaShortTensor CudaShortTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_addcdiv(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int m_cutorch_CudaShortTensor_min(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
short arg2 = 0;
THCudaShortTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaShortTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaShortTensor | [*CudaShortTensor*] [*CudaLongTensor*] CudaShortTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaShortTensor_minall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaShortTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaShortTensor_min(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int m_cutorch_CudaShortTensor_max(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
short arg2 = 0;
THCudaShortTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaShortTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaShortTensor | [*CudaShortTensor*] [*CudaLongTensor*] CudaShortTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaShortTensor_maxall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaShortTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaShortTensor_max(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int m_cutorch_CudaShortTensor_cmin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
THCudaShortTensor *arg3 = NULL;
THCudaShortTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
short arg6 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
argset = 1;
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 1;
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 1
&& lua_isnumber(L, 1)
)
{
argset = 2;
arg6 = (short)lua_tonumber(L, 1);
arg4 = THCudaShortTensor_new(cutorch_getstate(L));
arg5 = arg4;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (short)lua_tonumber(L, 2);
arg4 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] [CudaShortTensor] CudaShortTensor | [*CudaShortTensor*] [CudaShortTensor] short", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_cmin(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaShortTensor");
THCudaShortTensor_cminValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaShortTensor_cmax(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
THCudaShortTensor *arg3 = NULL;
THCudaShortTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
short arg6 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
argset = 1;
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 1;
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 1
&& lua_isnumber(L, 1)
)
{
argset = 2;
arg6 = (short)lua_tonumber(L, 1);
arg4 = THCudaShortTensor_new(cutorch_getstate(L));
arg5 = arg4;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (short)lua_tonumber(L, 2);
arg4 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] [CudaShortTensor] CudaShortTensor | [*CudaShortTensor*] [CudaShortTensor] short", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_cmax(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaShortTensor");
THCudaShortTensor_cmaxValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaShortTensor_lt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
THCudaShortTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
short arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaShortTensor *arg8 = NULL;
THCudaShortTensor *arg9 = NULL;
THCudaShortTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaShortTensor *arg11 = NULL;
THCudaShortTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (short)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaShortTensor short | *CudaShortTensor* CudaShortTensor short | [*CudaByteTensor*] CudaShortTensor CudaShortTensor | *CudaShortTensor* CudaShortTensor CudaShortTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaShortTensor_ltValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaShortTensor_ltValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaShortTensor_ltTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaShortTensor_ltTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaShortTensor_gt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
THCudaShortTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
short arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaShortTensor *arg8 = NULL;
THCudaShortTensor *arg9 = NULL;
THCudaShortTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaShortTensor *arg11 = NULL;
THCudaShortTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (short)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaShortTensor short | *CudaShortTensor* CudaShortTensor short | [*CudaByteTensor*] CudaShortTensor CudaShortTensor | *CudaShortTensor* CudaShortTensor CudaShortTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaShortTensor_gtValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaShortTensor_gtValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaShortTensor_gtTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaShortTensor_gtTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaShortTensor_le(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
THCudaShortTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
short arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaShortTensor *arg8 = NULL;
THCudaShortTensor *arg9 = NULL;
THCudaShortTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaShortTensor *arg11 = NULL;
THCudaShortTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (short)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaShortTensor short | *CudaShortTensor* CudaShortTensor short | [*CudaByteTensor*] CudaShortTensor CudaShortTensor | *CudaShortTensor* CudaShortTensor CudaShortTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaShortTensor_leValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaShortTensor_leValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaShortTensor_leTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaShortTensor_leTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaShortTensor_ge(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
THCudaShortTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
short arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaShortTensor *arg8 = NULL;
THCudaShortTensor *arg9 = NULL;
THCudaShortTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaShortTensor *arg11 = NULL;
THCudaShortTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (short)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaShortTensor short | *CudaShortTensor* CudaShortTensor short | [*CudaByteTensor*] CudaShortTensor CudaShortTensor | *CudaShortTensor* CudaShortTensor CudaShortTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaShortTensor_geValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaShortTensor_geValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaShortTensor_geTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaShortTensor_geTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaShortTensor_eq(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
THCudaShortTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
short arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaShortTensor *arg8 = NULL;
THCudaShortTensor *arg9 = NULL;
THCudaShortTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaShortTensor *arg11 = NULL;
THCudaShortTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (short)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaShortTensor short | *CudaShortTensor* CudaShortTensor short | [*CudaByteTensor*] CudaShortTensor CudaShortTensor | *CudaShortTensor* CudaShortTensor CudaShortTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaShortTensor_eqValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaShortTensor_eqValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaShortTensor_eqTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaShortTensor_eqTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaShortTensor_ne(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
THCudaShortTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaShortTensor *arg5 = NULL;
short arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaShortTensor *arg8 = NULL;
THCudaShortTensor *arg9 = NULL;
THCudaShortTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaShortTensor *arg11 = NULL;
THCudaShortTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (short)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (short)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaShortTensor short | *CudaShortTensor* CudaShortTensor short | [*CudaByteTensor*] CudaShortTensor CudaShortTensor | *CudaShortTensor* CudaShortTensor CudaShortTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaShortTensor_neValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaShortTensor_neValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaShortTensor_neTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaShortTensor_neTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaShortTensor_sum(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
long arg2 = 0;
THCudaShortTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaShortTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaShortTensor | [*CudaShortTensor*] CudaShortTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaShortTensor_sumall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaShortTensor");
THCudaShortTensor_sum(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaShortTensor_prod(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
long arg2 = 0;
THCudaShortTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaShortTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaShortTensor | [*CudaShortTensor*] CudaShortTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaShortTensor_prodall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaShortTensor");
THCudaShortTensor_prod(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaShortTensor_mean(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
long arg2 = 0;
THCudaShortTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaShortTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaShortTensor | [*CudaShortTensor*] CudaShortTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaShortTensor_meanall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaShortTensor");
THCudaShortTensor_mean(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaShortTensor_maskedFill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
short arg3 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (short)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor* CudaByteTensor short", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_maskedFill(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaShortTensor_maskedCopy(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaShortTensor *arg3 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor* CudaByteTensor CudaShortTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_maskedCopy(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaShortTensor_maskedSelect(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_maskedSelect(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaShortTensor_gather(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
THCudaShortTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaShortTensor *arg6 = NULL;
long arg7 = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaShortTensor *dummyIndexTensor = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
THCudaShortTensor_checkGPU(cutorch_getstate(L), 1, arg4);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg4);
		  THCudaShortTensor_resize(state, arg1, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg6 = (decltype(arg6))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 2;
arg7 = (long)lua_tonumber(L, 2)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaShortTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaShort(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
arg5 = THCudaShortTensor_new(cutorch_getstate(L));
THCudaShortTensor_checkGPU(cutorch_getstate(L), 1, arg8);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg8);
		  THCudaShortTensor_resize(state, arg5, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 4, "torch.CudaShortTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg7 = (long)lua_tonumber(L, 3)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaShortTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaShort(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor index CudaLongTensor | [*CudaShortTensor*] CudaShortTensor index CudaShortTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_gather(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaShortTensor");
THCudaShortTensor_gather(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int m_cutorch_CudaShortTensor_scatter(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
THCudaShortTensor *arg4 = NULL;
THCudaShortTensor *arg5 = NULL;
int arg5_idx = 0;
long arg6 = 0;
THCudaLongTensor *arg7 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaShortTensor *dummyIndexTensor = NULL;
THCudaShortTensor *arg8 = NULL;
THCudaShortTensor *arg9 = NULL;
int arg9_idx = 0;
long arg10 = 0;
THCudaLongTensor *arg11 = NULL;
short arg12 = 0;
THCudaShortTensor *arg13 = NULL;
int arg13_idx = 0;
long arg14 = 0;
THCudaLongTensor *arg15 = NULL;
short arg16 = 0;
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaShortTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = (long)lua_tonumber(L, 2)-1;
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 4, "torch.CudaShortTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg6 = (long)lua_tonumber(L, 2)-1;
arg7 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaShortTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg7, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaShort(default_arg1, arg7, dummyIndexTensor);
indexLongTensor = arg7;
}
else if(narg == 4
&& (arg9 = (decltype(arg9))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 3;
arg9_idx = 1;
arg10 = (long)lua_tonumber(L, 2)-1;
arg12 = (short)lua_tonumber(L, 4);
}
else if(narg == 4
&& (arg13 = (decltype(arg13))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 4;
arg13_idx = 1;
arg14 = (long)lua_tonumber(L, 2)-1;
arg15 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaShortTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg15, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaShort(default_arg1, arg15, dummyIndexTensor);
indexLongTensor = arg15;
arg16 = (short)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor* index CudaLongTensor CudaShortTensor | *CudaShortTensor* index CudaShortTensor CudaShortTensor | *CudaShortTensor* index CudaLongTensor short | *CudaShortTensor* index CudaShortTensor short", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_scatter(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg5_idx);
THCudaShortTensor_scatter(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
else if(argset == 3)
{
lua_pushvalue(L, arg9_idx);
THCudaShortTensor_scatterFill(default_arg1,arg9,arg10,arg11,arg12);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg13_idx);
THCudaShortTensor_scatterFill(default_arg1,arg13,arg14,arg15,arg16);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int m_cutorch_CudaShortTensor_sort(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaShortTensor *arg3 = NULL;
long arg4 = 0;
int arg5 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
arg2_idx = 1;
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
arg4 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isboolean(L, 2)
)
{
arg5 = lua_toboolean(L, 2);
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isboolean(L, 3)
)
{
arg1_idx = 1;
arg5 = lua_toboolean(L, 3);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isboolean(L, 3)
)
{
arg2_idx = 1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
arg4 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = lua_toboolean(L, 4);
arg4 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = lua_toboolean(L, 5);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] [*CudaLongTensor*] CudaShortTensor [index] [boolean]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
if(arg2_idx)
lua_pushvalue(L, arg2_idx);
else
luaT_pushudata(L, arg2, "torch.CudaLongTensor");
THCudaShortTensor_sort(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 2;
}

static int m_cutorch_CudaShortTensor_squeeze(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
THCudaShortTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaShortTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
argset = 1;
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor | [*CudaShortTensor*] CudaShortTensor index", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_squeeze(default_arg1,arg1,arg2);
if(arg1->nDimension == 1 && arg1->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaShortTensor_get1d(cutorch_getstate(L), arg1, 0)));
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaShortTensor");
{int hasdims = arg4->nDimension > 1;
THCudaShortTensor_squeeze1d(default_arg1,arg3,arg4,arg5);
if(!hasdims && arg3->nDimension == 1 && arg3->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaShortTensor_get1d(cutorch_getstate(L), arg3, 0)));}
return 1;
}
return 0;
}

static int m_cutorch_CudaShortTensor_abs(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor* [CudaShortTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_abs(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaShortTensor_sign(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaShortTensor* [CudaShortTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaShortTensor_sign(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaShortTensor_cat(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaShortTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaShortTensor *arg2 = NULL;
THCudaShortTensor *arg3 = NULL;
long arg4 = 0;
THCudaShortTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaShortTensor **arg6_data = NULL;
long arg6_size = 0;
int arg6_i = 0;
long arg7 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
argset = 1;
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
arg4 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg4 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaShortTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 1
&& torch_isnonemptytable(L, 1)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaShortTensor**)THAlloc(arg6_size * sizeof(THCudaShortTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaShortTensor*)luaT_toudata(L, -1, "torch.CudaShortTensor")))
    luaL_error(L, "expected CudaShortTensor in tensor array");
  lua_pop(L, 1);
}

arg5 = THCudaShortTensor_new(cutorch_getstate(L));
arg7 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& torch_isnonemptytable(L, 2)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaShortTensor**)THAlloc(arg6_size * sizeof(THCudaShortTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaShortTensor*)luaT_toudata(L, -1, "torch.CudaShortTensor")))
    luaL_error(L, "expected CudaShortTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = THCudaShortTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& torch_isnonemptytable(L, 1)
&& lua_isnumber(L, 2)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaShortTensor**)THAlloc(arg6_size * sizeof(THCudaShortTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaShortTensor*)luaT_toudata(L, -1, "torch.CudaShortTensor")))
    luaL_error(L, "expected CudaShortTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 2)-1;
arg5 = THCudaShortTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& torch_isnonemptytable(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaShortTensor**)THAlloc(arg6_size * sizeof(THCudaShortTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaShortTensor*)luaT_toudata(L, -1, "torch.CudaShortTensor")))
    luaL_error(L, "expected CudaShortTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaShortTensor*] CudaShortTensor CudaShortTensor [index] | [*CudaShortTensor*] {CudaShortTensor+} [index]", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaShortTensor");
THCudaShortTensor_cat(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaShortTensor");
THCudaShortTensor_catArray(default_arg1,arg5,arg6_data,arg6_size,arg7);
THFree(arg6_data);
return 1;
}
return 0;
}

static int m_cutorch_CudaShortTensor_dot(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaShortTensor *arg1 = NULL;
THCudaShortTensor *arg2 = NULL;
short arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaShortTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaShortTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaShortTensor CudaShortTensor", type_buf);
}
arg3 = THCudaShortTensor_dot(default_arg1,arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}

static const struct luaL_Reg m_cutorch_CudaShortTensorMath__ [] = {
{"fill", m_cutorch_CudaShortTensor_fill},
{"zero", m_cutorch_CudaShortTensor_zero},
{"zeros", m_cutorch_CudaShortTensor_zeros},
{"ones", m_cutorch_CudaShortTensor_ones},
{"reshape", m_cutorch_CudaShortTensor_reshape},
{"numel", m_cutorch_CudaShortTensor_numel},
{"add", m_cutorch_CudaShortTensor_add},
{"csub", m_cutorch_CudaShortTensor_csub},
{"mul", m_cutorch_CudaShortTensor_mul},
{"clamp", m_cutorch_CudaShortTensor_clamp},
{"cross", m_cutorch_CudaShortTensor_cross},
{"div", m_cutorch_CudaShortTensor_div},
{"cmul", m_cutorch_CudaShortTensor_cmul},
{"cpow", m_cutorch_CudaShortTensor_cpow},
{"cdiv", m_cutorch_CudaShortTensor_cdiv},
{"addcmul", m_cutorch_CudaShortTensor_addcmul},
{"addcdiv", m_cutorch_CudaShortTensor_addcdiv},
{"min", m_cutorch_CudaShortTensor_min},
{"max", m_cutorch_CudaShortTensor_max},
{"cmin", m_cutorch_CudaShortTensor_cmin},
{"cmax", m_cutorch_CudaShortTensor_cmax},
{"lt", m_cutorch_CudaShortTensor_lt},
{"gt", m_cutorch_CudaShortTensor_gt},
{"le", m_cutorch_CudaShortTensor_le},
{"ge", m_cutorch_CudaShortTensor_ge},
{"eq", m_cutorch_CudaShortTensor_eq},
{"ne", m_cutorch_CudaShortTensor_ne},
{"sum", m_cutorch_CudaShortTensor_sum},
{"prod", m_cutorch_CudaShortTensor_prod},
{"mean", m_cutorch_CudaShortTensor_mean},
{"maskedFill", m_cutorch_CudaShortTensor_maskedFill},
{"maskedCopy", m_cutorch_CudaShortTensor_maskedCopy},
{"maskedSelect", m_cutorch_CudaShortTensor_maskedSelect},
{"gather", m_cutorch_CudaShortTensor_gather},
{"scatter", m_cutorch_CudaShortTensor_scatter},
{"sort", m_cutorch_CudaShortTensor_sort},
{"squeeze", m_cutorch_CudaShortTensor_squeeze},
{"abs", m_cutorch_CudaShortTensor_abs},
{"sign", m_cutorch_CudaShortTensor_sign},
{"cat", m_cutorch_CudaShortTensor_cat},
{"dot", m_cutorch_CudaShortTensor_dot},
{NULL, NULL}
};

static const struct luaL_Reg cutorch_CudaShortTensorMath__ [] = {
{"fill", cutorch_CudaShortTensor_fill},
{"zero", cutorch_CudaShortTensor_zero},
{"zeros", cutorch_CudaShortTensor_zeros},
{"ones", cutorch_CudaShortTensor_ones},
{"reshape", cutorch_CudaShortTensor_reshape},
{"numel", cutorch_CudaShortTensor_numel},
{"add", cutorch_CudaShortTensor_add},
{"csub", cutorch_CudaShortTensor_csub},
{"mul", cutorch_CudaShortTensor_mul},
{"clamp", cutorch_CudaShortTensor_clamp},
{"cross", cutorch_CudaShortTensor_cross},
{"div", cutorch_CudaShortTensor_div},
{"cmul", cutorch_CudaShortTensor_cmul},
{"cpow", cutorch_CudaShortTensor_cpow},
{"cdiv", cutorch_CudaShortTensor_cdiv},
{"addcmul", cutorch_CudaShortTensor_addcmul},
{"addcdiv", cutorch_CudaShortTensor_addcdiv},
{"min", cutorch_CudaShortTensor_min},
{"max", cutorch_CudaShortTensor_max},
{"cmin", cutorch_CudaShortTensor_cmin},
{"cmax", cutorch_CudaShortTensor_cmax},
{"lt", cutorch_CudaShortTensor_lt},
{"gt", cutorch_CudaShortTensor_gt},
{"le", cutorch_CudaShortTensor_le},
{"ge", cutorch_CudaShortTensor_ge},
{"eq", cutorch_CudaShortTensor_eq},
{"ne", cutorch_CudaShortTensor_ne},
{"sum", cutorch_CudaShortTensor_sum},
{"prod", cutorch_CudaShortTensor_prod},
{"mean", cutorch_CudaShortTensor_mean},
{"maskedFill", cutorch_CudaShortTensor_maskedFill},
{"maskedCopy", cutorch_CudaShortTensor_maskedCopy},
{"maskedSelect", cutorch_CudaShortTensor_maskedSelect},
{"gather", cutorch_CudaShortTensor_gather},
{"scatter", cutorch_CudaShortTensor_scatter},
{"sort", cutorch_CudaShortTensor_sort},
{"squeeze", cutorch_CudaShortTensor_squeeze},
{"abs", cutorch_CudaShortTensor_abs},
{"sign", cutorch_CudaShortTensor_sign},
{"cat", cutorch_CudaShortTensor_cat},
{"dot", cutorch_CudaShortTensor_dot},
{NULL, NULL}
};

void cutorch_CudaShortTensorMath_init(lua_State *L)
{
  luaT_pushmetatable(L, "torch.CudaShortTensor");

  /* register methods */
  luaL_setfuncs(L, m_cutorch_CudaShortTensorMath__, 0);

  /* register functions into the "torch" field of the tensor metaclass */
  lua_pushstring(L, "torch");
  lua_newtable(L);
  luaL_setfuncs(L, cutorch_CudaShortTensorMath__, 0);
  lua_rawset(L, -3);
  lua_pop(L, 1);
}

static int cutorch_CudaIntTensor_fill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
int arg2 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (int)lua_tonumber(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor* int", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_fill(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaIntTensor_zero(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor*", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_zero(default_arg1,arg1);
return 1;
}

static int cutorch_CudaIntTensor_zeros(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 1
&& cutorch_islongargs(L, 1)
)
{
arg2 = cutorch_checklongargs(L, 1);
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_zeros(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int cutorch_CudaIntTensor_ones(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 1
&& cutorch_islongargs(L, 1)
)
{
arg2 = cutorch_checklongargs(L, 1);
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_ones(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int cutorch_CudaIntTensor_reshape(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
THLongStorage *arg3 = NULL;
if(narg >= 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg3 = cutorch_checklongargs(L, 2);
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg >= 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& cutorch_islongargs(L, 3)
)
{
arg1_idx = 1;
arg3 = cutorch_checklongargs(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_reshape(default_arg1,arg1,arg2,arg3);
THLongStorage_free(arg3);
return 1;
}

static int cutorch_CudaIntTensor_numel(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
ptrdiff_t arg2 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaIntTensor", type_buf);
}
arg2 = THCudaIntTensor_numel(default_arg1,arg1);
lua_pushinteger(L, (lua_Integer)arg2);
return 1;
}

static int cutorch_CudaIntTensor_add(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
THCudaIntTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
int arg6 = 1;
THCudaIntTensor *arg7 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 2;
arg4 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 2;
arg6 = (int)lua_tonumber(L, 2);
arg4 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaIntTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor int | [*CudaIntTensor*] CudaIntTensor [int] CudaIntTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_add(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaIntTensor");
THCudaIntTensor_cadd(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int cutorch_CudaIntTensor_csub(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
THCudaIntTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
int arg6 = 1;
THCudaIntTensor *arg7 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 2;
arg4 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 2;
arg6 = (int)lua_tonumber(L, 2);
arg4 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaIntTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor int | [*CudaIntTensor*] CudaIntTensor [int] CudaIntTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_sub(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaIntTensor");
THCudaIntTensor_csub(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int cutorch_CudaIntTensor_mul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor int", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_mul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaIntTensor_clamp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
int arg4 = 0;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg3 = (int)lua_tonumber(L, 2);
arg4 = (int)lua_tonumber(L, 3);
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
arg4 = (int)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor int int", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_clamp(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaIntTensor_cross(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
THCudaIntTensor *arg3 = NULL;
long arg4 = -1;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor CudaIntTensor [index]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_cross(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaIntTensor_div(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor int", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_div(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaIntTensor_cmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
THCudaIntTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor CudaIntTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_cmul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaIntTensor_cpow(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
THCudaIntTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor CudaIntTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_cpow(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaIntTensor_cdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
THCudaIntTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor CudaIntTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_cdiv(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaIntTensor_addcmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 1;
THCudaIntTensor *arg4 = NULL;
THCudaIntTensor *arg5 = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaIntTensor"))
)
{
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor [int] CudaIntTensor CudaIntTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_addcmul(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int cutorch_CudaIntTensor_addcdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 1;
THCudaIntTensor *arg4 = NULL;
THCudaIntTensor *arg5 = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaIntTensor"))
)
{
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor [int] CudaIntTensor CudaIntTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_addcdiv(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int cutorch_CudaIntTensor_min(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
int arg2 = 0;
THCudaIntTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaIntTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaIntTensor | [*CudaIntTensor*] [*CudaLongTensor*] CudaIntTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaIntTensor_minall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaIntTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaIntTensor_min(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int cutorch_CudaIntTensor_max(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
int arg2 = 0;
THCudaIntTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaIntTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaIntTensor | [*CudaIntTensor*] [*CudaLongTensor*] CudaIntTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaIntTensor_maxall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaIntTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaIntTensor_max(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int cutorch_CudaIntTensor_cmin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
THCudaIntTensor *arg3 = NULL;
THCudaIntTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
int arg6 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 1;
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (int)lua_tonumber(L, 2);
arg4 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor CudaIntTensor | [*CudaIntTensor*] CudaIntTensor int", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_cmin(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaIntTensor");
THCudaIntTensor_cminValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaIntTensor_cmax(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
THCudaIntTensor *arg3 = NULL;
THCudaIntTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
int arg6 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 1;
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (int)lua_tonumber(L, 2);
arg4 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor CudaIntTensor | [*CudaIntTensor*] CudaIntTensor int", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_cmax(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaIntTensor");
THCudaIntTensor_cmaxValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaIntTensor_lt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
THCudaIntTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
int arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaIntTensor *arg8 = NULL;
THCudaIntTensor *arg9 = NULL;
THCudaIntTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaIntTensor *arg11 = NULL;
THCudaIntTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaIntTensor int | *CudaIntTensor* CudaIntTensor int | [*CudaByteTensor*] CudaIntTensor CudaIntTensor | *CudaIntTensor* CudaIntTensor CudaIntTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaIntTensor_ltValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaIntTensor_ltValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaIntTensor_ltTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaIntTensor_ltTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaIntTensor_gt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
THCudaIntTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
int arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaIntTensor *arg8 = NULL;
THCudaIntTensor *arg9 = NULL;
THCudaIntTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaIntTensor *arg11 = NULL;
THCudaIntTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaIntTensor int | *CudaIntTensor* CudaIntTensor int | [*CudaByteTensor*] CudaIntTensor CudaIntTensor | *CudaIntTensor* CudaIntTensor CudaIntTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaIntTensor_gtValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaIntTensor_gtValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaIntTensor_gtTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaIntTensor_gtTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaIntTensor_le(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
THCudaIntTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
int arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaIntTensor *arg8 = NULL;
THCudaIntTensor *arg9 = NULL;
THCudaIntTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaIntTensor *arg11 = NULL;
THCudaIntTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaIntTensor int | *CudaIntTensor* CudaIntTensor int | [*CudaByteTensor*] CudaIntTensor CudaIntTensor | *CudaIntTensor* CudaIntTensor CudaIntTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaIntTensor_leValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaIntTensor_leValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaIntTensor_leTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaIntTensor_leTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaIntTensor_ge(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
THCudaIntTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
int arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaIntTensor *arg8 = NULL;
THCudaIntTensor *arg9 = NULL;
THCudaIntTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaIntTensor *arg11 = NULL;
THCudaIntTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaIntTensor int | *CudaIntTensor* CudaIntTensor int | [*CudaByteTensor*] CudaIntTensor CudaIntTensor | *CudaIntTensor* CudaIntTensor CudaIntTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaIntTensor_geValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaIntTensor_geValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaIntTensor_geTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaIntTensor_geTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaIntTensor_eq(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
THCudaIntTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
int arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaIntTensor *arg8 = NULL;
THCudaIntTensor *arg9 = NULL;
THCudaIntTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaIntTensor *arg11 = NULL;
THCudaIntTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaIntTensor int | *CudaIntTensor* CudaIntTensor int | [*CudaByteTensor*] CudaIntTensor CudaIntTensor | *CudaIntTensor* CudaIntTensor CudaIntTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaIntTensor_eqValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaIntTensor_eqValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaIntTensor_eqTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaIntTensor_eqTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaIntTensor_ne(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
THCudaIntTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
int arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaIntTensor *arg8 = NULL;
THCudaIntTensor *arg9 = NULL;
THCudaIntTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaIntTensor *arg11 = NULL;
THCudaIntTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaIntTensor int | *CudaIntTensor* CudaIntTensor int | [*CudaByteTensor*] CudaIntTensor CudaIntTensor | *CudaIntTensor* CudaIntTensor CudaIntTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaIntTensor_neValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaIntTensor_neValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaIntTensor_neTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaIntTensor_neTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaIntTensor_sum(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
long arg2 = 0;
THCudaIntTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaIntTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaIntTensor | [*CudaIntTensor*] CudaIntTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaIntTensor_sumall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaIntTensor");
THCudaIntTensor_sum(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaIntTensor_prod(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
long arg2 = 0;
THCudaIntTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaIntTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaIntTensor | [*CudaIntTensor*] CudaIntTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaIntTensor_prodall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaIntTensor");
THCudaIntTensor_prod(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaIntTensor_mean(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
long arg2 = 0;
THCudaIntTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaIntTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaIntTensor | [*CudaIntTensor*] CudaIntTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaIntTensor_meanall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaIntTensor");
THCudaIntTensor_mean(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaIntTensor_maskedFill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
int arg3 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor* CudaByteTensor int", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_maskedFill(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaIntTensor_maskedCopy(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaIntTensor *arg3 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor* CudaByteTensor CudaIntTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_maskedCopy(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaIntTensor_maskedSelect(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_maskedSelect(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaIntTensor_gather(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
THCudaIntTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaIntTensor *arg6 = NULL;
long arg7 = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaIntTensor *dummyIndexTensor = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
THCudaIntTensor_checkGPU(cutorch_getstate(L), 1, arg4);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg4);
		  THCudaIntTensor_resize(state, arg1, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg6 = (decltype(arg6))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 2;
arg7 = (long)lua_tonumber(L, 2)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaIntTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaInt(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
arg5 = THCudaIntTensor_new(cutorch_getstate(L));
THCudaIntTensor_checkGPU(cutorch_getstate(L), 1, arg8);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg8);
		  THCudaIntTensor_resize(state, arg5, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 4, "torch.CudaIntTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg7 = (long)lua_tonumber(L, 3)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaIntTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaInt(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor index CudaLongTensor | [*CudaIntTensor*] CudaIntTensor index CudaIntTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_gather(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaIntTensor");
THCudaIntTensor_gather(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int cutorch_CudaIntTensor_scatter(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
THCudaIntTensor *arg4 = NULL;
THCudaIntTensor *arg5 = NULL;
int arg5_idx = 0;
long arg6 = 0;
THCudaLongTensor *arg7 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaIntTensor *dummyIndexTensor = NULL;
THCudaIntTensor *arg8 = NULL;
THCudaIntTensor *arg9 = NULL;
int arg9_idx = 0;
long arg10 = 0;
THCudaLongTensor *arg11 = NULL;
int arg12 = 0;
THCudaIntTensor *arg13 = NULL;
int arg13_idx = 0;
long arg14 = 0;
THCudaLongTensor *arg15 = NULL;
int arg16 = 0;
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaIntTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = (long)lua_tonumber(L, 2)-1;
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 4, "torch.CudaIntTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg6 = (long)lua_tonumber(L, 2)-1;
arg7 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaIntTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg7, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaInt(default_arg1, arg7, dummyIndexTensor);
indexLongTensor = arg7;
}
else if(narg == 4
&& (arg9 = (decltype(arg9))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 3;
arg9_idx = 1;
arg10 = (long)lua_tonumber(L, 2)-1;
arg12 = (int)lua_tonumber(L, 4);
}
else if(narg == 4
&& (arg13 = (decltype(arg13))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 4;
arg13_idx = 1;
arg14 = (long)lua_tonumber(L, 2)-1;
arg15 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaIntTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg15, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaInt(default_arg1, arg15, dummyIndexTensor);
indexLongTensor = arg15;
arg16 = (int)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor* index CudaLongTensor CudaIntTensor | *CudaIntTensor* index CudaIntTensor CudaIntTensor | *CudaIntTensor* index CudaLongTensor int | *CudaIntTensor* index CudaIntTensor int", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_scatter(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg5_idx);
THCudaIntTensor_scatter(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
else if(argset == 3)
{
lua_pushvalue(L, arg9_idx);
THCudaIntTensor_scatterFill(default_arg1,arg9,arg10,arg11,arg12);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg13_idx);
THCudaIntTensor_scatterFill(default_arg1,arg13,arg14,arg15,arg16);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int cutorch_CudaIntTensor_sort(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaIntTensor *arg3 = NULL;
long arg4 = 0;
int arg5 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
arg2_idx = 1;
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
arg4 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isboolean(L, 2)
)
{
arg5 = lua_toboolean(L, 2);
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isboolean(L, 3)
)
{
arg1_idx = 1;
arg5 = lua_toboolean(L, 3);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isboolean(L, 3)
)
{
arg2_idx = 1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
arg4 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = lua_toboolean(L, 4);
arg4 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = lua_toboolean(L, 5);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] [*CudaLongTensor*] CudaIntTensor [index] [boolean]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
if(arg2_idx)
lua_pushvalue(L, arg2_idx);
else
luaT_pushudata(L, arg2, "torch.CudaLongTensor");
THCudaIntTensor_sort(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 2;
}

static int cutorch_CudaIntTensor_squeeze(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
THCudaIntTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaIntTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
argset = 1;
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor | [*CudaIntTensor*] CudaIntTensor index", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_squeeze(default_arg1,arg1,arg2);
if(arg1->nDimension == 1 && arg1->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaIntTensor_get1d(cutorch_getstate(L), arg1, 0)));
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaIntTensor");
{int hasdims = arg4->nDimension > 1;
THCudaIntTensor_squeeze1d(default_arg1,arg3,arg4,arg5);
if(!hasdims && arg3->nDimension == 1 && arg3->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaIntTensor_get1d(cutorch_getstate(L), arg3, 0)));}
return 1;
}
return 0;
}

static int cutorch_CudaIntTensor_abs(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_abs(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaIntTensor_sign(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_sign(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaIntTensor_cat(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
THCudaIntTensor *arg3 = NULL;
long arg4 = 0;
THCudaIntTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaIntTensor **arg6_data = NULL;
long arg6_size = 0;
int arg6_i = 0;
long arg7 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 1;
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
arg4 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg4 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 1
&& torch_isnonemptytable(L, 1)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaIntTensor**)THAlloc(arg6_size * sizeof(THCudaIntTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaIntTensor*)luaT_toudata(L, -1, "torch.CudaIntTensor")))
    luaL_error(L, "expected CudaIntTensor in tensor array");
  lua_pop(L, 1);
}

arg5 = THCudaIntTensor_new(cutorch_getstate(L));
arg7 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& torch_isnonemptytable(L, 2)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaIntTensor**)THAlloc(arg6_size * sizeof(THCudaIntTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaIntTensor*)luaT_toudata(L, -1, "torch.CudaIntTensor")))
    luaL_error(L, "expected CudaIntTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& torch_isnonemptytable(L, 1)
&& lua_isnumber(L, 2)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaIntTensor**)THAlloc(arg6_size * sizeof(THCudaIntTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaIntTensor*)luaT_toudata(L, -1, "torch.CudaIntTensor")))
    luaL_error(L, "expected CudaIntTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 2)-1;
arg5 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& torch_isnonemptytable(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaIntTensor**)THAlloc(arg6_size * sizeof(THCudaIntTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaIntTensor*)luaT_toudata(L, -1, "torch.CudaIntTensor")))
    luaL_error(L, "expected CudaIntTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor CudaIntTensor [index] | [*CudaIntTensor*] {CudaIntTensor+} [index]", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_cat(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaIntTensor");
THCudaIntTensor_catArray(default_arg1,arg5,arg6_data,arg6_size,arg7);
THFree(arg6_data);
return 1;
}
return 0;
}

static int cutorch_CudaIntTensor_dot(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaIntTensor CudaIntTensor", type_buf);
}
arg3 = THCudaIntTensor_dot(default_arg1,arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}

static int m_cutorch_CudaIntTensor_fill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
int arg2 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (int)lua_tonumber(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor* int", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_fill(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaIntTensor_zero(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor*", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_zero(default_arg1,arg1);
return 1;
}

static int m_cutorch_CudaIntTensor_zeros(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor* (LongStorage | dim1 [dim2...])", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_zeros(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int m_cutorch_CudaIntTensor_ones(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor* (LongStorage | dim1 [dim2...])", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_ones(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int m_cutorch_CudaIntTensor_reshape(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
THLongStorage *arg3 = NULL;
if(narg >= 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg3 = cutorch_checklongargs(L, 2);
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg >= 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& cutorch_islongargs(L, 3)
)
{
arg1_idx = 1;
arg3 = cutorch_checklongargs(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_reshape(default_arg1,arg1,arg2,arg3);
THLongStorage_free(arg3);
return 1;
}

static int m_cutorch_CudaIntTensor_numel(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
ptrdiff_t arg2 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaIntTensor", type_buf);
}
arg2 = THCudaIntTensor_numel(default_arg1,arg1);
lua_pushinteger(L, (lua_Integer)arg2);
return 1;
}

static int m_cutorch_CudaIntTensor_add(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
THCudaIntTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
int arg6 = 1;
THCudaIntTensor *arg7 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg5 = arg4;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaIntTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor* [CudaIntTensor] int | *CudaIntTensor* [CudaIntTensor] [int] CudaIntTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_add(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaIntTensor_cadd(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int m_cutorch_CudaIntTensor_csub(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
THCudaIntTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
int arg6 = 1;
THCudaIntTensor *arg7 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg5 = arg4;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaIntTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor* [CudaIntTensor] int | *CudaIntTensor* [CudaIntTensor] [int] CudaIntTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_sub(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaIntTensor_csub(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int m_cutorch_CudaIntTensor_mul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor* [CudaIntTensor] int", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_mul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaIntTensor_clamp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
int arg4 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 2);
arg4 = (int)lua_tonumber(L, 3);
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
arg4 = (int)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor* [CudaIntTensor] int int", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_clamp(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int m_cutorch_CudaIntTensor_cross(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
THCudaIntTensor *arg3 = NULL;
long arg4 = -1;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor CudaIntTensor [index]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_cross(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int m_cutorch_CudaIntTensor_div(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor* [CudaIntTensor] int", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_div(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaIntTensor_cmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
THCudaIntTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor* [CudaIntTensor] CudaIntTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_cmul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaIntTensor_cpow(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
THCudaIntTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor* [CudaIntTensor] CudaIntTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_cpow(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaIntTensor_cdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
THCudaIntTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor* [CudaIntTensor] CudaIntTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_cdiv(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaIntTensor_addcmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 1;
THCudaIntTensor *arg4 = NULL;
THCudaIntTensor *arg5 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor* [CudaIntTensor] [int] CudaIntTensor CudaIntTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_addcmul(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int m_cutorch_CudaIntTensor_addcdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 1;
THCudaIntTensor *arg4 = NULL;
THCudaIntTensor *arg5 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor* [CudaIntTensor] [int] CudaIntTensor CudaIntTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_addcdiv(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int m_cutorch_CudaIntTensor_min(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
int arg2 = 0;
THCudaIntTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaIntTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaIntTensor | [*CudaIntTensor*] [*CudaLongTensor*] CudaIntTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaIntTensor_minall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaIntTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaIntTensor_min(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int m_cutorch_CudaIntTensor_max(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
int arg2 = 0;
THCudaIntTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaIntTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaIntTensor | [*CudaIntTensor*] [*CudaLongTensor*] CudaIntTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaIntTensor_maxall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaIntTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaIntTensor_max(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int m_cutorch_CudaIntTensor_cmin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
THCudaIntTensor *arg3 = NULL;
THCudaIntTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
int arg6 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
argset = 1;
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 1;
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 1
&& lua_isnumber(L, 1)
)
{
argset = 2;
arg6 = (int)lua_tonumber(L, 1);
arg4 = THCudaIntTensor_new(cutorch_getstate(L));
arg5 = arg4;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (int)lua_tonumber(L, 2);
arg4 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] [CudaIntTensor] CudaIntTensor | [*CudaIntTensor*] [CudaIntTensor] int", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_cmin(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaIntTensor");
THCudaIntTensor_cminValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaIntTensor_cmax(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
THCudaIntTensor *arg3 = NULL;
THCudaIntTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
int arg6 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
argset = 1;
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 1;
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 1
&& lua_isnumber(L, 1)
)
{
argset = 2;
arg6 = (int)lua_tonumber(L, 1);
arg4 = THCudaIntTensor_new(cutorch_getstate(L));
arg5 = arg4;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (int)lua_tonumber(L, 2);
arg4 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] [CudaIntTensor] CudaIntTensor | [*CudaIntTensor*] [CudaIntTensor] int", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_cmax(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaIntTensor");
THCudaIntTensor_cmaxValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaIntTensor_lt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
THCudaIntTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
int arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaIntTensor *arg8 = NULL;
THCudaIntTensor *arg9 = NULL;
THCudaIntTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaIntTensor *arg11 = NULL;
THCudaIntTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaIntTensor int | *CudaIntTensor* CudaIntTensor int | [*CudaByteTensor*] CudaIntTensor CudaIntTensor | *CudaIntTensor* CudaIntTensor CudaIntTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaIntTensor_ltValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaIntTensor_ltValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaIntTensor_ltTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaIntTensor_ltTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaIntTensor_gt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
THCudaIntTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
int arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaIntTensor *arg8 = NULL;
THCudaIntTensor *arg9 = NULL;
THCudaIntTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaIntTensor *arg11 = NULL;
THCudaIntTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaIntTensor int | *CudaIntTensor* CudaIntTensor int | [*CudaByteTensor*] CudaIntTensor CudaIntTensor | *CudaIntTensor* CudaIntTensor CudaIntTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaIntTensor_gtValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaIntTensor_gtValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaIntTensor_gtTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaIntTensor_gtTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaIntTensor_le(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
THCudaIntTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
int arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaIntTensor *arg8 = NULL;
THCudaIntTensor *arg9 = NULL;
THCudaIntTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaIntTensor *arg11 = NULL;
THCudaIntTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaIntTensor int | *CudaIntTensor* CudaIntTensor int | [*CudaByteTensor*] CudaIntTensor CudaIntTensor | *CudaIntTensor* CudaIntTensor CudaIntTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaIntTensor_leValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaIntTensor_leValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaIntTensor_leTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaIntTensor_leTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaIntTensor_ge(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
THCudaIntTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
int arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaIntTensor *arg8 = NULL;
THCudaIntTensor *arg9 = NULL;
THCudaIntTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaIntTensor *arg11 = NULL;
THCudaIntTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaIntTensor int | *CudaIntTensor* CudaIntTensor int | [*CudaByteTensor*] CudaIntTensor CudaIntTensor | *CudaIntTensor* CudaIntTensor CudaIntTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaIntTensor_geValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaIntTensor_geValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaIntTensor_geTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaIntTensor_geTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaIntTensor_eq(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
THCudaIntTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
int arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaIntTensor *arg8 = NULL;
THCudaIntTensor *arg9 = NULL;
THCudaIntTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaIntTensor *arg11 = NULL;
THCudaIntTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaIntTensor int | *CudaIntTensor* CudaIntTensor int | [*CudaByteTensor*] CudaIntTensor CudaIntTensor | *CudaIntTensor* CudaIntTensor CudaIntTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaIntTensor_eqValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaIntTensor_eqValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaIntTensor_eqTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaIntTensor_eqTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaIntTensor_ne(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
THCudaIntTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaIntTensor *arg5 = NULL;
int arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaIntTensor *arg8 = NULL;
THCudaIntTensor *arg9 = NULL;
THCudaIntTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaIntTensor *arg11 = NULL;
THCudaIntTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (int)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaIntTensor int | *CudaIntTensor* CudaIntTensor int | [*CudaByteTensor*] CudaIntTensor CudaIntTensor | *CudaIntTensor* CudaIntTensor CudaIntTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaIntTensor_neValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaIntTensor_neValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaIntTensor_neTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaIntTensor_neTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaIntTensor_sum(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
long arg2 = 0;
THCudaIntTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaIntTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaIntTensor | [*CudaIntTensor*] CudaIntTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaIntTensor_sumall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaIntTensor");
THCudaIntTensor_sum(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaIntTensor_prod(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
long arg2 = 0;
THCudaIntTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaIntTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaIntTensor | [*CudaIntTensor*] CudaIntTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaIntTensor_prodall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaIntTensor");
THCudaIntTensor_prod(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaIntTensor_mean(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
long arg2 = 0;
THCudaIntTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaIntTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaIntTensor | [*CudaIntTensor*] CudaIntTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaIntTensor_meanall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaIntTensor");
THCudaIntTensor_mean(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaIntTensor_maskedFill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
int arg3 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor* CudaByteTensor int", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_maskedFill(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaIntTensor_maskedCopy(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaIntTensor *arg3 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor* CudaByteTensor CudaIntTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_maskedCopy(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaIntTensor_maskedSelect(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_maskedSelect(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaIntTensor_gather(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
THCudaIntTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaIntTensor *arg6 = NULL;
long arg7 = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaIntTensor *dummyIndexTensor = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
THCudaIntTensor_checkGPU(cutorch_getstate(L), 1, arg4);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg4);
		  THCudaIntTensor_resize(state, arg1, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg6 = (decltype(arg6))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 2;
arg7 = (long)lua_tonumber(L, 2)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaIntTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaInt(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
arg5 = THCudaIntTensor_new(cutorch_getstate(L));
THCudaIntTensor_checkGPU(cutorch_getstate(L), 1, arg8);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg8);
		  THCudaIntTensor_resize(state, arg5, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 4, "torch.CudaIntTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg7 = (long)lua_tonumber(L, 3)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaIntTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaInt(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor index CudaLongTensor | [*CudaIntTensor*] CudaIntTensor index CudaIntTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_gather(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaIntTensor");
THCudaIntTensor_gather(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int m_cutorch_CudaIntTensor_scatter(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
THCudaIntTensor *arg4 = NULL;
THCudaIntTensor *arg5 = NULL;
int arg5_idx = 0;
long arg6 = 0;
THCudaLongTensor *arg7 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaIntTensor *dummyIndexTensor = NULL;
THCudaIntTensor *arg8 = NULL;
THCudaIntTensor *arg9 = NULL;
int arg9_idx = 0;
long arg10 = 0;
THCudaLongTensor *arg11 = NULL;
int arg12 = 0;
THCudaIntTensor *arg13 = NULL;
int arg13_idx = 0;
long arg14 = 0;
THCudaLongTensor *arg15 = NULL;
int arg16 = 0;
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaIntTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = (long)lua_tonumber(L, 2)-1;
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 4, "torch.CudaIntTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg6 = (long)lua_tonumber(L, 2)-1;
arg7 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaIntTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg7, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaInt(default_arg1, arg7, dummyIndexTensor);
indexLongTensor = arg7;
}
else if(narg == 4
&& (arg9 = (decltype(arg9))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 3;
arg9_idx = 1;
arg10 = (long)lua_tonumber(L, 2)-1;
arg12 = (int)lua_tonumber(L, 4);
}
else if(narg == 4
&& (arg13 = (decltype(arg13))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 4;
arg13_idx = 1;
arg14 = (long)lua_tonumber(L, 2)-1;
arg15 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaIntTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg15, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaInt(default_arg1, arg15, dummyIndexTensor);
indexLongTensor = arg15;
arg16 = (int)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor* index CudaLongTensor CudaIntTensor | *CudaIntTensor* index CudaIntTensor CudaIntTensor | *CudaIntTensor* index CudaLongTensor int | *CudaIntTensor* index CudaIntTensor int", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_scatter(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg5_idx);
THCudaIntTensor_scatter(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
else if(argset == 3)
{
lua_pushvalue(L, arg9_idx);
THCudaIntTensor_scatterFill(default_arg1,arg9,arg10,arg11,arg12);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg13_idx);
THCudaIntTensor_scatterFill(default_arg1,arg13,arg14,arg15,arg16);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int m_cutorch_CudaIntTensor_sort(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaIntTensor *arg3 = NULL;
long arg4 = 0;
int arg5 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
arg2_idx = 1;
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
arg4 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isboolean(L, 2)
)
{
arg5 = lua_toboolean(L, 2);
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isboolean(L, 3)
)
{
arg1_idx = 1;
arg5 = lua_toboolean(L, 3);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isboolean(L, 3)
)
{
arg2_idx = 1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
arg4 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = lua_toboolean(L, 4);
arg4 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = lua_toboolean(L, 5);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] [*CudaLongTensor*] CudaIntTensor [index] [boolean]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
if(arg2_idx)
lua_pushvalue(L, arg2_idx);
else
luaT_pushudata(L, arg2, "torch.CudaLongTensor");
THCudaIntTensor_sort(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 2;
}

static int m_cutorch_CudaIntTensor_squeeze(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
THCudaIntTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaIntTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
argset = 1;
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor | [*CudaIntTensor*] CudaIntTensor index", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_squeeze(default_arg1,arg1,arg2);
if(arg1->nDimension == 1 && arg1->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaIntTensor_get1d(cutorch_getstate(L), arg1, 0)));
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaIntTensor");
{int hasdims = arg4->nDimension > 1;
THCudaIntTensor_squeeze1d(default_arg1,arg3,arg4,arg5);
if(!hasdims && arg3->nDimension == 1 && arg3->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaIntTensor_get1d(cutorch_getstate(L), arg3, 0)));}
return 1;
}
return 0;
}

static int m_cutorch_CudaIntTensor_abs(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor* [CudaIntTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_abs(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaIntTensor_sign(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaIntTensor* [CudaIntTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaIntTensor_sign(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaIntTensor_cat(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaIntTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaIntTensor *arg2 = NULL;
THCudaIntTensor *arg3 = NULL;
long arg4 = 0;
THCudaIntTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaIntTensor **arg6_data = NULL;
long arg6_size = 0;
int arg6_i = 0;
long arg7 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
argset = 1;
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
arg4 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg4 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaIntTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 1
&& torch_isnonemptytable(L, 1)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaIntTensor**)THAlloc(arg6_size * sizeof(THCudaIntTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaIntTensor*)luaT_toudata(L, -1, "torch.CudaIntTensor")))
    luaL_error(L, "expected CudaIntTensor in tensor array");
  lua_pop(L, 1);
}

arg5 = THCudaIntTensor_new(cutorch_getstate(L));
arg7 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& torch_isnonemptytable(L, 2)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaIntTensor**)THAlloc(arg6_size * sizeof(THCudaIntTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaIntTensor*)luaT_toudata(L, -1, "torch.CudaIntTensor")))
    luaL_error(L, "expected CudaIntTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = THCudaIntTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& torch_isnonemptytable(L, 1)
&& lua_isnumber(L, 2)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaIntTensor**)THAlloc(arg6_size * sizeof(THCudaIntTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaIntTensor*)luaT_toudata(L, -1, "torch.CudaIntTensor")))
    luaL_error(L, "expected CudaIntTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 2)-1;
arg5 = THCudaIntTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& torch_isnonemptytable(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaIntTensor**)THAlloc(arg6_size * sizeof(THCudaIntTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaIntTensor*)luaT_toudata(L, -1, "torch.CudaIntTensor")))
    luaL_error(L, "expected CudaIntTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaIntTensor*] CudaIntTensor CudaIntTensor [index] | [*CudaIntTensor*] {CudaIntTensor+} [index]", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaIntTensor");
THCudaIntTensor_cat(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaIntTensor");
THCudaIntTensor_catArray(default_arg1,arg5,arg6_data,arg6_size,arg7);
THFree(arg6_data);
return 1;
}
return 0;
}

static int m_cutorch_CudaIntTensor_dot(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaIntTensor *arg1 = NULL;
THCudaIntTensor *arg2 = NULL;
int arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaIntTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaIntTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaIntTensor CudaIntTensor", type_buf);
}
arg3 = THCudaIntTensor_dot(default_arg1,arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}

static const struct luaL_Reg m_cutorch_CudaIntTensorMath__ [] = {
{"fill", m_cutorch_CudaIntTensor_fill},
{"zero", m_cutorch_CudaIntTensor_zero},
{"zeros", m_cutorch_CudaIntTensor_zeros},
{"ones", m_cutorch_CudaIntTensor_ones},
{"reshape", m_cutorch_CudaIntTensor_reshape},
{"numel", m_cutorch_CudaIntTensor_numel},
{"add", m_cutorch_CudaIntTensor_add},
{"csub", m_cutorch_CudaIntTensor_csub},
{"mul", m_cutorch_CudaIntTensor_mul},
{"clamp", m_cutorch_CudaIntTensor_clamp},
{"cross", m_cutorch_CudaIntTensor_cross},
{"div", m_cutorch_CudaIntTensor_div},
{"cmul", m_cutorch_CudaIntTensor_cmul},
{"cpow", m_cutorch_CudaIntTensor_cpow},
{"cdiv", m_cutorch_CudaIntTensor_cdiv},
{"addcmul", m_cutorch_CudaIntTensor_addcmul},
{"addcdiv", m_cutorch_CudaIntTensor_addcdiv},
{"min", m_cutorch_CudaIntTensor_min},
{"max", m_cutorch_CudaIntTensor_max},
{"cmin", m_cutorch_CudaIntTensor_cmin},
{"cmax", m_cutorch_CudaIntTensor_cmax},
{"lt", m_cutorch_CudaIntTensor_lt},
{"gt", m_cutorch_CudaIntTensor_gt},
{"le", m_cutorch_CudaIntTensor_le},
{"ge", m_cutorch_CudaIntTensor_ge},
{"eq", m_cutorch_CudaIntTensor_eq},
{"ne", m_cutorch_CudaIntTensor_ne},
{"sum", m_cutorch_CudaIntTensor_sum},
{"prod", m_cutorch_CudaIntTensor_prod},
{"mean", m_cutorch_CudaIntTensor_mean},
{"maskedFill", m_cutorch_CudaIntTensor_maskedFill},
{"maskedCopy", m_cutorch_CudaIntTensor_maskedCopy},
{"maskedSelect", m_cutorch_CudaIntTensor_maskedSelect},
{"gather", m_cutorch_CudaIntTensor_gather},
{"scatter", m_cutorch_CudaIntTensor_scatter},
{"sort", m_cutorch_CudaIntTensor_sort},
{"squeeze", m_cutorch_CudaIntTensor_squeeze},
{"abs", m_cutorch_CudaIntTensor_abs},
{"sign", m_cutorch_CudaIntTensor_sign},
{"cat", m_cutorch_CudaIntTensor_cat},
{"dot", m_cutorch_CudaIntTensor_dot},
{NULL, NULL}
};

static const struct luaL_Reg cutorch_CudaIntTensorMath__ [] = {
{"fill", cutorch_CudaIntTensor_fill},
{"zero", cutorch_CudaIntTensor_zero},
{"zeros", cutorch_CudaIntTensor_zeros},
{"ones", cutorch_CudaIntTensor_ones},
{"reshape", cutorch_CudaIntTensor_reshape},
{"numel", cutorch_CudaIntTensor_numel},
{"add", cutorch_CudaIntTensor_add},
{"csub", cutorch_CudaIntTensor_csub},
{"mul", cutorch_CudaIntTensor_mul},
{"clamp", cutorch_CudaIntTensor_clamp},
{"cross", cutorch_CudaIntTensor_cross},
{"div", cutorch_CudaIntTensor_div},
{"cmul", cutorch_CudaIntTensor_cmul},
{"cpow", cutorch_CudaIntTensor_cpow},
{"cdiv", cutorch_CudaIntTensor_cdiv},
{"addcmul", cutorch_CudaIntTensor_addcmul},
{"addcdiv", cutorch_CudaIntTensor_addcdiv},
{"min", cutorch_CudaIntTensor_min},
{"max", cutorch_CudaIntTensor_max},
{"cmin", cutorch_CudaIntTensor_cmin},
{"cmax", cutorch_CudaIntTensor_cmax},
{"lt", cutorch_CudaIntTensor_lt},
{"gt", cutorch_CudaIntTensor_gt},
{"le", cutorch_CudaIntTensor_le},
{"ge", cutorch_CudaIntTensor_ge},
{"eq", cutorch_CudaIntTensor_eq},
{"ne", cutorch_CudaIntTensor_ne},
{"sum", cutorch_CudaIntTensor_sum},
{"prod", cutorch_CudaIntTensor_prod},
{"mean", cutorch_CudaIntTensor_mean},
{"maskedFill", cutorch_CudaIntTensor_maskedFill},
{"maskedCopy", cutorch_CudaIntTensor_maskedCopy},
{"maskedSelect", cutorch_CudaIntTensor_maskedSelect},
{"gather", cutorch_CudaIntTensor_gather},
{"scatter", cutorch_CudaIntTensor_scatter},
{"sort", cutorch_CudaIntTensor_sort},
{"squeeze", cutorch_CudaIntTensor_squeeze},
{"abs", cutorch_CudaIntTensor_abs},
{"sign", cutorch_CudaIntTensor_sign},
{"cat", cutorch_CudaIntTensor_cat},
{"dot", cutorch_CudaIntTensor_dot},
{NULL, NULL}
};

void cutorch_CudaIntTensorMath_init(lua_State *L)
{
  luaT_pushmetatable(L, "torch.CudaIntTensor");

  /* register methods */
  luaL_setfuncs(L, m_cutorch_CudaIntTensorMath__, 0);

  /* register functions into the "torch" field of the tensor metaclass */
  lua_pushstring(L, "torch");
  lua_newtable(L);
  luaL_setfuncs(L, cutorch_CudaIntTensorMath__, 0);
  lua_rawset(L, -3);
  lua_pop(L, 1);
}

static int cutorch_CudaLongTensor_fill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
long arg2 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (long)lua_tonumber(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor* long", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_fill(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaLongTensor_zero(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor*", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_zero(default_arg1,arg1);
return 1;
}

static int cutorch_CudaLongTensor_zeros(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 1
&& cutorch_islongargs(L, 1)
)
{
arg2 = cutorch_checklongargs(L, 1);
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_zeros(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int cutorch_CudaLongTensor_ones(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 1
&& cutorch_islongargs(L, 1)
)
{
arg2 = cutorch_checklongargs(L, 1);
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_ones(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int cutorch_CudaLongTensor_reshape(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
THLongStorage *arg3 = NULL;
if(narg >= 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg3 = cutorch_checklongargs(L, 2);
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg >= 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& cutorch_islongargs(L, 3)
)
{
arg1_idx = 1;
arg3 = cutorch_checklongargs(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_reshape(default_arg1,arg1,arg2,arg3);
THLongStorage_free(arg3);
return 1;
}

static int cutorch_CudaLongTensor_numel(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
ptrdiff_t arg2 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaLongTensor", type_buf);
}
arg2 = THCudaLongTensor_numel(default_arg1,arg1);
lua_pushinteger(L, (lua_Integer)arg2);
return 1;
}

static int cutorch_CudaLongTensor_add(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 1;
THCudaLongTensor *arg7 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2);
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 2;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2);
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor long | [*CudaLongTensor*] CudaLongTensor [long] CudaLongTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_add(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaLongTensor_cadd(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int cutorch_CudaLongTensor_csub(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 1;
THCudaLongTensor *arg7 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2);
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 2;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2);
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor long | [*CudaLongTensor*] CudaLongTensor [long] CudaLongTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_sub(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaLongTensor_csub(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int cutorch_CudaLongTensor_mul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (long)lua_tonumber(L, 2);
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor long", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_mul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaLongTensor_clamp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
long arg4 = 0;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg3 = (long)lua_tonumber(L, 2);
arg4 = (long)lua_tonumber(L, 3);
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
arg4 = (long)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor long long", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_clamp(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaLongTensor_cross(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
THCudaLongTensor *arg3 = NULL;
long arg4 = -1;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor CudaLongTensor [index]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_cross(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaLongTensor_div(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (long)lua_tonumber(L, 2);
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor long", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_div(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaLongTensor_cmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
THCudaLongTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor CudaLongTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_cmul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaLongTensor_cpow(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
THCudaLongTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor CudaLongTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_cpow(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaLongTensor_cdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
THCudaLongTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor CudaLongTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_cdiv(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaLongTensor_addcmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 1;
THCudaLongTensor *arg4 = NULL;
THCudaLongTensor *arg5 = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
arg3 = (long)lua_tonumber(L, 2);
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor [long] CudaLongTensor CudaLongTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_addcmul(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int cutorch_CudaLongTensor_addcdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 1;
THCudaLongTensor *arg4 = NULL;
THCudaLongTensor *arg5 = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
arg3 = (long)lua_tonumber(L, 2);
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor [long] CudaLongTensor CudaLongTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_addcdiv(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int cutorch_CudaLongTensor_min(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaLongTensor | [*CudaLongTensor*] [*CudaLongTensor*] CudaLongTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaLongTensor_minall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaLongTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaLongTensor_min(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int cutorch_CudaLongTensor_max(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaLongTensor | [*CudaLongTensor*] [*CudaLongTensor*] CudaLongTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaLongTensor_maxall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaLongTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaLongTensor_max(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int cutorch_CudaLongTensor_cmin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
THCudaLongTensor *arg3 = NULL;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2);
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor CudaLongTensor | [*CudaLongTensor*] CudaLongTensor long", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_cmin(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaLongTensor_cminValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaLongTensor_cmax(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
THCudaLongTensor *arg3 = NULL;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2);
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor CudaLongTensor | [*CudaLongTensor*] CudaLongTensor long", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_cmax(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaLongTensor_cmaxValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaLongTensor_lt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *arg9 = NULL;
THCudaLongTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaLongTensor *arg11 = NULL;
THCudaLongTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaLongTensor long | *CudaLongTensor* CudaLongTensor long | [*CudaByteTensor*] CudaLongTensor CudaLongTensor | *CudaLongTensor* CudaLongTensor CudaLongTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaLongTensor_ltValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaLongTensor_ltValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaLongTensor_ltTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaLongTensor_ltTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaLongTensor_gt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *arg9 = NULL;
THCudaLongTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaLongTensor *arg11 = NULL;
THCudaLongTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaLongTensor long | *CudaLongTensor* CudaLongTensor long | [*CudaByteTensor*] CudaLongTensor CudaLongTensor | *CudaLongTensor* CudaLongTensor CudaLongTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaLongTensor_gtValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaLongTensor_gtValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaLongTensor_gtTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaLongTensor_gtTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaLongTensor_le(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *arg9 = NULL;
THCudaLongTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaLongTensor *arg11 = NULL;
THCudaLongTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaLongTensor long | *CudaLongTensor* CudaLongTensor long | [*CudaByteTensor*] CudaLongTensor CudaLongTensor | *CudaLongTensor* CudaLongTensor CudaLongTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaLongTensor_leValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaLongTensor_leValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaLongTensor_leTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaLongTensor_leTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaLongTensor_ge(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *arg9 = NULL;
THCudaLongTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaLongTensor *arg11 = NULL;
THCudaLongTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaLongTensor long | *CudaLongTensor* CudaLongTensor long | [*CudaByteTensor*] CudaLongTensor CudaLongTensor | *CudaLongTensor* CudaLongTensor CudaLongTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaLongTensor_geValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaLongTensor_geValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaLongTensor_geTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaLongTensor_geTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaLongTensor_eq(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *arg9 = NULL;
THCudaLongTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaLongTensor *arg11 = NULL;
THCudaLongTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaLongTensor long | *CudaLongTensor* CudaLongTensor long | [*CudaByteTensor*] CudaLongTensor CudaLongTensor | *CudaLongTensor* CudaLongTensor CudaLongTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaLongTensor_eqValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaLongTensor_eqValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaLongTensor_eqTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaLongTensor_eqTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaLongTensor_ne(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *arg9 = NULL;
THCudaLongTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaLongTensor *arg11 = NULL;
THCudaLongTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaLongTensor long | *CudaLongTensor* CudaLongTensor long | [*CudaByteTensor*] CudaLongTensor CudaLongTensor | *CudaLongTensor* CudaLongTensor CudaLongTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaLongTensor_neValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaLongTensor_neValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaLongTensor_neTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaLongTensor_neTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaLongTensor_sum(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaLongTensor | [*CudaLongTensor*] CudaLongTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaLongTensor_sumall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaLongTensor");
THCudaLongTensor_sum(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaLongTensor_prod(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaLongTensor | [*CudaLongTensor*] CudaLongTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaLongTensor_prodall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaLongTensor");
THCudaLongTensor_prod(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaLongTensor_mean(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaLongTensor | [*CudaLongTensor*] CudaLongTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaLongTensor_meanall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaLongTensor");
THCudaLongTensor_mean(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaLongTensor_maskedFill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
long arg3 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor* CudaByteTensor long", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_maskedFill(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaLongTensor_maskedCopy(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaLongTensor *arg3 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor* CudaByteTensor CudaLongTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_maskedCopy(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaLongTensor_maskedSelect(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_maskedSelect(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaLongTensor_gather(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
THCudaLongTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaLongTensor *arg6 = NULL;
long arg7 = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaLongTensor *dummyIndexTensor = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
THCudaLongTensor_checkGPU(cutorch_getstate(L), 1, arg4);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg4);
		  THCudaLongTensor_resize(state, arg1, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg6 = (decltype(arg6))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 2;
arg7 = (long)lua_tonumber(L, 2)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaLongTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaLong(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
arg5 = THCudaLongTensor_new(cutorch_getstate(L));
THCudaLongTensor_checkGPU(cutorch_getstate(L), 1, arg8);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg8);
		  THCudaLongTensor_resize(state, arg5, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg7 = (long)lua_tonumber(L, 3)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaLongTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaLong(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor index CudaLongTensor | [*CudaLongTensor*] CudaLongTensor index CudaLongTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_gather(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaLongTensor");
THCudaLongTensor_gather(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int cutorch_CudaLongTensor_scatter(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
THCudaLongTensor *arg4 = NULL;
THCudaLongTensor *arg5 = NULL;
int arg5_idx = 0;
long arg6 = 0;
THCudaLongTensor *arg7 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaLongTensor *dummyIndexTensor = NULL;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *arg9 = NULL;
int arg9_idx = 0;
long arg10 = 0;
THCudaLongTensor *arg11 = NULL;
long arg12 = 0;
THCudaLongTensor *arg13 = NULL;
int arg13_idx = 0;
long arg14 = 0;
THCudaLongTensor *arg15 = NULL;
long arg16 = 0;
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = (long)lua_tonumber(L, 2)-1;
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg6 = (long)lua_tonumber(L, 2)-1;
arg7 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaLongTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg7, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaLong(default_arg1, arg7, dummyIndexTensor);
indexLongTensor = arg7;
}
else if(narg == 4
&& (arg9 = (decltype(arg9))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 3;
arg9_idx = 1;
arg10 = (long)lua_tonumber(L, 2)-1;
arg12 = (long)lua_tonumber(L, 4);
}
else if(narg == 4
&& (arg13 = (decltype(arg13))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 4;
arg13_idx = 1;
arg14 = (long)lua_tonumber(L, 2)-1;
arg15 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaLongTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg15, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaLong(default_arg1, arg15, dummyIndexTensor);
indexLongTensor = arg15;
arg16 = (long)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor* index CudaLongTensor CudaLongTensor | *CudaLongTensor* index CudaLongTensor CudaLongTensor | *CudaLongTensor* index CudaLongTensor long | *CudaLongTensor* index CudaLongTensor long", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_scatter(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg5_idx);
THCudaLongTensor_scatter(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
else if(argset == 3)
{
lua_pushvalue(L, arg9_idx);
THCudaLongTensor_scatterFill(default_arg1,arg9,arg10,arg11,arg12);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg13_idx);
THCudaLongTensor_scatterFill(default_arg1,arg13,arg14,arg15,arg16);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int cutorch_CudaLongTensor_sort(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaLongTensor *arg3 = NULL;
long arg4 = 0;
int arg5 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
arg2_idx = 1;
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isboolean(L, 2)
)
{
arg5 = lua_toboolean(L, 2);
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isboolean(L, 3)
)
{
arg1_idx = 1;
arg5 = lua_toboolean(L, 3);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isboolean(L, 3)
)
{
arg2_idx = 1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = lua_toboolean(L, 4);
arg4 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = lua_toboolean(L, 5);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] [*CudaLongTensor*] CudaLongTensor [index] [boolean]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
if(arg2_idx)
lua_pushvalue(L, arg2_idx);
else
luaT_pushudata(L, arg2, "torch.CudaLongTensor");
THCudaLongTensor_sort(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 2;
}

static int cutorch_CudaLongTensor_squeeze(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
THCudaLongTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor | [*CudaLongTensor*] CudaLongTensor index", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_squeeze(default_arg1,arg1,arg2);
if(arg1->nDimension == 1 && arg1->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaLongTensor_get1d(cutorch_getstate(L), arg1, 0)));
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaLongTensor");
{int hasdims = arg4->nDimension > 1;
THCudaLongTensor_squeeze1d(default_arg1,arg3,arg4,arg5);
if(!hasdims && arg3->nDimension == 1 && arg3->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaLongTensor_get1d(cutorch_getstate(L), arg3, 0)));}
return 1;
}
return 0;
}

static int cutorch_CudaLongTensor_abs(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_abs(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaLongTensor_sign(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_sign(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaLongTensor_cat(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
THCudaLongTensor *arg3 = NULL;
long arg4 = 0;
THCudaLongTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaLongTensor **arg6_data = NULL;
long arg6_size = 0;
int arg6_i = 0;
long arg7 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg4 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 1
&& torch_isnonemptytable(L, 1)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaLongTensor**)THAlloc(arg6_size * sizeof(THCudaLongTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaLongTensor*)luaT_toudata(L, -1, "torch.CudaLongTensor")))
    luaL_error(L, "expected CudaLongTensor in tensor array");
  lua_pop(L, 1);
}

arg5 = THCudaLongTensor_new(cutorch_getstate(L));
arg7 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& torch_isnonemptytable(L, 2)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaLongTensor**)THAlloc(arg6_size * sizeof(THCudaLongTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaLongTensor*)luaT_toudata(L, -1, "torch.CudaLongTensor")))
    luaL_error(L, "expected CudaLongTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& torch_isnonemptytable(L, 1)
&& lua_isnumber(L, 2)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaLongTensor**)THAlloc(arg6_size * sizeof(THCudaLongTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaLongTensor*)luaT_toudata(L, -1, "torch.CudaLongTensor")))
    luaL_error(L, "expected CudaLongTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 2)-1;
arg5 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& torch_isnonemptytable(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaLongTensor**)THAlloc(arg6_size * sizeof(THCudaLongTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaLongTensor*)luaT_toudata(L, -1, "torch.CudaLongTensor")))
    luaL_error(L, "expected CudaLongTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor CudaLongTensor [index] | [*CudaLongTensor*] {CudaLongTensor+} [index]", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_cat(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaLongTensor");
THCudaLongTensor_catArray(default_arg1,arg5,arg6_data,arg6_size,arg7);
THFree(arg6_data);
return 1;
}
return 0;
}

static int cutorch_CudaLongTensor_dot(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaLongTensor CudaLongTensor", type_buf);
}
arg3 = THCudaLongTensor_dot(default_arg1,arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}

static int m_cutorch_CudaLongTensor_fill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
long arg2 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (long)lua_tonumber(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor* long", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_fill(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaLongTensor_zero(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor*", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_zero(default_arg1,arg1);
return 1;
}

static int m_cutorch_CudaLongTensor_zeros(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor* (LongStorage | dim1 [dim2...])", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_zeros(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int m_cutorch_CudaLongTensor_ones(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor* (LongStorage | dim1 [dim2...])", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_ones(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int m_cutorch_CudaLongTensor_reshape(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
THLongStorage *arg3 = NULL;
if(narg >= 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg3 = cutorch_checklongargs(L, 2);
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg >= 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& cutorch_islongargs(L, 3)
)
{
arg1_idx = 1;
arg3 = cutorch_checklongargs(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_reshape(default_arg1,arg1,arg2,arg3);
THLongStorage_free(arg3);
return 1;
}

static int m_cutorch_CudaLongTensor_numel(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
ptrdiff_t arg2 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaLongTensor", type_buf);
}
arg2 = THCudaLongTensor_numel(default_arg1,arg1);
lua_pushinteger(L, (lua_Integer)arg2);
return 1;
}

static int m_cutorch_CudaLongTensor_add(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 1;
THCudaLongTensor *arg7 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg5 = arg4;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor* [CudaLongTensor] long | *CudaLongTensor* [CudaLongTensor] [long] CudaLongTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_add(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaLongTensor_cadd(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int m_cutorch_CudaLongTensor_csub(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 1;
THCudaLongTensor *arg7 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg5 = arg4;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor* [CudaLongTensor] long | *CudaLongTensor* [CudaLongTensor] [long] CudaLongTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_sub(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaLongTensor_csub(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int m_cutorch_CudaLongTensor_mul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor* [CudaLongTensor] long", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_mul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaLongTensor_clamp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
long arg4 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 2);
arg4 = (long)lua_tonumber(L, 3);
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
arg4 = (long)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor* [CudaLongTensor] long long", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_clamp(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int m_cutorch_CudaLongTensor_cross(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
THCudaLongTensor *arg3 = NULL;
long arg4 = -1;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor CudaLongTensor [index]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_cross(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int m_cutorch_CudaLongTensor_div(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor* [CudaLongTensor] long", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_div(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaLongTensor_cmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
THCudaLongTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor* [CudaLongTensor] CudaLongTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_cmul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaLongTensor_cpow(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
THCudaLongTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor* [CudaLongTensor] CudaLongTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_cpow(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaLongTensor_cdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
THCudaLongTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor* [CudaLongTensor] CudaLongTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_cdiv(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaLongTensor_addcmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 1;
THCudaLongTensor *arg4 = NULL;
THCudaLongTensor *arg5 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor* [CudaLongTensor] [long] CudaLongTensor CudaLongTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_addcmul(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int m_cutorch_CudaLongTensor_addcdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 1;
THCudaLongTensor *arg4 = NULL;
THCudaLongTensor *arg5 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor* [CudaLongTensor] [long] CudaLongTensor CudaLongTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_addcdiv(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int m_cutorch_CudaLongTensor_min(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaLongTensor | [*CudaLongTensor*] [*CudaLongTensor*] CudaLongTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaLongTensor_minall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaLongTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaLongTensor_min(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int m_cutorch_CudaLongTensor_max(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaLongTensor | [*CudaLongTensor*] [*CudaLongTensor*] CudaLongTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaLongTensor_maxall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaLongTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaLongTensor_max(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int m_cutorch_CudaLongTensor_cmin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
THCudaLongTensor *arg3 = NULL;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 1
&& lua_isnumber(L, 1)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 1);
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = arg4;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2);
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] [CudaLongTensor] CudaLongTensor | [*CudaLongTensor*] [CudaLongTensor] long", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_cmin(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaLongTensor_cminValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaLongTensor_cmax(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
THCudaLongTensor *arg3 = NULL;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 1
&& lua_isnumber(L, 1)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 1);
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = arg4;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2);
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] [CudaLongTensor] CudaLongTensor | [*CudaLongTensor*] [CudaLongTensor] long", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_cmax(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaLongTensor_cmaxValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaLongTensor_lt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *arg9 = NULL;
THCudaLongTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaLongTensor *arg11 = NULL;
THCudaLongTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaLongTensor long | *CudaLongTensor* CudaLongTensor long | [*CudaByteTensor*] CudaLongTensor CudaLongTensor | *CudaLongTensor* CudaLongTensor CudaLongTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaLongTensor_ltValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaLongTensor_ltValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaLongTensor_ltTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaLongTensor_ltTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaLongTensor_gt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *arg9 = NULL;
THCudaLongTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaLongTensor *arg11 = NULL;
THCudaLongTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaLongTensor long | *CudaLongTensor* CudaLongTensor long | [*CudaByteTensor*] CudaLongTensor CudaLongTensor | *CudaLongTensor* CudaLongTensor CudaLongTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaLongTensor_gtValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaLongTensor_gtValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaLongTensor_gtTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaLongTensor_gtTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaLongTensor_le(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *arg9 = NULL;
THCudaLongTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaLongTensor *arg11 = NULL;
THCudaLongTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaLongTensor long | *CudaLongTensor* CudaLongTensor long | [*CudaByteTensor*] CudaLongTensor CudaLongTensor | *CudaLongTensor* CudaLongTensor CudaLongTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaLongTensor_leValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaLongTensor_leValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaLongTensor_leTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaLongTensor_leTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaLongTensor_ge(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *arg9 = NULL;
THCudaLongTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaLongTensor *arg11 = NULL;
THCudaLongTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaLongTensor long | *CudaLongTensor* CudaLongTensor long | [*CudaByteTensor*] CudaLongTensor CudaLongTensor | *CudaLongTensor* CudaLongTensor CudaLongTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaLongTensor_geValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaLongTensor_geValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaLongTensor_geTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaLongTensor_geTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaLongTensor_eq(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *arg9 = NULL;
THCudaLongTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaLongTensor *arg11 = NULL;
THCudaLongTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaLongTensor long | *CudaLongTensor* CudaLongTensor long | [*CudaByteTensor*] CudaLongTensor CudaLongTensor | *CudaLongTensor* CudaLongTensor CudaLongTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaLongTensor_eqValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaLongTensor_eqValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaLongTensor_eqTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaLongTensor_eqTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaLongTensor_ne(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaLongTensor *arg5 = NULL;
long arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *arg9 = NULL;
THCudaLongTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaLongTensor *arg11 = NULL;
THCudaLongTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaLongTensor long | *CudaLongTensor* CudaLongTensor long | [*CudaByteTensor*] CudaLongTensor CudaLongTensor | *CudaLongTensor* CudaLongTensor CudaLongTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaLongTensor_neValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaLongTensor_neValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaLongTensor_neTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaLongTensor_neTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaLongTensor_sum(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaLongTensor | [*CudaLongTensor*] CudaLongTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaLongTensor_sumall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaLongTensor");
THCudaLongTensor_sum(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaLongTensor_prod(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaLongTensor | [*CudaLongTensor*] CudaLongTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaLongTensor_prodall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaLongTensor");
THCudaLongTensor_prod(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaLongTensor_mean(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaLongTensor | [*CudaLongTensor*] CudaLongTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaLongTensor_meanall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaLongTensor");
THCudaLongTensor_mean(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaLongTensor_maskedFill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
long arg3 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor* CudaByteTensor long", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_maskedFill(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaLongTensor_maskedCopy(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaLongTensor *arg3 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor* CudaByteTensor CudaLongTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_maskedCopy(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaLongTensor_maskedSelect(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_maskedSelect(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaLongTensor_gather(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
THCudaLongTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaLongTensor *arg6 = NULL;
long arg7 = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaLongTensor *dummyIndexTensor = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
THCudaLongTensor_checkGPU(cutorch_getstate(L), 1, arg4);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg4);
		  THCudaLongTensor_resize(state, arg1, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg6 = (decltype(arg6))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 2;
arg7 = (long)lua_tonumber(L, 2)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaLongTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaLong(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
arg5 = THCudaLongTensor_new(cutorch_getstate(L));
THCudaLongTensor_checkGPU(cutorch_getstate(L), 1, arg8);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg8);
		  THCudaLongTensor_resize(state, arg5, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg7 = (long)lua_tonumber(L, 3)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaLongTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaLong(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor index CudaLongTensor | [*CudaLongTensor*] CudaLongTensor index CudaLongTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_gather(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaLongTensor");
THCudaLongTensor_gather(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int m_cutorch_CudaLongTensor_scatter(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
THCudaLongTensor *arg4 = NULL;
THCudaLongTensor *arg5 = NULL;
int arg5_idx = 0;
long arg6 = 0;
THCudaLongTensor *arg7 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaLongTensor *dummyIndexTensor = NULL;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *arg9 = NULL;
int arg9_idx = 0;
long arg10 = 0;
THCudaLongTensor *arg11 = NULL;
long arg12 = 0;
THCudaLongTensor *arg13 = NULL;
int arg13_idx = 0;
long arg14 = 0;
THCudaLongTensor *arg15 = NULL;
long arg16 = 0;
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = (long)lua_tonumber(L, 2)-1;
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg6 = (long)lua_tonumber(L, 2)-1;
arg7 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaLongTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg7, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaLong(default_arg1, arg7, dummyIndexTensor);
indexLongTensor = arg7;
}
else if(narg == 4
&& (arg9 = (decltype(arg9))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 3;
arg9_idx = 1;
arg10 = (long)lua_tonumber(L, 2)-1;
arg12 = (long)lua_tonumber(L, 4);
}
else if(narg == 4
&& (arg13 = (decltype(arg13))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 4;
arg13_idx = 1;
arg14 = (long)lua_tonumber(L, 2)-1;
arg15 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaLongTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg15, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaLong(default_arg1, arg15, dummyIndexTensor);
indexLongTensor = arg15;
arg16 = (long)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor* index CudaLongTensor CudaLongTensor | *CudaLongTensor* index CudaLongTensor CudaLongTensor | *CudaLongTensor* index CudaLongTensor long | *CudaLongTensor* index CudaLongTensor long", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_scatter(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg5_idx);
THCudaLongTensor_scatter(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
else if(argset == 3)
{
lua_pushvalue(L, arg9_idx);
THCudaLongTensor_scatterFill(default_arg1,arg9,arg10,arg11,arg12);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg13_idx);
THCudaLongTensor_scatterFill(default_arg1,arg13,arg14,arg15,arg16);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int m_cutorch_CudaLongTensor_sort(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaLongTensor *arg3 = NULL;
long arg4 = 0;
int arg5 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
arg2_idx = 1;
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isboolean(L, 2)
)
{
arg5 = lua_toboolean(L, 2);
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isboolean(L, 3)
)
{
arg1_idx = 1;
arg5 = lua_toboolean(L, 3);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isboolean(L, 3)
)
{
arg2_idx = 1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = lua_toboolean(L, 4);
arg4 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = lua_toboolean(L, 5);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] [*CudaLongTensor*] CudaLongTensor [index] [boolean]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
if(arg2_idx)
lua_pushvalue(L, arg2_idx);
else
luaT_pushudata(L, arg2, "torch.CudaLongTensor");
THCudaLongTensor_sort(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 2;
}

static int m_cutorch_CudaLongTensor_squeeze(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
THCudaLongTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor | [*CudaLongTensor*] CudaLongTensor index", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_squeeze(default_arg1,arg1,arg2);
if(arg1->nDimension == 1 && arg1->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaLongTensor_get1d(cutorch_getstate(L), arg1, 0)));
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaLongTensor");
{int hasdims = arg4->nDimension > 1;
THCudaLongTensor_squeeze1d(default_arg1,arg3,arg4,arg5);
if(!hasdims && arg3->nDimension == 1 && arg3->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaLongTensor_get1d(cutorch_getstate(L), arg3, 0)));}
return 1;
}
return 0;
}

static int m_cutorch_CudaLongTensor_abs(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor* [CudaLongTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_abs(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaLongTensor_sign(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaLongTensor* [CudaLongTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaLongTensor_sign(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaLongTensor_cat(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaLongTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
THCudaLongTensor *arg3 = NULL;
long arg4 = 0;
THCudaLongTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaLongTensor **arg6_data = NULL;
long arg6_size = 0;
int arg6_i = 0;
long arg7 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg4 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 1
&& torch_isnonemptytable(L, 1)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaLongTensor**)THAlloc(arg6_size * sizeof(THCudaLongTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaLongTensor*)luaT_toudata(L, -1, "torch.CudaLongTensor")))
    luaL_error(L, "expected CudaLongTensor in tensor array");
  lua_pop(L, 1);
}

arg5 = THCudaLongTensor_new(cutorch_getstate(L));
arg7 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& torch_isnonemptytable(L, 2)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaLongTensor**)THAlloc(arg6_size * sizeof(THCudaLongTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaLongTensor*)luaT_toudata(L, -1, "torch.CudaLongTensor")))
    luaL_error(L, "expected CudaLongTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = THCudaLongTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& torch_isnonemptytable(L, 1)
&& lua_isnumber(L, 2)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaLongTensor**)THAlloc(arg6_size * sizeof(THCudaLongTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaLongTensor*)luaT_toudata(L, -1, "torch.CudaLongTensor")))
    luaL_error(L, "expected CudaLongTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 2)-1;
arg5 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& torch_isnonemptytable(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaLongTensor**)THAlloc(arg6_size * sizeof(THCudaLongTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaLongTensor*)luaT_toudata(L, -1, "torch.CudaLongTensor")))
    luaL_error(L, "expected CudaLongTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaLongTensor*] CudaLongTensor CudaLongTensor [index] | [*CudaLongTensor*] {CudaLongTensor+} [index]", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaLongTensor");
THCudaLongTensor_cat(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaLongTensor");
THCudaLongTensor_catArray(default_arg1,arg5,arg6_data,arg6_size,arg7);
THFree(arg6_data);
return 1;
}
return 0;
}

static int m_cutorch_CudaLongTensor_dot(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaLongTensor *arg1 = NULL;
THCudaLongTensor *arg2 = NULL;
long arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaLongTensor CudaLongTensor", type_buf);
}
arg3 = THCudaLongTensor_dot(default_arg1,arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}

static const struct luaL_Reg m_cutorch_CudaLongTensorMath__ [] = {
{"fill", m_cutorch_CudaLongTensor_fill},
{"zero", m_cutorch_CudaLongTensor_zero},
{"zeros", m_cutorch_CudaLongTensor_zeros},
{"ones", m_cutorch_CudaLongTensor_ones},
{"reshape", m_cutorch_CudaLongTensor_reshape},
{"numel", m_cutorch_CudaLongTensor_numel},
{"add", m_cutorch_CudaLongTensor_add},
{"csub", m_cutorch_CudaLongTensor_csub},
{"mul", m_cutorch_CudaLongTensor_mul},
{"clamp", m_cutorch_CudaLongTensor_clamp},
{"cross", m_cutorch_CudaLongTensor_cross},
{"div", m_cutorch_CudaLongTensor_div},
{"cmul", m_cutorch_CudaLongTensor_cmul},
{"cpow", m_cutorch_CudaLongTensor_cpow},
{"cdiv", m_cutorch_CudaLongTensor_cdiv},
{"addcmul", m_cutorch_CudaLongTensor_addcmul},
{"addcdiv", m_cutorch_CudaLongTensor_addcdiv},
{"min", m_cutorch_CudaLongTensor_min},
{"max", m_cutorch_CudaLongTensor_max},
{"cmin", m_cutorch_CudaLongTensor_cmin},
{"cmax", m_cutorch_CudaLongTensor_cmax},
{"lt", m_cutorch_CudaLongTensor_lt},
{"gt", m_cutorch_CudaLongTensor_gt},
{"le", m_cutorch_CudaLongTensor_le},
{"ge", m_cutorch_CudaLongTensor_ge},
{"eq", m_cutorch_CudaLongTensor_eq},
{"ne", m_cutorch_CudaLongTensor_ne},
{"sum", m_cutorch_CudaLongTensor_sum},
{"prod", m_cutorch_CudaLongTensor_prod},
{"mean", m_cutorch_CudaLongTensor_mean},
{"maskedFill", m_cutorch_CudaLongTensor_maskedFill},
{"maskedCopy", m_cutorch_CudaLongTensor_maskedCopy},
{"maskedSelect", m_cutorch_CudaLongTensor_maskedSelect},
{"gather", m_cutorch_CudaLongTensor_gather},
{"scatter", m_cutorch_CudaLongTensor_scatter},
{"sort", m_cutorch_CudaLongTensor_sort},
{"squeeze", m_cutorch_CudaLongTensor_squeeze},
{"abs", m_cutorch_CudaLongTensor_abs},
{"sign", m_cutorch_CudaLongTensor_sign},
{"cat", m_cutorch_CudaLongTensor_cat},
{"dot", m_cutorch_CudaLongTensor_dot},
{NULL, NULL}
};

static const struct luaL_Reg cutorch_CudaLongTensorMath__ [] = {
{"fill", cutorch_CudaLongTensor_fill},
{"zero", cutorch_CudaLongTensor_zero},
{"zeros", cutorch_CudaLongTensor_zeros},
{"ones", cutorch_CudaLongTensor_ones},
{"reshape", cutorch_CudaLongTensor_reshape},
{"numel", cutorch_CudaLongTensor_numel},
{"add", cutorch_CudaLongTensor_add},
{"csub", cutorch_CudaLongTensor_csub},
{"mul", cutorch_CudaLongTensor_mul},
{"clamp", cutorch_CudaLongTensor_clamp},
{"cross", cutorch_CudaLongTensor_cross},
{"div", cutorch_CudaLongTensor_div},
{"cmul", cutorch_CudaLongTensor_cmul},
{"cpow", cutorch_CudaLongTensor_cpow},
{"cdiv", cutorch_CudaLongTensor_cdiv},
{"addcmul", cutorch_CudaLongTensor_addcmul},
{"addcdiv", cutorch_CudaLongTensor_addcdiv},
{"min", cutorch_CudaLongTensor_min},
{"max", cutorch_CudaLongTensor_max},
{"cmin", cutorch_CudaLongTensor_cmin},
{"cmax", cutorch_CudaLongTensor_cmax},
{"lt", cutorch_CudaLongTensor_lt},
{"gt", cutorch_CudaLongTensor_gt},
{"le", cutorch_CudaLongTensor_le},
{"ge", cutorch_CudaLongTensor_ge},
{"eq", cutorch_CudaLongTensor_eq},
{"ne", cutorch_CudaLongTensor_ne},
{"sum", cutorch_CudaLongTensor_sum},
{"prod", cutorch_CudaLongTensor_prod},
{"mean", cutorch_CudaLongTensor_mean},
{"maskedFill", cutorch_CudaLongTensor_maskedFill},
{"maskedCopy", cutorch_CudaLongTensor_maskedCopy},
{"maskedSelect", cutorch_CudaLongTensor_maskedSelect},
{"gather", cutorch_CudaLongTensor_gather},
{"scatter", cutorch_CudaLongTensor_scatter},
{"sort", cutorch_CudaLongTensor_sort},
{"squeeze", cutorch_CudaLongTensor_squeeze},
{"abs", cutorch_CudaLongTensor_abs},
{"sign", cutorch_CudaLongTensor_sign},
{"cat", cutorch_CudaLongTensor_cat},
{"dot", cutorch_CudaLongTensor_dot},
{NULL, NULL}
};

void cutorch_CudaLongTensorMath_init(lua_State *L)
{
  luaT_pushmetatable(L, "torch.CudaLongTensor");

  /* register methods */
  luaL_setfuncs(L, m_cutorch_CudaLongTensorMath__, 0);

  /* register functions into the "torch" field of the tensor metaclass */
  lua_pushstring(L, "torch");
  lua_newtable(L);
  luaL_setfuncs(L, cutorch_CudaLongTensorMath__, 0);
  lua_rawset(L, -3);
  lua_pop(L, 1);
}

static int cutorch_CudaDoubleTensor_fill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
double arg2 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (double)lua_tonumber(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* double", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_fill(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_zero(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor*", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_zero(default_arg1,arg1);
return 1;
}

static int cutorch_CudaDoubleTensor_zeros(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 1
&& cutorch_islongargs(L, 1)
)
{
arg2 = cutorch_checklongargs(L, 1);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_zeros(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_ones(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 1
&& cutorch_islongargs(L, 1)
)
{
arg2 = cutorch_checklongargs(L, 1);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_ones(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_reshape(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
THLongStorage *arg3 = NULL;
if(narg >= 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg3 = cutorch_checklongargs(L, 2);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg >= 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& cutorch_islongargs(L, 3)
)
{
arg1_idx = 1;
arg3 = cutorch_checklongargs(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_reshape(default_arg1,arg1,arg2,arg3);
THLongStorage_free(arg3);
return 1;
}

static int cutorch_CudaDoubleTensor_numel(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
ptrdiff_t arg2 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaDoubleTensor", type_buf);
}
arg2 = THCudaDoubleTensor_numel(default_arg1,arg1);
lua_pushinteger(L, (lua_Integer)arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_add(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
THCudaDoubleTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
double arg6 = 1;
THCudaDoubleTensor *arg7 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (double)lua_tonumber(L, 2);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 2;
arg4 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 2;
arg6 = (double)lua_tonumber(L, 2);
arg4 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaDoubleTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor double | [*CudaDoubleTensor*] CudaDoubleTensor [double] CudaDoubleTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_add(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaDoubleTensor");
THCudaDoubleTensor_cadd(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int cutorch_CudaDoubleTensor_csub(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
THCudaDoubleTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
double arg6 = 1;
THCudaDoubleTensor *arg7 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (double)lua_tonumber(L, 2);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 2;
arg4 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 2;
arg6 = (double)lua_tonumber(L, 2);
arg4 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaDoubleTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor double | [*CudaDoubleTensor*] CudaDoubleTensor [double] CudaDoubleTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_sub(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaDoubleTensor");
THCudaDoubleTensor_csub(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int cutorch_CudaDoubleTensor_mul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (double)lua_tonumber(L, 2);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor double", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_mul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaDoubleTensor_clamp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
double arg4 = 0;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg3 = (double)lua_tonumber(L, 2);
arg4 = (double)lua_tonumber(L, 3);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
arg4 = (double)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor double double", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_clamp(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaDoubleTensor_cross(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
THCudaDoubleTensor *arg3 = NULL;
long arg4 = -1;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor CudaDoubleTensor [index]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_cross(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaDoubleTensor_div(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (double)lua_tonumber(L, 2);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor double", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_div(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaDoubleTensor_cmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
THCudaDoubleTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_cmul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaDoubleTensor_cpow(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
THCudaDoubleTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_cpow(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaDoubleTensor_cdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
THCudaDoubleTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_cdiv(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaDoubleTensor_addcmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 1;
THCudaDoubleTensor *arg4 = NULL;
THCudaDoubleTensor *arg5 = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor"))
)
{
arg3 = (double)lua_tonumber(L, 2);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor [double] CudaDoubleTensor CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_addcmul(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int cutorch_CudaDoubleTensor_addcdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 1;
THCudaDoubleTensor *arg4 = NULL;
THCudaDoubleTensor *arg5 = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor"))
)
{
arg3 = (double)lua_tonumber(L, 2);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor [double] CudaDoubleTensor CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_addcdiv(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int cutorch_CudaDoubleTensor_min(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
double arg2 = 0;
THCudaDoubleTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaDoubleTensor | [*CudaDoubleTensor*] [*CudaLongTensor*] CudaDoubleTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaDoubleTensor_minall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaDoubleTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaDoubleTensor_min(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int cutorch_CudaDoubleTensor_max(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
double arg2 = 0;
THCudaDoubleTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaDoubleTensor | [*CudaDoubleTensor*] [*CudaLongTensor*] CudaDoubleTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaDoubleTensor_maxall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaDoubleTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaDoubleTensor_max(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int cutorch_CudaDoubleTensor_cmin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
THCudaDoubleTensor *arg3 = NULL;
THCudaDoubleTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
double arg6 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 1;
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (double)lua_tonumber(L, 2);
arg4 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor CudaDoubleTensor | [*CudaDoubleTensor*] CudaDoubleTensor double", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_cmin(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaDoubleTensor");
THCudaDoubleTensor_cminValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaDoubleTensor_cmax(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
THCudaDoubleTensor *arg3 = NULL;
THCudaDoubleTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
double arg6 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 1;
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (double)lua_tonumber(L, 2);
arg4 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor CudaDoubleTensor | [*CudaDoubleTensor*] CudaDoubleTensor double", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_cmax(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaDoubleTensor");
THCudaDoubleTensor_cmaxValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaDoubleTensor_lt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
THCudaDoubleTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
double arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaDoubleTensor *arg8 = NULL;
THCudaDoubleTensor *arg9 = NULL;
THCudaDoubleTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaDoubleTensor *arg11 = NULL;
THCudaDoubleTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (double)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaDoubleTensor double | *CudaDoubleTensor* CudaDoubleTensor double | [*CudaByteTensor*] CudaDoubleTensor CudaDoubleTensor | *CudaDoubleTensor* CudaDoubleTensor CudaDoubleTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaDoubleTensor_ltValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaDoubleTensor_ltValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaDoubleTensor_ltTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaDoubleTensor_ltTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaDoubleTensor_gt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
THCudaDoubleTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
double arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaDoubleTensor *arg8 = NULL;
THCudaDoubleTensor *arg9 = NULL;
THCudaDoubleTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaDoubleTensor *arg11 = NULL;
THCudaDoubleTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (double)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaDoubleTensor double | *CudaDoubleTensor* CudaDoubleTensor double | [*CudaByteTensor*] CudaDoubleTensor CudaDoubleTensor | *CudaDoubleTensor* CudaDoubleTensor CudaDoubleTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaDoubleTensor_gtValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaDoubleTensor_gtValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaDoubleTensor_gtTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaDoubleTensor_gtTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaDoubleTensor_le(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
THCudaDoubleTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
double arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaDoubleTensor *arg8 = NULL;
THCudaDoubleTensor *arg9 = NULL;
THCudaDoubleTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaDoubleTensor *arg11 = NULL;
THCudaDoubleTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (double)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaDoubleTensor double | *CudaDoubleTensor* CudaDoubleTensor double | [*CudaByteTensor*] CudaDoubleTensor CudaDoubleTensor | *CudaDoubleTensor* CudaDoubleTensor CudaDoubleTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaDoubleTensor_leValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaDoubleTensor_leValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaDoubleTensor_leTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaDoubleTensor_leTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaDoubleTensor_ge(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
THCudaDoubleTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
double arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaDoubleTensor *arg8 = NULL;
THCudaDoubleTensor *arg9 = NULL;
THCudaDoubleTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaDoubleTensor *arg11 = NULL;
THCudaDoubleTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (double)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaDoubleTensor double | *CudaDoubleTensor* CudaDoubleTensor double | [*CudaByteTensor*] CudaDoubleTensor CudaDoubleTensor | *CudaDoubleTensor* CudaDoubleTensor CudaDoubleTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaDoubleTensor_geValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaDoubleTensor_geValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaDoubleTensor_geTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaDoubleTensor_geTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaDoubleTensor_eq(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
THCudaDoubleTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
double arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaDoubleTensor *arg8 = NULL;
THCudaDoubleTensor *arg9 = NULL;
THCudaDoubleTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaDoubleTensor *arg11 = NULL;
THCudaDoubleTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (double)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaDoubleTensor double | *CudaDoubleTensor* CudaDoubleTensor double | [*CudaByteTensor*] CudaDoubleTensor CudaDoubleTensor | *CudaDoubleTensor* CudaDoubleTensor CudaDoubleTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaDoubleTensor_eqValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaDoubleTensor_eqValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaDoubleTensor_eqTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaDoubleTensor_eqTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaDoubleTensor_ne(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
THCudaDoubleTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
double arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaDoubleTensor *arg8 = NULL;
THCudaDoubleTensor *arg9 = NULL;
THCudaDoubleTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaDoubleTensor *arg11 = NULL;
THCudaDoubleTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (double)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaDoubleTensor double | *CudaDoubleTensor* CudaDoubleTensor double | [*CudaByteTensor*] CudaDoubleTensor CudaDoubleTensor | *CudaDoubleTensor* CudaDoubleTensor CudaDoubleTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaDoubleTensor_neValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaDoubleTensor_neValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaDoubleTensor_neTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaDoubleTensor_neTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaDoubleTensor_sum(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
double arg2 = 0;
THCudaDoubleTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaDoubleTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaDoubleTensor | [*CudaDoubleTensor*] CudaDoubleTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaDoubleTensor_sumall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaDoubleTensor");
THCudaDoubleTensor_sum(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaDoubleTensor_prod(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
double arg2 = 0;
THCudaDoubleTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaDoubleTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaDoubleTensor | [*CudaDoubleTensor*] CudaDoubleTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaDoubleTensor_prodall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaDoubleTensor");
THCudaDoubleTensor_prod(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaDoubleTensor_mean(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
double arg2 = 0;
THCudaDoubleTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaDoubleTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaDoubleTensor | [*CudaDoubleTensor*] CudaDoubleTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaDoubleTensor_meanall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaDoubleTensor");
THCudaDoubleTensor_mean(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaDoubleTensor_maskedFill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
double arg3 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* CudaByteTensor double", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_maskedFill(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaDoubleTensor_maskedCopy(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaDoubleTensor *arg3 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* CudaByteTensor CudaDoubleTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_maskedCopy(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaDoubleTensor_maskedSelect(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_maskedSelect(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaDoubleTensor_gather(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
THCudaDoubleTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaDoubleTensor *arg6 = NULL;
long arg7 = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaDoubleTensor *dummyIndexTensor = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
THCudaDoubleTensor_checkGPU(cutorch_getstate(L), 1, arg4);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg4);
		  THCudaDoubleTensor_resize(state, arg1, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg6 = (decltype(arg6))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 2;
arg7 = (long)lua_tonumber(L, 2)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaDoubleTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaDouble(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
arg5 = THCudaDoubleTensor_new(cutorch_getstate(L));
THCudaDoubleTensor_checkGPU(cutorch_getstate(L), 1, arg8);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg8);
		  THCudaDoubleTensor_resize(state, arg5, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 4, "torch.CudaDoubleTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg7 = (long)lua_tonumber(L, 3)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaDoubleTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaDouble(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor index CudaLongTensor | [*CudaDoubleTensor*] CudaDoubleTensor index CudaDoubleTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_gather(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaDoubleTensor");
THCudaDoubleTensor_gather(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int cutorch_CudaDoubleTensor_scatter(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
THCudaDoubleTensor *arg4 = NULL;
THCudaDoubleTensor *arg5 = NULL;
int arg5_idx = 0;
long arg6 = 0;
THCudaLongTensor *arg7 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaDoubleTensor *dummyIndexTensor = NULL;
THCudaDoubleTensor *arg8 = NULL;
THCudaDoubleTensor *arg9 = NULL;
int arg9_idx = 0;
long arg10 = 0;
THCudaLongTensor *arg11 = NULL;
double arg12 = 0;
THCudaDoubleTensor *arg13 = NULL;
int arg13_idx = 0;
long arg14 = 0;
THCudaLongTensor *arg15 = NULL;
double arg16 = 0;
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaDoubleTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = (long)lua_tonumber(L, 2)-1;
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 4, "torch.CudaDoubleTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg6 = (long)lua_tonumber(L, 2)-1;
arg7 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaDoubleTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg7, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaDouble(default_arg1, arg7, dummyIndexTensor);
indexLongTensor = arg7;
}
else if(narg == 4
&& (arg9 = (decltype(arg9))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 3;
arg9_idx = 1;
arg10 = (long)lua_tonumber(L, 2)-1;
arg12 = (double)lua_tonumber(L, 4);
}
else if(narg == 4
&& (arg13 = (decltype(arg13))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 4;
arg13_idx = 1;
arg14 = (long)lua_tonumber(L, 2)-1;
arg15 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaDoubleTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg15, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaDouble(default_arg1, arg15, dummyIndexTensor);
indexLongTensor = arg15;
arg16 = (double)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* index CudaLongTensor CudaDoubleTensor | *CudaDoubleTensor* index CudaDoubleTensor CudaDoubleTensor | *CudaDoubleTensor* index CudaLongTensor double | *CudaDoubleTensor* index CudaDoubleTensor double", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_scatter(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg5_idx);
THCudaDoubleTensor_scatter(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
else if(argset == 3)
{
lua_pushvalue(L, arg9_idx);
THCudaDoubleTensor_scatterFill(default_arg1,arg9,arg10,arg11,arg12);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg13_idx);
THCudaDoubleTensor_scatterFill(default_arg1,arg13,arg14,arg15,arg16);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int cutorch_CudaDoubleTensor_sort(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaDoubleTensor *arg3 = NULL;
long arg4 = 0;
int arg5 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg2_idx = 1;
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg4 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isboolean(L, 2)
)
{
arg5 = lua_toboolean(L, 2);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isboolean(L, 3)
)
{
arg1_idx = 1;
arg5 = lua_toboolean(L, 3);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isboolean(L, 3)
)
{
arg2_idx = 1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg4 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = lua_toboolean(L, 4);
arg4 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = lua_toboolean(L, 5);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] [*CudaLongTensor*] CudaDoubleTensor [index] [boolean]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
if(arg2_idx)
lua_pushvalue(L, arg2_idx);
else
luaT_pushudata(L, arg2, "torch.CudaLongTensor");
THCudaDoubleTensor_sort(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 2;
}

static int cutorch_CudaDoubleTensor_squeeze(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
THCudaDoubleTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaDoubleTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
argset = 1;
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor | [*CudaDoubleTensor*] CudaDoubleTensor index", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_squeeze(default_arg1,arg1,arg2);
if(arg1->nDimension == 1 && arg1->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaDoubleTensor_get1d(cutorch_getstate(L), arg1, 0)));
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaDoubleTensor");
{int hasdims = arg4->nDimension > 1;
THCudaDoubleTensor_squeeze1d(default_arg1,arg3,arg4,arg5);
if(!hasdims && arg3->nDimension == 1 && arg3->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaDoubleTensor_get1d(cutorch_getstate(L), arg3, 0)));}
return 1;
}
return 0;
}

static int cutorch_CudaDoubleTensor_abs(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_abs(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_sign(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_sign(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_cat(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
THCudaDoubleTensor *arg3 = NULL;
long arg4 = 0;
THCudaDoubleTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaDoubleTensor **arg6_data = NULL;
long arg6_size = 0;
int arg6_i = 0;
long arg7 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 1;
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg4 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg4 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 1
&& torch_isnonemptytable(L, 1)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaDoubleTensor**)THAlloc(arg6_size * sizeof(THCudaDoubleTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaDoubleTensor*)luaT_toudata(L, -1, "torch.CudaDoubleTensor")))
    luaL_error(L, "expected CudaDoubleTensor in tensor array");
  lua_pop(L, 1);
}

arg5 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg7 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& torch_isnonemptytable(L, 2)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaDoubleTensor**)THAlloc(arg6_size * sizeof(THCudaDoubleTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaDoubleTensor*)luaT_toudata(L, -1, "torch.CudaDoubleTensor")))
    luaL_error(L, "expected CudaDoubleTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& torch_isnonemptytable(L, 1)
&& lua_isnumber(L, 2)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaDoubleTensor**)THAlloc(arg6_size * sizeof(THCudaDoubleTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaDoubleTensor*)luaT_toudata(L, -1, "torch.CudaDoubleTensor")))
    luaL_error(L, "expected CudaDoubleTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 2)-1;
arg5 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& torch_isnonemptytable(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaDoubleTensor**)THAlloc(arg6_size * sizeof(THCudaDoubleTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaDoubleTensor*)luaT_toudata(L, -1, "torch.CudaDoubleTensor")))
    luaL_error(L, "expected CudaDoubleTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor CudaDoubleTensor [index] | [*CudaDoubleTensor*] {CudaDoubleTensor+} [index]", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_cat(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaDoubleTensor");
THCudaDoubleTensor_catArray(default_arg1,arg5,arg6_data,arg6_size,arg7);
THFree(arg6_data);
return 1;
}
return 0;
}

static int cutorch_CudaDoubleTensor_log(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_log(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_log1p(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_log1p(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_exp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_exp(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_cos(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_cos(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_acos(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_acos(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_cosh(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_cosh(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_sin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_sin(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_asin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_asin(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_sinh(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_sinh(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_tan(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_tan(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_atan(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_atan(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_tanh(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_tanh(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_sqrt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_sqrt(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_rsqrt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_rsqrt(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_sigmoid(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_sigmoid(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_cinv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_cinv(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_ceil(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_ceil(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_floor(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_floor(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_neg(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_neg(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_round(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_round(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_trunc(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_trunc(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_frac(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_frac(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaDoubleTensor_norm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
double arg2 = 2;
double arg3 = 0;
THCudaDoubleTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
double arg6 = 0;
long arg7 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg2 = (double)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg6 = (double)lua_tonumber(L, 2);
arg7 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 3);
arg7 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaDoubleTensor [double] | [*CudaDoubleTensor*] CudaDoubleTensor double index", type_buf);
}
if(argset == 1)
{
arg3 = THCudaDoubleTensor_normall(default_arg1,arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaDoubleTensor");
THCudaDoubleTensor_norm(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int cutorch_CudaDoubleTensor_renorm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
long arg4 = 0;
double arg5 = 0;
if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg3 = (double)lua_tonumber(L, 2);
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = (double)lua_tonumber(L, 4);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
&& lua_isnumber(L, 5)
)
{
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = (double)lua_tonumber(L, 5);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor double index double", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_renorm(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int cutorch_CudaDoubleTensor_var(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
double arg2 = 0;
THCudaDoubleTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaDoubleTensor *arg4 = NULL;
long arg5 = 0;
int arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg6 = lua_toboolean(L, 3);
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaDoubleTensor | [*CudaDoubleTensor*] CudaDoubleTensor index [boolean]", type_buf);
}
if(argset == 1)
{
arg2 = THCudaDoubleTensor_varall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaDoubleTensor");
THCudaDoubleTensor_var(default_arg1,arg3,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaDoubleTensor_std(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
double arg2 = 0;
THCudaDoubleTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaDoubleTensor *arg4 = NULL;
long arg5 = 0;
int arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg6 = lua_toboolean(L, 3);
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaDoubleTensor | [*CudaDoubleTensor*] CudaDoubleTensor index [boolean]", type_buf);
}
if(argset == 1)
{
arg2 = THCudaDoubleTensor_stdall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaDoubleTensor");
THCudaDoubleTensor_std(default_arg1,arg3,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaDoubleTensor_lerp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
THCudaDoubleTensor *arg3 = NULL;
double arg4 = 0;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
arg4 = (double)lua_tonumber(L, 3);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = (double)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor CudaDoubleTensor double", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_lerp(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaDoubleTensor_mv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
double arg2 = 1;
THCudaDoubleTensor *arg3 = NULL;
double arg4 = 1;
THCudaDoubleTensor *arg5 = NULL;
THCudaDoubleTensor *arg6 = NULL;
if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
THCudaDoubleTensor_checkGPU(cutorch_getstate(L), 1, arg5);
THCudaDoubleTensor_resize1d(cutorch_getstate(L), arg1, arg5->size[0]);
arg3 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor~2D CudaDoubleTensor~1D", type_buf);
}
THCudaDoubleTensor_zero(cutorch_getstate(L), arg1);
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_addmv(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaDoubleTensor_mm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
double arg2 = 0;
THCudaDoubleTensor *arg3 = NULL;
double arg4 = 1;
THCudaDoubleTensor *arg5 = NULL;
THCudaDoubleTensor *arg6 = NULL;
if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg6->nDimension == 2)
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
THCudaDoubleTensor_checkGPU(cutorch_getstate(L), 2, arg5, arg6);
THCudaDoubleTensor_resize2d(cutorch_getstate(L), arg1, arg5->size[0], arg6->size[1]);
arg3 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg6->nDimension == 2)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor~2D CudaDoubleTensor~2D", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_addmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaDoubleTensor_bmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
double arg2 = 0;
THCudaDoubleTensor *arg3 = NULL;
double arg4 = 1;
THCudaDoubleTensor *arg5 = NULL;
THCudaDoubleTensor *arg6 = NULL;
if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
THCudaDoubleTensor_checkGPU(cutorch_getstate(L), 2, arg5, arg6);
THCudaDoubleTensor_resize3d(cutorch_getstate(L), arg1, arg5->size[0], arg5->size[1], arg6->size[2]);
arg3 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor~3D CudaDoubleTensor~3D", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_baddbmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaDoubleTensor_ger(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
double arg2 = 1;
THCudaDoubleTensor *arg3 = NULL;
double arg4 = 1;
THCudaDoubleTensor *arg5 = NULL;
THCudaDoubleTensor *arg6 = NULL;
if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
THCudaDoubleTensor_checkGPU(cutorch_getstate(L), 2, arg5, arg6);
THCudaDoubleTensor_resize2d(cutorch_getstate(L), arg1, arg5->size[0], arg6->size[0]);
arg3 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor~1D CudaDoubleTensor~1D", type_buf);
}
THCudaDoubleTensor_zero(cutorch_getstate(L), arg1);
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_addr(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaDoubleTensor_addmv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
double arg2 = 1;
THCudaDoubleTensor *arg3 = NULL;
double arg4 = 1;
THCudaDoubleTensor *arg5 = NULL;
THCudaDoubleTensor *arg6 = NULL;
if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg3->nDimension == 1)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 1)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
}
else if(narg == 4
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 1)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
arg2 = (double)lua_tonumber(L, 1);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg3->nDimension == 1)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg2 = (double)lua_tonumber(L, 2);
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg3->nDimension == 1)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
arg4 = (double)lua_tonumber(L, 2);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 1)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg4 = (double)lua_tonumber(L, 3);
}
else if(narg == 5
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 1)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
arg2 = (double)lua_tonumber(L, 1);
arg4 = (double)lua_tonumber(L, 3);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg3->nDimension == 1)
&& lua_isnumber(L, 4)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 6, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg2 = (double)lua_tonumber(L, 2);
arg4 = (double)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] [double] CudaDoubleTensor~1D [double] CudaDoubleTensor~2D CudaDoubleTensor~1D", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_addmv(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaDoubleTensor_addmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
double arg2 = 1;
THCudaDoubleTensor *arg3 = NULL;
double arg4 = 1;
THCudaDoubleTensor *arg5 = NULL;
THCudaDoubleTensor *arg6 = NULL;
if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg6->nDimension == 2)
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 2)
)
{
arg1_idx = 1;
}
else if(narg == 4
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 2)
)
{
arg2 = (double)lua_tonumber(L, 1);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg6->nDimension == 2)
)
{
arg1_idx = 1;
arg2 = (double)lua_tonumber(L, 2);
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 2)
)
{
arg4 = (double)lua_tonumber(L, 2);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg6->nDimension == 2)
)
{
arg1_idx = 1;
arg4 = (double)lua_tonumber(L, 3);
}
else if(narg == 5
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg6->nDimension == 2)
)
{
arg2 = (double)lua_tonumber(L, 1);
arg4 = (double)lua_tonumber(L, 3);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 4)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 6, "torch.CudaDoubleTensor")) && (arg6->nDimension == 2)
)
{
arg1_idx = 1;
arg2 = (double)lua_tonumber(L, 2);
arg4 = (double)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] [double] CudaDoubleTensor~2D [double] CudaDoubleTensor~2D CudaDoubleTensor~2D", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_addmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaDoubleTensor_addr(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
double arg2 = 1;
THCudaDoubleTensor *arg3 = NULL;
double arg4 = 1;
THCudaDoubleTensor *arg5 = NULL;
THCudaDoubleTensor *arg6 = NULL;
if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
}
else if(narg == 4
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
arg2 = (double)lua_tonumber(L, 1);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg2 = (double)lua_tonumber(L, 2);
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
arg4 = (double)lua_tonumber(L, 2);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg4 = (double)lua_tonumber(L, 3);
}
else if(narg == 5
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
arg2 = (double)lua_tonumber(L, 1);
arg4 = (double)lua_tonumber(L, 3);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 4)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 6, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg2 = (double)lua_tonumber(L, 2);
arg4 = (double)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] [double] CudaDoubleTensor~2D [double] CudaDoubleTensor~1D CudaDoubleTensor~1D", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_addr(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaDoubleTensor_baddbmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
double arg2 = 1;
THCudaDoubleTensor *arg3 = NULL;
double arg4 = 1;
THCudaDoubleTensor *arg5 = NULL;
THCudaDoubleTensor *arg6 = NULL;
if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg3->nDimension == 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
}
else if(narg == 4
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
arg2 = (double)lua_tonumber(L, 1);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg3->nDimension == 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg2 = (double)lua_tonumber(L, 2);
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg3->nDimension == 3)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
arg4 = (double)lua_tonumber(L, 2);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 3)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg4 = (double)lua_tonumber(L, 3);
}
else if(narg == 5
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 3)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
arg2 = (double)lua_tonumber(L, 1);
arg4 = (double)lua_tonumber(L, 3);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg3->nDimension == 3)
&& lua_isnumber(L, 4)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 6, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg2 = (double)lua_tonumber(L, 2);
arg4 = (double)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] [double] CudaDoubleTensor~3D [double] CudaDoubleTensor~3D CudaDoubleTensor~3D", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_baddbmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaDoubleTensor_addbmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
double arg2 = 1;
THCudaDoubleTensor *arg3 = NULL;
double arg4 = 1;
THCudaDoubleTensor *arg5 = NULL;
THCudaDoubleTensor *arg6 = NULL;
if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
}
else if(narg == 4
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
arg2 = (double)lua_tonumber(L, 1);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg2 = (double)lua_tonumber(L, 2);
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
arg4 = (double)lua_tonumber(L, 2);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg4 = (double)lua_tonumber(L, 3);
}
else if(narg == 5
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
arg2 = (double)lua_tonumber(L, 1);
arg4 = (double)lua_tonumber(L, 3);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 4)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 6, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg2 = (double)lua_tonumber(L, 2);
arg4 = (double)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] [double] CudaDoubleTensor~2D [double] CudaDoubleTensor~3D CudaDoubleTensor~3D", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_addbmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaDoubleTensor_dot(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaDoubleTensor CudaDoubleTensor", type_buf);
}
arg3 = THCudaDoubleTensor_dot(default_arg1,arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}

static int m_cutorch_CudaDoubleTensor_fill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
double arg2 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (double)lua_tonumber(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* double", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_fill(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_zero(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor*", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_zero(default_arg1,arg1);
return 1;
}

static int m_cutorch_CudaDoubleTensor_zeros(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* (LongStorage | dim1 [dim2...])", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_zeros(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_ones(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* (LongStorage | dim1 [dim2...])", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_ones(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_reshape(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
THLongStorage *arg3 = NULL;
if(narg >= 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg3 = cutorch_checklongargs(L, 2);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg >= 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& cutorch_islongargs(L, 3)
)
{
arg1_idx = 1;
arg3 = cutorch_checklongargs(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_reshape(default_arg1,arg1,arg2,arg3);
THLongStorage_free(arg3);
return 1;
}

static int m_cutorch_CudaDoubleTensor_numel(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
ptrdiff_t arg2 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaDoubleTensor", type_buf);
}
arg2 = THCudaDoubleTensor_numel(default_arg1,arg1);
lua_pushinteger(L, (lua_Integer)arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_add(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
THCudaDoubleTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
double arg6 = 1;
THCudaDoubleTensor *arg7 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg5 = arg4;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaDoubleTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor] double | *CudaDoubleTensor* [CudaDoubleTensor] [double] CudaDoubleTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_add(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaDoubleTensor_cadd(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_csub(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
THCudaDoubleTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
double arg6 = 1;
THCudaDoubleTensor *arg7 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg5 = arg4;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaDoubleTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor] double | *CudaDoubleTensor* [CudaDoubleTensor] [double] CudaDoubleTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_sub(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaDoubleTensor_csub(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_mul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor] double", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_mul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaDoubleTensor_clamp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
double arg4 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 2);
arg4 = (double)lua_tonumber(L, 3);
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
arg4 = (double)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor] double double", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_clamp(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int m_cutorch_CudaDoubleTensor_cross(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
THCudaDoubleTensor *arg3 = NULL;
long arg4 = -1;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor CudaDoubleTensor [index]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_cross(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int m_cutorch_CudaDoubleTensor_div(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor] double", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_div(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaDoubleTensor_cmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
THCudaDoubleTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor] CudaDoubleTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_cmul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaDoubleTensor_cpow(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
THCudaDoubleTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor] CudaDoubleTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_cpow(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaDoubleTensor_cdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
THCudaDoubleTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor] CudaDoubleTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_cdiv(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaDoubleTensor_addcmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 1;
THCudaDoubleTensor *arg4 = NULL;
THCudaDoubleTensor *arg5 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor] [double] CudaDoubleTensor CudaDoubleTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_addcmul(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int m_cutorch_CudaDoubleTensor_addcdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 1;
THCudaDoubleTensor *arg4 = NULL;
THCudaDoubleTensor *arg5 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor] [double] CudaDoubleTensor CudaDoubleTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_addcdiv(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int m_cutorch_CudaDoubleTensor_min(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
double arg2 = 0;
THCudaDoubleTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaDoubleTensor | [*CudaDoubleTensor*] [*CudaLongTensor*] CudaDoubleTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaDoubleTensor_minall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaDoubleTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaDoubleTensor_min(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_max(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
double arg2 = 0;
THCudaDoubleTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaDoubleTensor | [*CudaDoubleTensor*] [*CudaLongTensor*] CudaDoubleTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaDoubleTensor_maxall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaDoubleTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaDoubleTensor_max(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_cmin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
THCudaDoubleTensor *arg3 = NULL;
THCudaDoubleTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
double arg6 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
argset = 1;
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 1;
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 1
&& lua_isnumber(L, 1)
)
{
argset = 2;
arg6 = (double)lua_tonumber(L, 1);
arg4 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg5 = arg4;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (double)lua_tonumber(L, 2);
arg4 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] [CudaDoubleTensor] CudaDoubleTensor | [*CudaDoubleTensor*] [CudaDoubleTensor] double", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_cmin(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaDoubleTensor");
THCudaDoubleTensor_cminValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_cmax(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
THCudaDoubleTensor *arg3 = NULL;
THCudaDoubleTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
double arg6 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
argset = 1;
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 1;
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 1
&& lua_isnumber(L, 1)
)
{
argset = 2;
arg6 = (double)lua_tonumber(L, 1);
arg4 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg5 = arg4;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (double)lua_tonumber(L, 2);
arg4 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] [CudaDoubleTensor] CudaDoubleTensor | [*CudaDoubleTensor*] [CudaDoubleTensor] double", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_cmax(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaDoubleTensor");
THCudaDoubleTensor_cmaxValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_lt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
THCudaDoubleTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
double arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaDoubleTensor *arg8 = NULL;
THCudaDoubleTensor *arg9 = NULL;
THCudaDoubleTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaDoubleTensor *arg11 = NULL;
THCudaDoubleTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (double)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaDoubleTensor double | *CudaDoubleTensor* CudaDoubleTensor double | [*CudaByteTensor*] CudaDoubleTensor CudaDoubleTensor | *CudaDoubleTensor* CudaDoubleTensor CudaDoubleTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaDoubleTensor_ltValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaDoubleTensor_ltValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaDoubleTensor_ltTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaDoubleTensor_ltTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_gt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
THCudaDoubleTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
double arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaDoubleTensor *arg8 = NULL;
THCudaDoubleTensor *arg9 = NULL;
THCudaDoubleTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaDoubleTensor *arg11 = NULL;
THCudaDoubleTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (double)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaDoubleTensor double | *CudaDoubleTensor* CudaDoubleTensor double | [*CudaByteTensor*] CudaDoubleTensor CudaDoubleTensor | *CudaDoubleTensor* CudaDoubleTensor CudaDoubleTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaDoubleTensor_gtValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaDoubleTensor_gtValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaDoubleTensor_gtTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaDoubleTensor_gtTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_le(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
THCudaDoubleTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
double arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaDoubleTensor *arg8 = NULL;
THCudaDoubleTensor *arg9 = NULL;
THCudaDoubleTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaDoubleTensor *arg11 = NULL;
THCudaDoubleTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (double)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaDoubleTensor double | *CudaDoubleTensor* CudaDoubleTensor double | [*CudaByteTensor*] CudaDoubleTensor CudaDoubleTensor | *CudaDoubleTensor* CudaDoubleTensor CudaDoubleTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaDoubleTensor_leValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaDoubleTensor_leValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaDoubleTensor_leTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaDoubleTensor_leTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_ge(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
THCudaDoubleTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
double arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaDoubleTensor *arg8 = NULL;
THCudaDoubleTensor *arg9 = NULL;
THCudaDoubleTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaDoubleTensor *arg11 = NULL;
THCudaDoubleTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (double)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaDoubleTensor double | *CudaDoubleTensor* CudaDoubleTensor double | [*CudaByteTensor*] CudaDoubleTensor CudaDoubleTensor | *CudaDoubleTensor* CudaDoubleTensor CudaDoubleTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaDoubleTensor_geValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaDoubleTensor_geValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaDoubleTensor_geTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaDoubleTensor_geTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_eq(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
THCudaDoubleTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
double arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaDoubleTensor *arg8 = NULL;
THCudaDoubleTensor *arg9 = NULL;
THCudaDoubleTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaDoubleTensor *arg11 = NULL;
THCudaDoubleTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (double)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaDoubleTensor double | *CudaDoubleTensor* CudaDoubleTensor double | [*CudaByteTensor*] CudaDoubleTensor CudaDoubleTensor | *CudaDoubleTensor* CudaDoubleTensor CudaDoubleTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaDoubleTensor_eqValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaDoubleTensor_eqValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaDoubleTensor_eqTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaDoubleTensor_eqTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_ne(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
THCudaDoubleTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
double arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaDoubleTensor *arg8 = NULL;
THCudaDoubleTensor *arg9 = NULL;
THCudaDoubleTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaDoubleTensor *arg11 = NULL;
THCudaDoubleTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (double)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaDoubleTensor double | *CudaDoubleTensor* CudaDoubleTensor double | [*CudaByteTensor*] CudaDoubleTensor CudaDoubleTensor | *CudaDoubleTensor* CudaDoubleTensor CudaDoubleTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaDoubleTensor_neValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaDoubleTensor_neValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaDoubleTensor_neTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaDoubleTensor_neTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_sum(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
double arg2 = 0;
THCudaDoubleTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaDoubleTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaDoubleTensor | [*CudaDoubleTensor*] CudaDoubleTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaDoubleTensor_sumall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaDoubleTensor");
THCudaDoubleTensor_sum(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_prod(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
double arg2 = 0;
THCudaDoubleTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaDoubleTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaDoubleTensor | [*CudaDoubleTensor*] CudaDoubleTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaDoubleTensor_prodall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaDoubleTensor");
THCudaDoubleTensor_prod(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_mean(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
double arg2 = 0;
THCudaDoubleTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaDoubleTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaDoubleTensor | [*CudaDoubleTensor*] CudaDoubleTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaDoubleTensor_meanall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaDoubleTensor");
THCudaDoubleTensor_mean(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_maskedFill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
double arg3 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* CudaByteTensor double", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_maskedFill(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaDoubleTensor_maskedCopy(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaDoubleTensor *arg3 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* CudaByteTensor CudaDoubleTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_maskedCopy(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaDoubleTensor_maskedSelect(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_maskedSelect(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaDoubleTensor_gather(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
THCudaDoubleTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaDoubleTensor *arg6 = NULL;
long arg7 = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaDoubleTensor *dummyIndexTensor = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
THCudaDoubleTensor_checkGPU(cutorch_getstate(L), 1, arg4);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg4);
		  THCudaDoubleTensor_resize(state, arg1, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg6 = (decltype(arg6))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 2;
arg7 = (long)lua_tonumber(L, 2)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaDoubleTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaDouble(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
arg5 = THCudaDoubleTensor_new(cutorch_getstate(L));
THCudaDoubleTensor_checkGPU(cutorch_getstate(L), 1, arg8);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg8);
		  THCudaDoubleTensor_resize(state, arg5, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 4, "torch.CudaDoubleTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg7 = (long)lua_tonumber(L, 3)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaDoubleTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaDouble(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor index CudaLongTensor | [*CudaDoubleTensor*] CudaDoubleTensor index CudaDoubleTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_gather(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaDoubleTensor");
THCudaDoubleTensor_gather(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_scatter(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
THCudaDoubleTensor *arg4 = NULL;
THCudaDoubleTensor *arg5 = NULL;
int arg5_idx = 0;
long arg6 = 0;
THCudaLongTensor *arg7 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaDoubleTensor *dummyIndexTensor = NULL;
THCudaDoubleTensor *arg8 = NULL;
THCudaDoubleTensor *arg9 = NULL;
int arg9_idx = 0;
long arg10 = 0;
THCudaLongTensor *arg11 = NULL;
double arg12 = 0;
THCudaDoubleTensor *arg13 = NULL;
int arg13_idx = 0;
long arg14 = 0;
THCudaLongTensor *arg15 = NULL;
double arg16 = 0;
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaDoubleTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = (long)lua_tonumber(L, 2)-1;
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 4, "torch.CudaDoubleTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg6 = (long)lua_tonumber(L, 2)-1;
arg7 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaDoubleTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg7, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaDouble(default_arg1, arg7, dummyIndexTensor);
indexLongTensor = arg7;
}
else if(narg == 4
&& (arg9 = (decltype(arg9))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 3;
arg9_idx = 1;
arg10 = (long)lua_tonumber(L, 2)-1;
arg12 = (double)lua_tonumber(L, 4);
}
else if(narg == 4
&& (arg13 = (decltype(arg13))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 4;
arg13_idx = 1;
arg14 = (long)lua_tonumber(L, 2)-1;
arg15 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaDoubleTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg15, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaDouble(default_arg1, arg15, dummyIndexTensor);
indexLongTensor = arg15;
arg16 = (double)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* index CudaLongTensor CudaDoubleTensor | *CudaDoubleTensor* index CudaDoubleTensor CudaDoubleTensor | *CudaDoubleTensor* index CudaLongTensor double | *CudaDoubleTensor* index CudaDoubleTensor double", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_scatter(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg5_idx);
THCudaDoubleTensor_scatter(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
else if(argset == 3)
{
lua_pushvalue(L, arg9_idx);
THCudaDoubleTensor_scatterFill(default_arg1,arg9,arg10,arg11,arg12);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg13_idx);
THCudaDoubleTensor_scatterFill(default_arg1,arg13,arg14,arg15,arg16);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_sort(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaDoubleTensor *arg3 = NULL;
long arg4 = 0;
int arg5 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg2_idx = 1;
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg4 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isboolean(L, 2)
)
{
arg5 = lua_toboolean(L, 2);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isboolean(L, 3)
)
{
arg1_idx = 1;
arg5 = lua_toboolean(L, 3);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isboolean(L, 3)
)
{
arg2_idx = 1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg4 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = lua_toboolean(L, 4);
arg4 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = lua_toboolean(L, 5);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] [*CudaLongTensor*] CudaDoubleTensor [index] [boolean]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
if(arg2_idx)
lua_pushvalue(L, arg2_idx);
else
luaT_pushudata(L, arg2, "torch.CudaLongTensor");
THCudaDoubleTensor_sort(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 2;
}

static int m_cutorch_CudaDoubleTensor_squeeze(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
THCudaDoubleTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaDoubleTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
argset = 1;
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor | [*CudaDoubleTensor*] CudaDoubleTensor index", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_squeeze(default_arg1,arg1,arg2);
if(arg1->nDimension == 1 && arg1->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaDoubleTensor_get1d(cutorch_getstate(L), arg1, 0)));
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaDoubleTensor");
{int hasdims = arg4->nDimension > 1;
THCudaDoubleTensor_squeeze1d(default_arg1,arg3,arg4,arg5);
if(!hasdims && arg3->nDimension == 1 && arg3->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaDoubleTensor_get1d(cutorch_getstate(L), arg3, 0)));}
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_abs(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_abs(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_sign(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_sign(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_cat(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
THCudaDoubleTensor *arg3 = NULL;
long arg4 = 0;
THCudaDoubleTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaDoubleTensor **arg6_data = NULL;
long arg6_size = 0;
int arg6_i = 0;
long arg7 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
argset = 1;
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg4 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg4 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 1
&& torch_isnonemptytable(L, 1)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaDoubleTensor**)THAlloc(arg6_size * sizeof(THCudaDoubleTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaDoubleTensor*)luaT_toudata(L, -1, "torch.CudaDoubleTensor")))
    luaL_error(L, "expected CudaDoubleTensor in tensor array");
  lua_pop(L, 1);
}

arg5 = THCudaDoubleTensor_new(cutorch_getstate(L));
arg7 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& torch_isnonemptytable(L, 2)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaDoubleTensor**)THAlloc(arg6_size * sizeof(THCudaDoubleTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaDoubleTensor*)luaT_toudata(L, -1, "torch.CudaDoubleTensor")))
    luaL_error(L, "expected CudaDoubleTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = THCudaDoubleTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& torch_isnonemptytable(L, 1)
&& lua_isnumber(L, 2)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaDoubleTensor**)THAlloc(arg6_size * sizeof(THCudaDoubleTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaDoubleTensor*)luaT_toudata(L, -1, "torch.CudaDoubleTensor")))
    luaL_error(L, "expected CudaDoubleTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 2)-1;
arg5 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& torch_isnonemptytable(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaDoubleTensor**)THAlloc(arg6_size * sizeof(THCudaDoubleTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaDoubleTensor*)luaT_toudata(L, -1, "torch.CudaDoubleTensor")))
    luaL_error(L, "expected CudaDoubleTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaDoubleTensor*] CudaDoubleTensor CudaDoubleTensor [index] | [*CudaDoubleTensor*] {CudaDoubleTensor+} [index]", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaDoubleTensor");
THCudaDoubleTensor_cat(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaDoubleTensor");
THCudaDoubleTensor_catArray(default_arg1,arg5,arg6_data,arg6_size,arg7);
THFree(arg6_data);
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_log(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_log(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_log1p(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_log1p(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_exp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_exp(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_cos(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_cos(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_acos(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_acos(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_cosh(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_cosh(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_sin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_sin(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_asin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_asin(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_sinh(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_sinh(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_tan(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_tan(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_atan(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_atan(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_tanh(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_tanh(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_sqrt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_sqrt(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_rsqrt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_rsqrt(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_sigmoid(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_sigmoid(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_cinv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_cinv(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_ceil(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_ceil(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_floor(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_floor(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_neg(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_neg(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_round(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_round(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_trunc(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_trunc(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_frac(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_frac(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaDoubleTensor_norm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
double arg2 = 2;
double arg3 = 0;
THCudaDoubleTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaDoubleTensor *arg5 = NULL;
double arg6 = 0;
long arg7 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg2 = (double)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg6 = (double)lua_tonumber(L, 2);
arg7 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (double)lua_tonumber(L, 3);
arg7 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaDoubleTensor [double] | [*CudaDoubleTensor*] CudaDoubleTensor double index", type_buf);
}
if(argset == 1)
{
arg3 = THCudaDoubleTensor_normall(default_arg1,arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaDoubleTensor");
THCudaDoubleTensor_norm(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_renorm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
long arg4 = 0;
double arg5 = 0;
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 2);
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = (double)lua_tonumber(L, 4);
arg2 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
&& lua_isnumber(L, 5)
)
{
arg1_idx = 1;
arg3 = (double)lua_tonumber(L, 3);
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = (double)lua_tonumber(L, 5);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor] double index double", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_renorm(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int m_cutorch_CudaDoubleTensor_var(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
double arg2 = 0;
THCudaDoubleTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaDoubleTensor *arg4 = NULL;
long arg5 = 0;
int arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg6 = lua_toboolean(L, 3);
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaDoubleTensor | [*CudaDoubleTensor*] CudaDoubleTensor index [boolean]", type_buf);
}
if(argset == 1)
{
arg2 = THCudaDoubleTensor_varall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaDoubleTensor");
THCudaDoubleTensor_var(default_arg1,arg3,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_std(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
double arg2 = 0;
THCudaDoubleTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaDoubleTensor *arg4 = NULL;
long arg5 = 0;
int arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg6 = lua_toboolean(L, 3);
arg3 = THCudaDoubleTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaDoubleTensor | [*CudaDoubleTensor*] CudaDoubleTensor index [boolean]", type_buf);
}
if(argset == 1)
{
arg2 = THCudaDoubleTensor_stdall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaDoubleTensor");
THCudaDoubleTensor_std(default_arg1,arg3,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_lerp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaDoubleTensor *arg2 = NULL;
THCudaDoubleTensor *arg3 = NULL;
double arg4 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg4 = (double)lua_tonumber(L, 3);
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaDoubleTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = (double)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* [CudaDoubleTensor] CudaDoubleTensor double", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_lerp(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int m_cutorch_CudaDoubleTensor_mv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
double arg2 = 1;
THCudaDoubleTensor *arg3 = NULL;
double arg4 = 1;
THCudaDoubleTensor *arg5 = NULL;
THCudaDoubleTensor *arg6 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* CudaDoubleTensor~2D CudaDoubleTensor~1D", type_buf);
}
THCudaDoubleTensor_zero(cutorch_getstate(L), arg1);
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_addmv(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int m_cutorch_CudaDoubleTensor_mm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
double arg2 = 0;
THCudaDoubleTensor *arg3 = NULL;
double arg4 = 1;
THCudaDoubleTensor *arg5 = NULL;
THCudaDoubleTensor *arg6 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg6->nDimension == 2)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* CudaDoubleTensor~2D CudaDoubleTensor~2D", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_addmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int m_cutorch_CudaDoubleTensor_bmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
double arg2 = 0;
THCudaDoubleTensor *arg3 = NULL;
double arg4 = 1;
THCudaDoubleTensor *arg5 = NULL;
THCudaDoubleTensor *arg6 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* CudaDoubleTensor~3D CudaDoubleTensor~3D", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_baddbmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int m_cutorch_CudaDoubleTensor_ger(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
double arg2 = 1;
THCudaDoubleTensor *arg3 = NULL;
double arg4 = 1;
THCudaDoubleTensor *arg5 = NULL;
THCudaDoubleTensor *arg6 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor* CudaDoubleTensor~1D CudaDoubleTensor~1D", type_buf);
}
THCudaDoubleTensor_zero(cutorch_getstate(L), arg1);
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_addr(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int m_cutorch_CudaDoubleTensor_addmv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
double arg2 = 1;
THCudaDoubleTensor *arg3 = NULL;
double arg4 = 1;
THCudaDoubleTensor *arg5 = NULL;
THCudaDoubleTensor *arg6 = NULL;
THCudaDoubleTensor *arg7 = NULL;
int arg7_idx = 0;
double arg8 = 0;
THCudaDoubleTensor *arg9 = NULL;
double arg10 = 0;
THCudaDoubleTensor *arg11 = NULL;
THCudaDoubleTensor *arg12 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg1->nDimension == 1)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
arg3 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg1->nDimension == 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 1)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg1->nDimension == 1)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (double)lua_tonumber(L, 2);
arg3 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg1->nDimension == 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 1)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (double)lua_tonumber(L, 3);
}
else if(narg == 5
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg7->nDimension == 1)
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg11->nDimension == 2)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg12->nDimension == 1)
)
{
argset = 2;
arg7_idx = 1;
arg8 = (double)lua_tonumber(L, 2);
arg10 = (double)lua_tonumber(L, 3);
arg9 = arg7;
}
else if(narg == 6
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg7->nDimension == 1)
&& lua_isnumber(L, 2)
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg9->nDimension == 1)
&& lua_isnumber(L, 4)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg11->nDimension == 2)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 6, "torch.CudaDoubleTensor")) && (arg12->nDimension == 1)
)
{
argset = 2;
arg7_idx = 1;
arg8 = (double)lua_tonumber(L, 2);
arg10 = (double)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor~1D* [CudaDoubleTensor~1D] [double] CudaDoubleTensor~2D CudaDoubleTensor~1D | *CudaDoubleTensor~1D* double [CudaDoubleTensor~1D] double CudaDoubleTensor~2D CudaDoubleTensor~1D", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_addmv(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg7_idx);
THCudaDoubleTensor_addmv(default_arg1,arg7,arg8,arg9,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_addmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
double arg2 = 1;
THCudaDoubleTensor *arg3 = NULL;
double arg4 = 1;
THCudaDoubleTensor *arg5 = NULL;
THCudaDoubleTensor *arg6 = NULL;
THCudaDoubleTensor *arg7 = NULL;
int arg7_idx = 0;
double arg8 = 0;
THCudaDoubleTensor *arg9 = NULL;
double arg10 = 0;
THCudaDoubleTensor *arg11 = NULL;
THCudaDoubleTensor *arg12 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg1->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg6->nDimension == 2)
)
{
argset = 1;
arg1_idx = 1;
arg3 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg1->nDimension == 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 2)
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg1->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 2)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (double)lua_tonumber(L, 2);
arg3 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg1->nDimension == 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg6->nDimension == 2)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (double)lua_tonumber(L, 3);
}
else if(narg == 5
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg7->nDimension == 2)
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg11->nDimension == 2)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg12->nDimension == 2)
)
{
argset = 2;
arg7_idx = 1;
arg8 = (double)lua_tonumber(L, 2);
arg10 = (double)lua_tonumber(L, 3);
arg9 = arg7;
}
else if(narg == 6
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg7->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg9->nDimension == 2)
&& lua_isnumber(L, 4)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg11->nDimension == 2)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 6, "torch.CudaDoubleTensor")) && (arg12->nDimension == 2)
)
{
argset = 2;
arg7_idx = 1;
arg8 = (double)lua_tonumber(L, 2);
arg10 = (double)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor~2D* [CudaDoubleTensor~2D] [double] CudaDoubleTensor~2D CudaDoubleTensor~2D | *CudaDoubleTensor~2D* double [CudaDoubleTensor~2D] double CudaDoubleTensor~2D CudaDoubleTensor~2D", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_addmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg7_idx);
THCudaDoubleTensor_addmm(default_arg1,arg7,arg8,arg9,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_addr(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
double arg2 = 1;
THCudaDoubleTensor *arg3 = NULL;
double arg4 = 1;
THCudaDoubleTensor *arg5 = NULL;
THCudaDoubleTensor *arg6 = NULL;
THCudaDoubleTensor *arg7 = NULL;
int arg7_idx = 0;
double arg8 = 0;
THCudaDoubleTensor *arg9 = NULL;
double arg10 = 0;
THCudaDoubleTensor *arg11 = NULL;
THCudaDoubleTensor *arg12 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg1->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
arg3 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg1->nDimension == 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg1->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (double)lua_tonumber(L, 2);
arg3 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg1->nDimension == 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (double)lua_tonumber(L, 3);
}
else if(narg == 5
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg7->nDimension == 2)
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg11->nDimension == 1)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg12->nDimension == 1)
)
{
argset = 2;
arg7_idx = 1;
arg8 = (double)lua_tonumber(L, 2);
arg10 = (double)lua_tonumber(L, 3);
arg9 = arg7;
}
else if(narg == 6
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg7->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg9->nDimension == 2)
&& lua_isnumber(L, 4)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg11->nDimension == 1)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 6, "torch.CudaDoubleTensor")) && (arg12->nDimension == 1)
)
{
argset = 2;
arg7_idx = 1;
arg8 = (double)lua_tonumber(L, 2);
arg10 = (double)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor~2D* [CudaDoubleTensor~2D] [double] CudaDoubleTensor~1D CudaDoubleTensor~1D | *CudaDoubleTensor~2D* double [CudaDoubleTensor~2D] double CudaDoubleTensor~1D CudaDoubleTensor~1D", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_addr(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg7_idx);
THCudaDoubleTensor_addr(default_arg1,arg7,arg8,arg9,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_baddbmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
double arg2 = 1;
THCudaDoubleTensor *arg3 = NULL;
double arg4 = 1;
THCudaDoubleTensor *arg5 = NULL;
THCudaDoubleTensor *arg6 = NULL;
THCudaDoubleTensor *arg7 = NULL;
int arg7_idx = 0;
double arg8 = 0;
THCudaDoubleTensor *arg9 = NULL;
double arg10 = 0;
THCudaDoubleTensor *arg11 = NULL;
THCudaDoubleTensor *arg12 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg1->nDimension == 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg1->nDimension == 3)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg1->nDimension == 3)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (double)lua_tonumber(L, 2);
arg3 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg1->nDimension == 3)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 3)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (double)lua_tonumber(L, 3);
}
else if(narg == 5
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg7->nDimension == 3)
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg11->nDimension == 3)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg12->nDimension == 3)
)
{
argset = 2;
arg7_idx = 1;
arg8 = (double)lua_tonumber(L, 2);
arg10 = (double)lua_tonumber(L, 3);
arg9 = arg7;
}
else if(narg == 6
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg7->nDimension == 3)
&& lua_isnumber(L, 2)
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg9->nDimension == 3)
&& lua_isnumber(L, 4)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg11->nDimension == 3)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 6, "torch.CudaDoubleTensor")) && (arg12->nDimension == 3)
)
{
argset = 2;
arg7_idx = 1;
arg8 = (double)lua_tonumber(L, 2);
arg10 = (double)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor~3D* [CudaDoubleTensor~3D] [double] CudaDoubleTensor~3D CudaDoubleTensor~3D | *CudaDoubleTensor~3D* double [CudaDoubleTensor~3D] double CudaDoubleTensor~3D CudaDoubleTensor~3D", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_baddbmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg7_idx);
THCudaDoubleTensor_baddbmm(default_arg1,arg7,arg8,arg9,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_addbmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaDoubleTensor *arg1 = NULL;
int arg1_idx = 0;
double arg2 = 1;
THCudaDoubleTensor *arg3 = NULL;
double arg4 = 1;
THCudaDoubleTensor *arg5 = NULL;
THCudaDoubleTensor *arg6 = NULL;
THCudaDoubleTensor *arg7 = NULL;
int arg7_idx = 0;
double arg8 = 0;
THCudaDoubleTensor *arg9 = NULL;
double arg10 = 0;
THCudaDoubleTensor *arg11 = NULL;
THCudaDoubleTensor *arg12 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg1->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg1->nDimension == 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg1->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (double)lua_tonumber(L, 2);
arg3 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg1->nDimension == 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaDoubleTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (double)lua_tonumber(L, 3);
}
else if(narg == 5
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg7->nDimension == 2)
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 4, "torch.CudaDoubleTensor")) && (arg11->nDimension == 3)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg12->nDimension == 3)
)
{
argset = 2;
arg7_idx = 1;
arg8 = (double)lua_tonumber(L, 2);
arg10 = (double)lua_tonumber(L, 3);
arg9 = arg7;
}
else if(narg == 6
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaDoubleTensor")) && (arg7->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaDoubleTensor")) && (arg9->nDimension == 2)
&& lua_isnumber(L, 4)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 5, "torch.CudaDoubleTensor")) && (arg11->nDimension == 3)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 6, "torch.CudaDoubleTensor")) && (arg12->nDimension == 3)
)
{
argset = 2;
arg7_idx = 1;
arg8 = (double)lua_tonumber(L, 2);
arg10 = (double)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaDoubleTensor~2D* [CudaDoubleTensor~2D] [double] CudaDoubleTensor~3D CudaDoubleTensor~3D | *CudaDoubleTensor~2D* double [CudaDoubleTensor~2D] double CudaDoubleTensor~3D CudaDoubleTensor~3D", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaDoubleTensor_addbmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg7_idx);
THCudaDoubleTensor_addbmm(default_arg1,arg7,arg8,arg9,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaDoubleTensor_dot(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaDoubleTensor *arg1 = NULL;
THCudaDoubleTensor *arg2 = NULL;
double arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaDoubleTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaDoubleTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaDoubleTensor CudaDoubleTensor", type_buf);
}
arg3 = THCudaDoubleTensor_dot(default_arg1,arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}

static const struct luaL_Reg m_cutorch_CudaDoubleTensorMath__ [] = {
{"fill", m_cutorch_CudaDoubleTensor_fill},
{"zero", m_cutorch_CudaDoubleTensor_zero},
{"zeros", m_cutorch_CudaDoubleTensor_zeros},
{"ones", m_cutorch_CudaDoubleTensor_ones},
{"reshape", m_cutorch_CudaDoubleTensor_reshape},
{"numel", m_cutorch_CudaDoubleTensor_numel},
{"add", m_cutorch_CudaDoubleTensor_add},
{"csub", m_cutorch_CudaDoubleTensor_csub},
{"mul", m_cutorch_CudaDoubleTensor_mul},
{"clamp", m_cutorch_CudaDoubleTensor_clamp},
{"cross", m_cutorch_CudaDoubleTensor_cross},
{"div", m_cutorch_CudaDoubleTensor_div},
{"cmul", m_cutorch_CudaDoubleTensor_cmul},
{"cpow", m_cutorch_CudaDoubleTensor_cpow},
{"cdiv", m_cutorch_CudaDoubleTensor_cdiv},
{"addcmul", m_cutorch_CudaDoubleTensor_addcmul},
{"addcdiv", m_cutorch_CudaDoubleTensor_addcdiv},
{"min", m_cutorch_CudaDoubleTensor_min},
{"max", m_cutorch_CudaDoubleTensor_max},
{"cmin", m_cutorch_CudaDoubleTensor_cmin},
{"cmax", m_cutorch_CudaDoubleTensor_cmax},
{"lt", m_cutorch_CudaDoubleTensor_lt},
{"gt", m_cutorch_CudaDoubleTensor_gt},
{"le", m_cutorch_CudaDoubleTensor_le},
{"ge", m_cutorch_CudaDoubleTensor_ge},
{"eq", m_cutorch_CudaDoubleTensor_eq},
{"ne", m_cutorch_CudaDoubleTensor_ne},
{"sum", m_cutorch_CudaDoubleTensor_sum},
{"prod", m_cutorch_CudaDoubleTensor_prod},
{"mean", m_cutorch_CudaDoubleTensor_mean},
{"maskedFill", m_cutorch_CudaDoubleTensor_maskedFill},
{"maskedCopy", m_cutorch_CudaDoubleTensor_maskedCopy},
{"maskedSelect", m_cutorch_CudaDoubleTensor_maskedSelect},
{"gather", m_cutorch_CudaDoubleTensor_gather},
{"scatter", m_cutorch_CudaDoubleTensor_scatter},
{"sort", m_cutorch_CudaDoubleTensor_sort},
{"squeeze", m_cutorch_CudaDoubleTensor_squeeze},
{"abs", m_cutorch_CudaDoubleTensor_abs},
{"sign", m_cutorch_CudaDoubleTensor_sign},
{"cat", m_cutorch_CudaDoubleTensor_cat},
{"log", m_cutorch_CudaDoubleTensor_log},
{"log1p", m_cutorch_CudaDoubleTensor_log1p},
{"exp", m_cutorch_CudaDoubleTensor_exp},
{"cos", m_cutorch_CudaDoubleTensor_cos},
{"acos", m_cutorch_CudaDoubleTensor_acos},
{"cosh", m_cutorch_CudaDoubleTensor_cosh},
{"sin", m_cutorch_CudaDoubleTensor_sin},
{"asin", m_cutorch_CudaDoubleTensor_asin},
{"sinh", m_cutorch_CudaDoubleTensor_sinh},
{"tan", m_cutorch_CudaDoubleTensor_tan},
{"atan", m_cutorch_CudaDoubleTensor_atan},
{"tanh", m_cutorch_CudaDoubleTensor_tanh},
{"sqrt", m_cutorch_CudaDoubleTensor_sqrt},
{"rsqrt", m_cutorch_CudaDoubleTensor_rsqrt},
{"sigmoid", m_cutorch_CudaDoubleTensor_sigmoid},
{"cinv", m_cutorch_CudaDoubleTensor_cinv},
{"ceil", m_cutorch_CudaDoubleTensor_ceil},
{"floor", m_cutorch_CudaDoubleTensor_floor},
{"neg", m_cutorch_CudaDoubleTensor_neg},
{"round", m_cutorch_CudaDoubleTensor_round},
{"trunc", m_cutorch_CudaDoubleTensor_trunc},
{"frac", m_cutorch_CudaDoubleTensor_frac},
{"norm", m_cutorch_CudaDoubleTensor_norm},
{"renorm", m_cutorch_CudaDoubleTensor_renorm},
{"var", m_cutorch_CudaDoubleTensor_var},
{"std", m_cutorch_CudaDoubleTensor_std},
{"lerp", m_cutorch_CudaDoubleTensor_lerp},
{"mv", m_cutorch_CudaDoubleTensor_mv},
{"mm", m_cutorch_CudaDoubleTensor_mm},
{"bmm", m_cutorch_CudaDoubleTensor_bmm},
{"ger", m_cutorch_CudaDoubleTensor_ger},
{"addmv", m_cutorch_CudaDoubleTensor_addmv},
{"addmm", m_cutorch_CudaDoubleTensor_addmm},
{"addr", m_cutorch_CudaDoubleTensor_addr},
{"baddbmm", m_cutorch_CudaDoubleTensor_baddbmm},
{"addbmm", m_cutorch_CudaDoubleTensor_addbmm},
{"dot", m_cutorch_CudaDoubleTensor_dot},
{NULL, NULL}
};

static const struct luaL_Reg cutorch_CudaDoubleTensorMath__ [] = {
{"fill", cutorch_CudaDoubleTensor_fill},
{"zero", cutorch_CudaDoubleTensor_zero},
{"zeros", cutorch_CudaDoubleTensor_zeros},
{"ones", cutorch_CudaDoubleTensor_ones},
{"reshape", cutorch_CudaDoubleTensor_reshape},
{"numel", cutorch_CudaDoubleTensor_numel},
{"add", cutorch_CudaDoubleTensor_add},
{"csub", cutorch_CudaDoubleTensor_csub},
{"mul", cutorch_CudaDoubleTensor_mul},
{"clamp", cutorch_CudaDoubleTensor_clamp},
{"cross", cutorch_CudaDoubleTensor_cross},
{"div", cutorch_CudaDoubleTensor_div},
{"cmul", cutorch_CudaDoubleTensor_cmul},
{"cpow", cutorch_CudaDoubleTensor_cpow},
{"cdiv", cutorch_CudaDoubleTensor_cdiv},
{"addcmul", cutorch_CudaDoubleTensor_addcmul},
{"addcdiv", cutorch_CudaDoubleTensor_addcdiv},
{"min", cutorch_CudaDoubleTensor_min},
{"max", cutorch_CudaDoubleTensor_max},
{"cmin", cutorch_CudaDoubleTensor_cmin},
{"cmax", cutorch_CudaDoubleTensor_cmax},
{"lt", cutorch_CudaDoubleTensor_lt},
{"gt", cutorch_CudaDoubleTensor_gt},
{"le", cutorch_CudaDoubleTensor_le},
{"ge", cutorch_CudaDoubleTensor_ge},
{"eq", cutorch_CudaDoubleTensor_eq},
{"ne", cutorch_CudaDoubleTensor_ne},
{"sum", cutorch_CudaDoubleTensor_sum},
{"prod", cutorch_CudaDoubleTensor_prod},
{"mean", cutorch_CudaDoubleTensor_mean},
{"maskedFill", cutorch_CudaDoubleTensor_maskedFill},
{"maskedCopy", cutorch_CudaDoubleTensor_maskedCopy},
{"maskedSelect", cutorch_CudaDoubleTensor_maskedSelect},
{"gather", cutorch_CudaDoubleTensor_gather},
{"scatter", cutorch_CudaDoubleTensor_scatter},
{"sort", cutorch_CudaDoubleTensor_sort},
{"squeeze", cutorch_CudaDoubleTensor_squeeze},
{"abs", cutorch_CudaDoubleTensor_abs},
{"sign", cutorch_CudaDoubleTensor_sign},
{"cat", cutorch_CudaDoubleTensor_cat},
{"log", cutorch_CudaDoubleTensor_log},
{"log1p", cutorch_CudaDoubleTensor_log1p},
{"exp", cutorch_CudaDoubleTensor_exp},
{"cos", cutorch_CudaDoubleTensor_cos},
{"acos", cutorch_CudaDoubleTensor_acos},
{"cosh", cutorch_CudaDoubleTensor_cosh},
{"sin", cutorch_CudaDoubleTensor_sin},
{"asin", cutorch_CudaDoubleTensor_asin},
{"sinh", cutorch_CudaDoubleTensor_sinh},
{"tan", cutorch_CudaDoubleTensor_tan},
{"atan", cutorch_CudaDoubleTensor_atan},
{"tanh", cutorch_CudaDoubleTensor_tanh},
{"sqrt", cutorch_CudaDoubleTensor_sqrt},
{"rsqrt", cutorch_CudaDoubleTensor_rsqrt},
{"sigmoid", cutorch_CudaDoubleTensor_sigmoid},
{"cinv", cutorch_CudaDoubleTensor_cinv},
{"ceil", cutorch_CudaDoubleTensor_ceil},
{"floor", cutorch_CudaDoubleTensor_floor},
{"neg", cutorch_CudaDoubleTensor_neg},
{"round", cutorch_CudaDoubleTensor_round},
{"trunc", cutorch_CudaDoubleTensor_trunc},
{"frac", cutorch_CudaDoubleTensor_frac},
{"norm", cutorch_CudaDoubleTensor_norm},
{"renorm", cutorch_CudaDoubleTensor_renorm},
{"var", cutorch_CudaDoubleTensor_var},
{"std", cutorch_CudaDoubleTensor_std},
{"lerp", cutorch_CudaDoubleTensor_lerp},
{"mv", cutorch_CudaDoubleTensor_mv},
{"mm", cutorch_CudaDoubleTensor_mm},
{"bmm", cutorch_CudaDoubleTensor_bmm},
{"ger", cutorch_CudaDoubleTensor_ger},
{"addmv", cutorch_CudaDoubleTensor_addmv},
{"addmm", cutorch_CudaDoubleTensor_addmm},
{"addr", cutorch_CudaDoubleTensor_addr},
{"baddbmm", cutorch_CudaDoubleTensor_baddbmm},
{"addbmm", cutorch_CudaDoubleTensor_addbmm},
{"dot", cutorch_CudaDoubleTensor_dot},
{NULL, NULL}
};

void cutorch_CudaDoubleTensorMath_init(lua_State *L)
{
  luaT_pushmetatable(L, "torch.CudaDoubleTensor");

  /* register methods */
  luaL_setfuncs(L, m_cutorch_CudaDoubleTensorMath__, 0);

  /* register functions into the "torch" field of the tensor metaclass */
  lua_pushstring(L, "torch");
  lua_newtable(L);
  luaL_setfuncs(L, cutorch_CudaDoubleTensorMath__, 0);
  lua_rawset(L, -3);
  lua_pop(L, 1);
}

#ifdef CUDA_HALF_TENSOR
static int cutorch_CudaHalfTensor_fill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
half arg2 = THC_float2half((float) 0);
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = THC_float2half((float) lua_tonumber(L, 2));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* half", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_fill(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_zero(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor*", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_zero(default_arg1,arg1);
return 1;
}

static int cutorch_CudaHalfTensor_zeros(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 1
&& cutorch_islongargs(L, 1)
)
{
arg2 = cutorch_checklongargs(L, 1);
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_zeros(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int cutorch_CudaHalfTensor_ones(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 1
&& cutorch_islongargs(L, 1)
)
{
arg2 = cutorch_checklongargs(L, 1);
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_ones(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int cutorch_CudaHalfTensor_reshape(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
THLongStorage *arg3 = NULL;
if(narg >= 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg3 = cutorch_checklongargs(L, 2);
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg >= 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& cutorch_islongargs(L, 3)
)
{
arg1_idx = 1;
arg3 = cutorch_checklongargs(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_reshape(default_arg1,arg1,arg2,arg3);
THLongStorage_free(arg3);
return 1;
}

static int cutorch_CudaHalfTensor_numel(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
ptrdiff_t arg2 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaHalfTensor", type_buf);
}
arg2 = THCudaHalfTensor_numel(default_arg1,arg1);
lua_pushinteger(L, (lua_Integer)arg2);
return 1;
}

static int cutorch_CudaHalfTensor_add(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
THCudaHalfTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
half arg6 = THC_float2half((float) 1);
THCudaHalfTensor *arg7 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 2;
arg4 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 2;
arg6 = THC_float2half((float) lua_tonumber(L, 2));
arg4 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaHalfTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 3));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor half | [*CudaHalfTensor*] CudaHalfTensor [half] CudaHalfTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_add(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaHalfTensor");
THCudaHalfTensor_cadd(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int cutorch_CudaHalfTensor_csub(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
THCudaHalfTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
half arg6 = THC_float2half((float) 1);
THCudaHalfTensor *arg7 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 2;
arg4 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 2;
arg6 = THC_float2half((float) lua_tonumber(L, 2));
arg4 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaHalfTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 3));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor half | [*CudaHalfTensor*] CudaHalfTensor [half] CudaHalfTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_sub(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaHalfTensor");
THCudaHalfTensor_csub(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int cutorch_CudaHalfTensor_mul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor half", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_mul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaHalfTensor_clamp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
half arg4 = THC_float2half((float) 0);
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg4 = THC_float2half((float) lua_tonumber(L, 3));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
arg4 = THC_float2half((float) lua_tonumber(L, 4));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor half half", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_clamp(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaHalfTensor_cross(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
THCudaHalfTensor *arg3 = NULL;
long arg4 = -1;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor CudaHalfTensor [index]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_cross(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaHalfTensor_div(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor half", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_div(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaHalfTensor_cmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
THCudaHalfTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_cmul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaHalfTensor_cpow(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
THCudaHalfTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_cpow(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaHalfTensor_cdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
THCudaHalfTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_cdiv(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaHalfTensor_addcmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 1);
THCudaHalfTensor *arg4 = NULL;
THCudaHalfTensor *arg5 = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor"))
)
{
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor [half] CudaHalfTensor CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_addcmul(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int cutorch_CudaHalfTensor_addcdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 1);
THCudaHalfTensor *arg4 = NULL;
THCudaHalfTensor *arg5 = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor"))
)
{
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor [half] CudaHalfTensor CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_addcdiv(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int cutorch_CudaHalfTensor_min(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
half arg2 = THC_float2half((float) 0);
THCudaHalfTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaHalfTensor | [*CudaHalfTensor*] [*CudaLongTensor*] CudaHalfTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaHalfTensor_minall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number) THC_half2float(arg2));
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaHalfTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaHalfTensor_min(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int cutorch_CudaHalfTensor_max(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
half arg2 = THC_float2half((float) 0);
THCudaHalfTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaHalfTensor | [*CudaHalfTensor*] [*CudaLongTensor*] CudaHalfTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaHalfTensor_maxall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number) THC_half2float(arg2));
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaHalfTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaHalfTensor_max(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int cutorch_CudaHalfTensor_cmin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
THCudaHalfTensor *arg3 = NULL;
THCudaHalfTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
half arg6 = THC_float2half((float) 0);
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 1;
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = THC_float2half((float) lua_tonumber(L, 2));
arg4 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 3));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor CudaHalfTensor | [*CudaHalfTensor*] CudaHalfTensor half", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_cmin(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaHalfTensor");
THCudaHalfTensor_cminValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaHalfTensor_cmax(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
THCudaHalfTensor *arg3 = NULL;
THCudaHalfTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
half arg6 = THC_float2half((float) 0);
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 1;
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = THC_float2half((float) lua_tonumber(L, 2));
arg4 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 3));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor CudaHalfTensor | [*CudaHalfTensor*] CudaHalfTensor half", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_cmax(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaHalfTensor");
THCudaHalfTensor_cmaxValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaHalfTensor_lt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
THCudaHalfTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
half arg6 = THC_float2half((float) 0);
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaHalfTensor *arg8 = NULL;
THCudaHalfTensor *arg9 = NULL;
THCudaHalfTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaHalfTensor *arg11 = NULL;
THCudaHalfTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaHalfTensor half | *CudaHalfTensor* CudaHalfTensor half | [*CudaByteTensor*] CudaHalfTensor CudaHalfTensor | *CudaHalfTensor* CudaHalfTensor CudaHalfTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaHalfTensor_ltValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaHalfTensor_ltValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaHalfTensor_ltTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaHalfTensor_ltTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaHalfTensor_gt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
THCudaHalfTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
half arg6 = THC_float2half((float) 0);
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaHalfTensor *arg8 = NULL;
THCudaHalfTensor *arg9 = NULL;
THCudaHalfTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaHalfTensor *arg11 = NULL;
THCudaHalfTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaHalfTensor half | *CudaHalfTensor* CudaHalfTensor half | [*CudaByteTensor*] CudaHalfTensor CudaHalfTensor | *CudaHalfTensor* CudaHalfTensor CudaHalfTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaHalfTensor_gtValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaHalfTensor_gtValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaHalfTensor_gtTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaHalfTensor_gtTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaHalfTensor_le(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
THCudaHalfTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
half arg6 = THC_float2half((float) 0);
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaHalfTensor *arg8 = NULL;
THCudaHalfTensor *arg9 = NULL;
THCudaHalfTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaHalfTensor *arg11 = NULL;
THCudaHalfTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaHalfTensor half | *CudaHalfTensor* CudaHalfTensor half | [*CudaByteTensor*] CudaHalfTensor CudaHalfTensor | *CudaHalfTensor* CudaHalfTensor CudaHalfTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaHalfTensor_leValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaHalfTensor_leValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaHalfTensor_leTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaHalfTensor_leTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaHalfTensor_ge(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
THCudaHalfTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
half arg6 = THC_float2half((float) 0);
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaHalfTensor *arg8 = NULL;
THCudaHalfTensor *arg9 = NULL;
THCudaHalfTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaHalfTensor *arg11 = NULL;
THCudaHalfTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaHalfTensor half | *CudaHalfTensor* CudaHalfTensor half | [*CudaByteTensor*] CudaHalfTensor CudaHalfTensor | *CudaHalfTensor* CudaHalfTensor CudaHalfTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaHalfTensor_geValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaHalfTensor_geValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaHalfTensor_geTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaHalfTensor_geTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaHalfTensor_eq(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
THCudaHalfTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
half arg6 = THC_float2half((float) 0);
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaHalfTensor *arg8 = NULL;
THCudaHalfTensor *arg9 = NULL;
THCudaHalfTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaHalfTensor *arg11 = NULL;
THCudaHalfTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaHalfTensor half | *CudaHalfTensor* CudaHalfTensor half | [*CudaByteTensor*] CudaHalfTensor CudaHalfTensor | *CudaHalfTensor* CudaHalfTensor CudaHalfTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaHalfTensor_eqValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaHalfTensor_eqValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaHalfTensor_eqTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaHalfTensor_eqTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaHalfTensor_ne(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
THCudaHalfTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
half arg6 = THC_float2half((float) 0);
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaHalfTensor *arg8 = NULL;
THCudaHalfTensor *arg9 = NULL;
THCudaHalfTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaHalfTensor *arg11 = NULL;
THCudaHalfTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaHalfTensor half | *CudaHalfTensor* CudaHalfTensor half | [*CudaByteTensor*] CudaHalfTensor CudaHalfTensor | *CudaHalfTensor* CudaHalfTensor CudaHalfTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaHalfTensor_neValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaHalfTensor_neValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaHalfTensor_neTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaHalfTensor_neTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaHalfTensor_sum(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
float arg2 = 0;
THCudaHalfTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaHalfTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaHalfTensor | [*CudaHalfTensor*] CudaHalfTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaHalfTensor_sumall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaHalfTensor");
THCudaHalfTensor_sum(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaHalfTensor_prod(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
float arg2 = 0;
THCudaHalfTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaHalfTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaHalfTensor | [*CudaHalfTensor*] CudaHalfTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaHalfTensor_prodall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaHalfTensor");
THCudaHalfTensor_prod(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaHalfTensor_mean(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
float arg2 = 0;
THCudaHalfTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaHalfTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaHalfTensor | [*CudaHalfTensor*] CudaHalfTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaHalfTensor_meanall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaHalfTensor");
THCudaHalfTensor_mean(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaHalfTensor_maskedFill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* CudaByteTensor half", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_maskedFill(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaHalfTensor_maskedCopy(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaHalfTensor *arg3 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* CudaByteTensor CudaHalfTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_maskedCopy(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaHalfTensor_maskedSelect(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_maskedSelect(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaHalfTensor_gather(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
THCudaHalfTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaHalfTensor *arg6 = NULL;
long arg7 = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaHalfTensor *dummyIndexTensor = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
THCudaHalfTensor_checkGPU(cutorch_getstate(L), 1, arg4);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg4);
		  THCudaHalfTensor_resize(state, arg1, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg6 = (decltype(arg6))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 2;
arg7 = (long)lua_tonumber(L, 2)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaHalfTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaHalf(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
arg5 = THCudaHalfTensor_new(cutorch_getstate(L));
THCudaHalfTensor_checkGPU(cutorch_getstate(L), 1, arg8);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg8);
		  THCudaHalfTensor_resize(state, arg5, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 4, "torch.CudaHalfTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg7 = (long)lua_tonumber(L, 3)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaHalfTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaHalf(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor index CudaLongTensor | [*CudaHalfTensor*] CudaHalfTensor index CudaHalfTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_gather(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaHalfTensor");
THCudaHalfTensor_gather(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int cutorch_CudaHalfTensor_scatter(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
THCudaHalfTensor *arg4 = NULL;
THCudaHalfTensor *arg5 = NULL;
int arg5_idx = 0;
long arg6 = 0;
THCudaLongTensor *arg7 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaHalfTensor *dummyIndexTensor = NULL;
THCudaHalfTensor *arg8 = NULL;
THCudaHalfTensor *arg9 = NULL;
int arg9_idx = 0;
long arg10 = 0;
THCudaLongTensor *arg11 = NULL;
half arg12 = THC_float2half((float) 0);
THCudaHalfTensor *arg13 = NULL;
int arg13_idx = 0;
long arg14 = 0;
THCudaLongTensor *arg15 = NULL;
half arg16 = THC_float2half((float) 0);
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaHalfTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = (long)lua_tonumber(L, 2)-1;
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 4, "torch.CudaHalfTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg6 = (long)lua_tonumber(L, 2)-1;
arg7 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaHalfTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg7, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaHalf(default_arg1, arg7, dummyIndexTensor);
indexLongTensor = arg7;
}
else if(narg == 4
&& (arg9 = (decltype(arg9))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 3;
arg9_idx = 1;
arg10 = (long)lua_tonumber(L, 2)-1;
arg12 = THC_float2half((float) lua_tonumber(L, 4));
}
else if(narg == 4
&& (arg13 = (decltype(arg13))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 4;
arg13_idx = 1;
arg14 = (long)lua_tonumber(L, 2)-1;
arg15 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaHalfTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg15, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaHalf(default_arg1, arg15, dummyIndexTensor);
indexLongTensor = arg15;
arg16 = THC_float2half((float) lua_tonumber(L, 4));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* index CudaLongTensor CudaHalfTensor | *CudaHalfTensor* index CudaHalfTensor CudaHalfTensor | *CudaHalfTensor* index CudaLongTensor half | *CudaHalfTensor* index CudaHalfTensor half", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_scatter(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg5_idx);
THCudaHalfTensor_scatter(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
else if(argset == 3)
{
lua_pushvalue(L, arg9_idx);
THCudaHalfTensor_scatterFill(default_arg1,arg9,arg10,arg11,arg12);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg13_idx);
THCudaHalfTensor_scatterFill(default_arg1,arg13,arg14,arg15,arg16);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int cutorch_CudaHalfTensor_sort(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaHalfTensor *arg3 = NULL;
long arg4 = 0;
int arg5 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg2_idx = 1;
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
arg4 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isboolean(L, 2)
)
{
arg5 = lua_toboolean(L, 2);
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isboolean(L, 3)
)
{
arg1_idx = 1;
arg5 = lua_toboolean(L, 3);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isboolean(L, 3)
)
{
arg2_idx = 1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
arg4 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = lua_toboolean(L, 4);
arg4 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = lua_toboolean(L, 5);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] [*CudaLongTensor*] CudaHalfTensor [index] [boolean]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
if(arg2_idx)
lua_pushvalue(L, arg2_idx);
else
luaT_pushudata(L, arg2, "torch.CudaLongTensor");
THCudaHalfTensor_sort(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 2;
}

static int cutorch_CudaHalfTensor_squeeze(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
THCudaHalfTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaHalfTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
argset = 1;
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor | [*CudaHalfTensor*] CudaHalfTensor index", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_squeeze(default_arg1,arg1,arg2);
if(arg1->nDimension == 1 && arg1->size[0] == 1)
lua_pushnumber(L, (lua_Number)THC_half2float(THCudaHalfTensor_get1d(cutorch_getstate(L), arg1, 0)));
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaHalfTensor");
{int hasdims = arg4->nDimension > 1;
THCudaHalfTensor_squeeze1d(default_arg1,arg3,arg4,arg5);
if(!hasdims && arg3->nDimension == 1 && arg3->size[0] == 1)
lua_pushnumber(L, (lua_Number)THC_half2float(THCudaHalfTensor_get1d(cutorch_getstate(L), arg3, 0)));}
return 1;
}
return 0;
}

static int cutorch_CudaHalfTensor_abs(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_abs(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_sign(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_sign(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_cat(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
THCudaHalfTensor *arg3 = NULL;
long arg4 = 0;
THCudaHalfTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaHalfTensor **arg6_data = NULL;
long arg6_size = 0;
int arg6_i = 0;
long arg7 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 1;
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
arg4 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg4 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 1
&& torch_isnonemptytable(L, 1)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaHalfTensor**)THAlloc(arg6_size * sizeof(THCudaHalfTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaHalfTensor*)luaT_toudata(L, -1, "torch.CudaHalfTensor")))
    luaL_error(L, "expected CudaHalfTensor in tensor array");
  lua_pop(L, 1);
}

arg5 = THCudaHalfTensor_new(cutorch_getstate(L));
arg7 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& torch_isnonemptytable(L, 2)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaHalfTensor**)THAlloc(arg6_size * sizeof(THCudaHalfTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaHalfTensor*)luaT_toudata(L, -1, "torch.CudaHalfTensor")))
    luaL_error(L, "expected CudaHalfTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& torch_isnonemptytable(L, 1)
&& lua_isnumber(L, 2)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaHalfTensor**)THAlloc(arg6_size * sizeof(THCudaHalfTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaHalfTensor*)luaT_toudata(L, -1, "torch.CudaHalfTensor")))
    luaL_error(L, "expected CudaHalfTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 2)-1;
arg5 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& torch_isnonemptytable(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaHalfTensor**)THAlloc(arg6_size * sizeof(THCudaHalfTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaHalfTensor*)luaT_toudata(L, -1, "torch.CudaHalfTensor")))
    luaL_error(L, "expected CudaHalfTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor CudaHalfTensor [index] | [*CudaHalfTensor*] {CudaHalfTensor+} [index]", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_cat(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaHalfTensor");
THCudaHalfTensor_catArray(default_arg1,arg5,arg6_data,arg6_size,arg7);
THFree(arg6_data);
return 1;
}
return 0;
}

static int cutorch_CudaHalfTensor_log(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_log(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_log1p(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_log1p(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_exp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_exp(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_cos(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_cos(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_acos(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_acos(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_cosh(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_cosh(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_sin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_sin(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_asin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_asin(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_sinh(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_sinh(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_tan(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_tan(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_atan(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_atan(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_tanh(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_tanh(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_sqrt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_sqrt(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_rsqrt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_rsqrt(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_sigmoid(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_sigmoid(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_cinv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_cinv(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_ceil(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_ceil(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_floor(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_floor(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_neg(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_neg(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_round(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_round(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_trunc(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_trunc(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_frac(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_frac(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaHalfTensor_norm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
half arg2 = THC_float2half((float) 2);
float arg3 = 0;
THCudaHalfTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
half arg6 = THC_float2half((float) 0);
long arg7 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg2 = THC_float2half((float) lua_tonumber(L, 2));
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg6 = THC_float2half((float) lua_tonumber(L, 2));
arg7 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 3));
arg7 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaHalfTensor [half] | [*CudaHalfTensor*] CudaHalfTensor half index", type_buf);
}
if(argset == 1)
{
arg3 = THCudaHalfTensor_normall(default_arg1,arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaHalfTensor");
THCudaHalfTensor_norm(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int cutorch_CudaHalfTensor_renorm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
long arg4 = 0;
half arg5 = THC_float2half((float) 0);
if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = THC_float2half((float) lua_tonumber(L, 4));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
&& lua_isnumber(L, 5)
)
{
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = THC_float2half((float) lua_tonumber(L, 5));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor half index half", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_renorm(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int cutorch_CudaHalfTensor_var(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
float arg2 = 0;
THCudaHalfTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaHalfTensor *arg4 = NULL;
long arg5 = 0;
int arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg6 = lua_toboolean(L, 3);
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaHalfTensor | [*CudaHalfTensor*] CudaHalfTensor index [boolean]", type_buf);
}
if(argset == 1)
{
arg2 = THCudaHalfTensor_varall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaHalfTensor");
THCudaHalfTensor_var(default_arg1,arg3,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaHalfTensor_std(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
float arg2 = 0;
THCudaHalfTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaHalfTensor *arg4 = NULL;
long arg5 = 0;
int arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg6 = lua_toboolean(L, 3);
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaHalfTensor | [*CudaHalfTensor*] CudaHalfTensor index [boolean]", type_buf);
}
if(argset == 1)
{
arg2 = THCudaHalfTensor_stdall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaHalfTensor");
THCudaHalfTensor_std(default_arg1,arg3,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaHalfTensor_lerp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
THCudaHalfTensor *arg3 = NULL;
half arg4 = THC_float2half((float) 0);
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
arg4 = THC_float2half((float) lua_tonumber(L, 3));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = THC_float2half((float) lua_tonumber(L, 4));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor CudaHalfTensor half", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_lerp(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaHalfTensor_mv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
half arg2 = THC_float2half((float) 1);
THCudaHalfTensor *arg3 = NULL;
half arg4 = THC_float2half((float) 1);
THCudaHalfTensor *arg5 = NULL;
THCudaHalfTensor *arg6 = NULL;
if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
THCudaHalfTensor_checkGPU(cutorch_getstate(L), 1, arg5);
THCudaHalfTensor_resize1d(cutorch_getstate(L), arg1, arg5->size[0]);
arg3 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor~2D CudaHalfTensor~1D", type_buf);
}
THCudaHalfTensor_zero(cutorch_getstate(L), arg1);
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_addmv(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaHalfTensor_mm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
half arg2 = THC_float2half((float) 0);
THCudaHalfTensor *arg3 = NULL;
half arg4 = THC_float2half((float) 1);
THCudaHalfTensor *arg5 = NULL;
THCudaHalfTensor *arg6 = NULL;
if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg6->nDimension == 2)
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
THCudaHalfTensor_checkGPU(cutorch_getstate(L), 2, arg5, arg6);
THCudaHalfTensor_resize2d(cutorch_getstate(L), arg1, arg5->size[0], arg6->size[1]);
arg3 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg6->nDimension == 2)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor~2D CudaHalfTensor~2D", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_addmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaHalfTensor_bmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
half arg2 = THC_float2half((float) 0);
THCudaHalfTensor *arg3 = NULL;
half arg4 = THC_float2half((float) 1);
THCudaHalfTensor *arg5 = NULL;
THCudaHalfTensor *arg6 = NULL;
if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
THCudaHalfTensor_checkGPU(cutorch_getstate(L), 2, arg5, arg6);
THCudaHalfTensor_resize3d(cutorch_getstate(L), arg1, arg5->size[0], arg5->size[1], arg6->size[2]);
arg3 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor~3D CudaHalfTensor~3D", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_baddbmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaHalfTensor_ger(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
half arg2 = THC_float2half((float) 1);
THCudaHalfTensor *arg3 = NULL;
half arg4 = THC_float2half((float) 1);
THCudaHalfTensor *arg5 = NULL;
THCudaHalfTensor *arg6 = NULL;
if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
THCudaHalfTensor_checkGPU(cutorch_getstate(L), 2, arg5, arg6);
THCudaHalfTensor_resize2d(cutorch_getstate(L), arg1, arg5->size[0], arg6->size[0]);
arg3 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor~1D CudaHalfTensor~1D", type_buf);
}
THCudaHalfTensor_zero(cutorch_getstate(L), arg1);
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_addr(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaHalfTensor_addmv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
half arg2 = THC_float2half((float) 1);
THCudaHalfTensor *arg3 = NULL;
half arg4 = THC_float2half((float) 1);
THCudaHalfTensor *arg5 = NULL;
THCudaHalfTensor *arg6 = NULL;
if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg3->nDimension == 1)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 1)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
}
else if(narg == 4
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 1)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
arg2 = THC_float2half((float) lua_tonumber(L, 1));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg3->nDimension == 1)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg2 = THC_float2half((float) lua_tonumber(L, 2));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg3->nDimension == 1)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
arg4 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 1)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg4 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 5
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 1)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
arg2 = THC_float2half((float) lua_tonumber(L, 1));
arg4 = THC_float2half((float) lua_tonumber(L, 3));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg3->nDimension == 1)
&& lua_isnumber(L, 4)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 6, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg2 = THC_float2half((float) lua_tonumber(L, 2));
arg4 = THC_float2half((float) lua_tonumber(L, 4));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] [half] CudaHalfTensor~1D [half] CudaHalfTensor~2D CudaHalfTensor~1D", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_addmv(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaHalfTensor_addmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
half arg2 = THC_float2half((float) 1);
THCudaHalfTensor *arg3 = NULL;
half arg4 = THC_float2half((float) 1);
THCudaHalfTensor *arg5 = NULL;
THCudaHalfTensor *arg6 = NULL;
if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg6->nDimension == 2)
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 2)
)
{
arg1_idx = 1;
}
else if(narg == 4
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 2)
)
{
arg2 = THC_float2half((float) lua_tonumber(L, 1));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg6->nDimension == 2)
)
{
arg1_idx = 1;
arg2 = THC_float2half((float) lua_tonumber(L, 2));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 2)
)
{
arg4 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg6->nDimension == 2)
)
{
arg1_idx = 1;
arg4 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 5
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg6->nDimension == 2)
)
{
arg2 = THC_float2half((float) lua_tonumber(L, 1));
arg4 = THC_float2half((float) lua_tonumber(L, 3));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 4)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 6, "torch.CudaHalfTensor")) && (arg6->nDimension == 2)
)
{
arg1_idx = 1;
arg2 = THC_float2half((float) lua_tonumber(L, 2));
arg4 = THC_float2half((float) lua_tonumber(L, 4));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] [half] CudaHalfTensor~2D [half] CudaHalfTensor~2D CudaHalfTensor~2D", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_addmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaHalfTensor_addr(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
half arg2 = THC_float2half((float) 1);
THCudaHalfTensor *arg3 = NULL;
half arg4 = THC_float2half((float) 1);
THCudaHalfTensor *arg5 = NULL;
THCudaHalfTensor *arg6 = NULL;
if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
}
else if(narg == 4
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
arg2 = THC_float2half((float) lua_tonumber(L, 1));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg2 = THC_float2half((float) lua_tonumber(L, 2));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
arg4 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg4 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 5
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
arg2 = THC_float2half((float) lua_tonumber(L, 1));
arg4 = THC_float2half((float) lua_tonumber(L, 3));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 4)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 6, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg2 = THC_float2half((float) lua_tonumber(L, 2));
arg4 = THC_float2half((float) lua_tonumber(L, 4));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] [half] CudaHalfTensor~2D [half] CudaHalfTensor~1D CudaHalfTensor~1D", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_addr(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaHalfTensor_baddbmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
half arg2 = THC_float2half((float) 1);
THCudaHalfTensor *arg3 = NULL;
half arg4 = THC_float2half((float) 1);
THCudaHalfTensor *arg5 = NULL;
THCudaHalfTensor *arg6 = NULL;
if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg3->nDimension == 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
}
else if(narg == 4
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
arg2 = THC_float2half((float) lua_tonumber(L, 1));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg3->nDimension == 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg2 = THC_float2half((float) lua_tonumber(L, 2));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg3->nDimension == 3)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
arg4 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 3)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg4 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 5
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 3)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
arg2 = THC_float2half((float) lua_tonumber(L, 1));
arg4 = THC_float2half((float) lua_tonumber(L, 3));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg3->nDimension == 3)
&& lua_isnumber(L, 4)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 6, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg2 = THC_float2half((float) lua_tonumber(L, 2));
arg4 = THC_float2half((float) lua_tonumber(L, 4));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] [half] CudaHalfTensor~3D [half] CudaHalfTensor~3D CudaHalfTensor~3D", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_baddbmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaHalfTensor_addbmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
half arg2 = THC_float2half((float) 1);
THCudaHalfTensor *arg3 = NULL;
half arg4 = THC_float2half((float) 1);
THCudaHalfTensor *arg5 = NULL;
THCudaHalfTensor *arg6 = NULL;
if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
}
else if(narg == 4
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
arg2 = THC_float2half((float) lua_tonumber(L, 1));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg2 = THC_float2half((float) lua_tonumber(L, 2));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
arg4 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg4 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 5
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
arg2 = THC_float2half((float) lua_tonumber(L, 1));
arg4 = THC_float2half((float) lua_tonumber(L, 3));
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 4)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 6, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg2 = THC_float2half((float) lua_tonumber(L, 2));
arg4 = THC_float2half((float) lua_tonumber(L, 4));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] [half] CudaHalfTensor~2D [half] CudaHalfTensor~3D CudaHalfTensor~3D", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_addbmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaHalfTensor_dot(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaHalfTensor CudaHalfTensor", type_buf);
}
arg3 = THCudaHalfTensor_dot(default_arg1,arg1,arg2);
lua_pushnumber(L, (lua_Number) THC_half2float(arg3));
return 1;
}

static int m_cutorch_CudaHalfTensor_fill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
half arg2 = THC_float2half((float) 0);
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = THC_float2half((float) lua_tonumber(L, 2));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* half", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_fill(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_zero(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor*", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_zero(default_arg1,arg1);
return 1;
}

static int m_cutorch_CudaHalfTensor_zeros(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* (LongStorage | dim1 [dim2...])", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_zeros(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_ones(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* (LongStorage | dim1 [dim2...])", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_ones(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_reshape(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
THLongStorage *arg3 = NULL;
if(narg >= 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg3 = cutorch_checklongargs(L, 2);
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg >= 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& cutorch_islongargs(L, 3)
)
{
arg1_idx = 1;
arg3 = cutorch_checklongargs(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_reshape(default_arg1,arg1,arg2,arg3);
THLongStorage_free(arg3);
return 1;
}

static int m_cutorch_CudaHalfTensor_numel(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
ptrdiff_t arg2 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaHalfTensor", type_buf);
}
arg2 = THCudaHalfTensor_numel(default_arg1,arg1);
lua_pushinteger(L, (lua_Integer)arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_add(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
THCudaHalfTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
half arg6 = THC_float2half((float) 1);
THCudaHalfTensor *arg7 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg5 = arg4;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 2));
arg5 = arg4;
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaHalfTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 3));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor] half | *CudaHalfTensor* [CudaHalfTensor] [half] CudaHalfTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_add(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaHalfTensor_cadd(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_csub(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
THCudaHalfTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
half arg6 = THC_float2half((float) 1);
THCudaHalfTensor *arg7 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg5 = arg4;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 2));
arg5 = arg4;
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaHalfTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 3));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor] half | *CudaHalfTensor* [CudaHalfTensor] [half] CudaHalfTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_sub(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaHalfTensor_csub(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_mul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor] half", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_mul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaHalfTensor_clamp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
half arg4 = THC_float2half((float) 0);
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg4 = THC_float2half((float) lua_tonumber(L, 3));
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
arg4 = THC_float2half((float) lua_tonumber(L, 4));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor] half half", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_clamp(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int m_cutorch_CudaHalfTensor_cross(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
THCudaHalfTensor *arg3 = NULL;
long arg4 = -1;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor CudaHalfTensor [index]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_cross(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int m_cutorch_CudaHalfTensor_div(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor] half", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_div(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaHalfTensor_cmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
THCudaHalfTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor] CudaHalfTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_cmul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaHalfTensor_cpow(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
THCudaHalfTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor] CudaHalfTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_cpow(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaHalfTensor_cdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
THCudaHalfTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor] CudaHalfTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_cdiv(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaHalfTensor_addcmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 1);
THCudaHalfTensor *arg4 = NULL;
THCudaHalfTensor *arg5 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg2 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor] [half] CudaHalfTensor CudaHalfTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_addcmul(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int m_cutorch_CudaHalfTensor_addcdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 1);
THCudaHalfTensor *arg4 = NULL;
THCudaHalfTensor *arg5 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg2 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor] [half] CudaHalfTensor CudaHalfTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_addcdiv(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int m_cutorch_CudaHalfTensor_min(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
half arg2 = THC_float2half((float) 0);
THCudaHalfTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaHalfTensor | [*CudaHalfTensor*] [*CudaLongTensor*] CudaHalfTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaHalfTensor_minall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number) THC_half2float(arg2));
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaHalfTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaHalfTensor_min(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_max(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
half arg2 = THC_float2half((float) 0);
THCudaHalfTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaHalfTensor | [*CudaHalfTensor*] [*CudaLongTensor*] CudaHalfTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaHalfTensor_maxall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number) THC_half2float(arg2));
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaHalfTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaHalfTensor_max(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_cmin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
THCudaHalfTensor *arg3 = NULL;
THCudaHalfTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
half arg6 = THC_float2half((float) 0);
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
argset = 1;
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 1;
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 1
&& lua_isnumber(L, 1)
)
{
argset = 2;
arg6 = THC_float2half((float) lua_tonumber(L, 1));
arg4 = THCudaHalfTensor_new(cutorch_getstate(L));
arg5 = arg4;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 2));
arg5 = arg4;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = THC_float2half((float) lua_tonumber(L, 2));
arg4 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 3));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] [CudaHalfTensor] CudaHalfTensor | [*CudaHalfTensor*] [CudaHalfTensor] half", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_cmin(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaHalfTensor");
THCudaHalfTensor_cminValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_cmax(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
THCudaHalfTensor *arg3 = NULL;
THCudaHalfTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
half arg6 = THC_float2half((float) 0);
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
argset = 1;
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 1;
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 1
&& lua_isnumber(L, 1)
)
{
argset = 2;
arg6 = THC_float2half((float) lua_tonumber(L, 1));
arg4 = THCudaHalfTensor_new(cutorch_getstate(L));
arg5 = arg4;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 2));
arg5 = arg4;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = THC_float2half((float) lua_tonumber(L, 2));
arg4 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 3));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] [CudaHalfTensor] CudaHalfTensor | [*CudaHalfTensor*] [CudaHalfTensor] half", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_cmax(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaHalfTensor");
THCudaHalfTensor_cmaxValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_lt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
THCudaHalfTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
half arg6 = THC_float2half((float) 0);
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaHalfTensor *arg8 = NULL;
THCudaHalfTensor *arg9 = NULL;
THCudaHalfTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaHalfTensor *arg11 = NULL;
THCudaHalfTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaHalfTensor half | *CudaHalfTensor* CudaHalfTensor half | [*CudaByteTensor*] CudaHalfTensor CudaHalfTensor | *CudaHalfTensor* CudaHalfTensor CudaHalfTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaHalfTensor_ltValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaHalfTensor_ltValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaHalfTensor_ltTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaHalfTensor_ltTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_gt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
THCudaHalfTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
half arg6 = THC_float2half((float) 0);
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaHalfTensor *arg8 = NULL;
THCudaHalfTensor *arg9 = NULL;
THCudaHalfTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaHalfTensor *arg11 = NULL;
THCudaHalfTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaHalfTensor half | *CudaHalfTensor* CudaHalfTensor half | [*CudaByteTensor*] CudaHalfTensor CudaHalfTensor | *CudaHalfTensor* CudaHalfTensor CudaHalfTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaHalfTensor_gtValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaHalfTensor_gtValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaHalfTensor_gtTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaHalfTensor_gtTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_le(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
THCudaHalfTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
half arg6 = THC_float2half((float) 0);
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaHalfTensor *arg8 = NULL;
THCudaHalfTensor *arg9 = NULL;
THCudaHalfTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaHalfTensor *arg11 = NULL;
THCudaHalfTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaHalfTensor half | *CudaHalfTensor* CudaHalfTensor half | [*CudaByteTensor*] CudaHalfTensor CudaHalfTensor | *CudaHalfTensor* CudaHalfTensor CudaHalfTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaHalfTensor_leValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaHalfTensor_leValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaHalfTensor_leTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaHalfTensor_leTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_ge(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
THCudaHalfTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
half arg6 = THC_float2half((float) 0);
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaHalfTensor *arg8 = NULL;
THCudaHalfTensor *arg9 = NULL;
THCudaHalfTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaHalfTensor *arg11 = NULL;
THCudaHalfTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaHalfTensor half | *CudaHalfTensor* CudaHalfTensor half | [*CudaByteTensor*] CudaHalfTensor CudaHalfTensor | *CudaHalfTensor* CudaHalfTensor CudaHalfTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaHalfTensor_geValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaHalfTensor_geValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaHalfTensor_geTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaHalfTensor_geTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_eq(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
THCudaHalfTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
half arg6 = THC_float2half((float) 0);
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaHalfTensor *arg8 = NULL;
THCudaHalfTensor *arg9 = NULL;
THCudaHalfTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaHalfTensor *arg11 = NULL;
THCudaHalfTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaHalfTensor half | *CudaHalfTensor* CudaHalfTensor half | [*CudaByteTensor*] CudaHalfTensor CudaHalfTensor | *CudaHalfTensor* CudaHalfTensor CudaHalfTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaHalfTensor_eqValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaHalfTensor_eqValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaHalfTensor_eqTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaHalfTensor_eqTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_ne(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
THCudaHalfTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
half arg6 = THC_float2half((float) 0);
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaHalfTensor *arg8 = NULL;
THCudaHalfTensor *arg9 = NULL;
THCudaHalfTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaHalfTensor *arg11 = NULL;
THCudaHalfTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaHalfTensor half | *CudaHalfTensor* CudaHalfTensor half | [*CudaByteTensor*] CudaHalfTensor CudaHalfTensor | *CudaHalfTensor* CudaHalfTensor CudaHalfTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaHalfTensor_neValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaHalfTensor_neValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaHalfTensor_neTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaHalfTensor_neTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_sum(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
float arg2 = 0;
THCudaHalfTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaHalfTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaHalfTensor | [*CudaHalfTensor*] CudaHalfTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaHalfTensor_sumall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaHalfTensor");
THCudaHalfTensor_sum(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_prod(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
float arg2 = 0;
THCudaHalfTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaHalfTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaHalfTensor | [*CudaHalfTensor*] CudaHalfTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaHalfTensor_prodall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaHalfTensor");
THCudaHalfTensor_prod(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_mean(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
float arg2 = 0;
THCudaHalfTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaHalfTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaHalfTensor | [*CudaHalfTensor*] CudaHalfTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaHalfTensor_meanall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaHalfTensor");
THCudaHalfTensor_mean(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_maskedFill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* CudaByteTensor half", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_maskedFill(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaHalfTensor_maskedCopy(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaHalfTensor *arg3 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* CudaByteTensor CudaHalfTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_maskedCopy(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaHalfTensor_maskedSelect(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_maskedSelect(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaHalfTensor_gather(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
THCudaHalfTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaHalfTensor *arg6 = NULL;
long arg7 = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaHalfTensor *dummyIndexTensor = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
THCudaHalfTensor_checkGPU(cutorch_getstate(L), 1, arg4);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg4);
		  THCudaHalfTensor_resize(state, arg1, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg6 = (decltype(arg6))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 2;
arg7 = (long)lua_tonumber(L, 2)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaHalfTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaHalf(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
arg5 = THCudaHalfTensor_new(cutorch_getstate(L));
THCudaHalfTensor_checkGPU(cutorch_getstate(L), 1, arg8);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg8);
		  THCudaHalfTensor_resize(state, arg5, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 4, "torch.CudaHalfTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg7 = (long)lua_tonumber(L, 3)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaHalfTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaHalf(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor index CudaLongTensor | [*CudaHalfTensor*] CudaHalfTensor index CudaHalfTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_gather(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaHalfTensor");
THCudaHalfTensor_gather(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_scatter(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
THCudaHalfTensor *arg4 = NULL;
THCudaHalfTensor *arg5 = NULL;
int arg5_idx = 0;
long arg6 = 0;
THCudaLongTensor *arg7 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaHalfTensor *dummyIndexTensor = NULL;
THCudaHalfTensor *arg8 = NULL;
THCudaHalfTensor *arg9 = NULL;
int arg9_idx = 0;
long arg10 = 0;
THCudaLongTensor *arg11 = NULL;
half arg12 = THC_float2half((float) 0);
THCudaHalfTensor *arg13 = NULL;
int arg13_idx = 0;
long arg14 = 0;
THCudaLongTensor *arg15 = NULL;
half arg16 = THC_float2half((float) 0);
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaHalfTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = (long)lua_tonumber(L, 2)-1;
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 4, "torch.CudaHalfTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg6 = (long)lua_tonumber(L, 2)-1;
arg7 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaHalfTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg7, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaHalf(default_arg1, arg7, dummyIndexTensor);
indexLongTensor = arg7;
}
else if(narg == 4
&& (arg9 = (decltype(arg9))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 3;
arg9_idx = 1;
arg10 = (long)lua_tonumber(L, 2)-1;
arg12 = THC_float2half((float) lua_tonumber(L, 4));
}
else if(narg == 4
&& (arg13 = (decltype(arg13))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 4;
arg13_idx = 1;
arg14 = (long)lua_tonumber(L, 2)-1;
arg15 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaHalfTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg15, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaHalf(default_arg1, arg15, dummyIndexTensor);
indexLongTensor = arg15;
arg16 = THC_float2half((float) lua_tonumber(L, 4));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* index CudaLongTensor CudaHalfTensor | *CudaHalfTensor* index CudaHalfTensor CudaHalfTensor | *CudaHalfTensor* index CudaLongTensor half | *CudaHalfTensor* index CudaHalfTensor half", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_scatter(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg5_idx);
THCudaHalfTensor_scatter(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
else if(argset == 3)
{
lua_pushvalue(L, arg9_idx);
THCudaHalfTensor_scatterFill(default_arg1,arg9,arg10,arg11,arg12);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg13_idx);
THCudaHalfTensor_scatterFill(default_arg1,arg13,arg14,arg15,arg16);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_sort(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaHalfTensor *arg3 = NULL;
long arg4 = 0;
int arg5 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg2_idx = 1;
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
arg4 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isboolean(L, 2)
)
{
arg5 = lua_toboolean(L, 2);
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isboolean(L, 3)
)
{
arg1_idx = 1;
arg5 = lua_toboolean(L, 3);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isboolean(L, 3)
)
{
arg2_idx = 1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
arg4 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = lua_toboolean(L, 4);
arg4 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = lua_toboolean(L, 5);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] [*CudaLongTensor*] CudaHalfTensor [index] [boolean]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
if(arg2_idx)
lua_pushvalue(L, arg2_idx);
else
luaT_pushudata(L, arg2, "torch.CudaLongTensor");
THCudaHalfTensor_sort(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 2;
}

static int m_cutorch_CudaHalfTensor_squeeze(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
THCudaHalfTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaHalfTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
argset = 1;
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor | [*CudaHalfTensor*] CudaHalfTensor index", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_squeeze(default_arg1,arg1,arg2);
if(arg1->nDimension == 1 && arg1->size[0] == 1)
lua_pushnumber(L, (lua_Number)THC_half2float(THCudaHalfTensor_get1d(cutorch_getstate(L), arg1, 0)));
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaHalfTensor");
{int hasdims = arg4->nDimension > 1;
THCudaHalfTensor_squeeze1d(default_arg1,arg3,arg4,arg5);
if(!hasdims && arg3->nDimension == 1 && arg3->size[0] == 1)
lua_pushnumber(L, (lua_Number)THC_half2float(THCudaHalfTensor_get1d(cutorch_getstate(L), arg3, 0)));}
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_abs(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_abs(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_sign(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_sign(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_cat(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
THCudaHalfTensor *arg3 = NULL;
long arg4 = 0;
THCudaHalfTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaHalfTensor **arg6_data = NULL;
long arg6_size = 0;
int arg6_i = 0;
long arg7 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
argset = 1;
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
arg4 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg4 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 1
&& torch_isnonemptytable(L, 1)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaHalfTensor**)THAlloc(arg6_size * sizeof(THCudaHalfTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaHalfTensor*)luaT_toudata(L, -1, "torch.CudaHalfTensor")))
    luaL_error(L, "expected CudaHalfTensor in tensor array");
  lua_pop(L, 1);
}

arg5 = THCudaHalfTensor_new(cutorch_getstate(L));
arg7 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& torch_isnonemptytable(L, 2)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaHalfTensor**)THAlloc(arg6_size * sizeof(THCudaHalfTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaHalfTensor*)luaT_toudata(L, -1, "torch.CudaHalfTensor")))
    luaL_error(L, "expected CudaHalfTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = THCudaHalfTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& torch_isnonemptytable(L, 1)
&& lua_isnumber(L, 2)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaHalfTensor**)THAlloc(arg6_size * sizeof(THCudaHalfTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaHalfTensor*)luaT_toudata(L, -1, "torch.CudaHalfTensor")))
    luaL_error(L, "expected CudaHalfTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 2)-1;
arg5 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& torch_isnonemptytable(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaHalfTensor**)THAlloc(arg6_size * sizeof(THCudaHalfTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaHalfTensor*)luaT_toudata(L, -1, "torch.CudaHalfTensor")))
    luaL_error(L, "expected CudaHalfTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaHalfTensor*] CudaHalfTensor CudaHalfTensor [index] | [*CudaHalfTensor*] {CudaHalfTensor+} [index]", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaHalfTensor");
THCudaHalfTensor_cat(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaHalfTensor");
THCudaHalfTensor_catArray(default_arg1,arg5,arg6_data,arg6_size,arg7);
THFree(arg6_data);
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_log(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_log(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_log1p(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_log1p(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_exp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_exp(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_cos(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_cos(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_acos(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_acos(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_cosh(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_cosh(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_sin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_sin(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_asin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_asin(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_sinh(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_sinh(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_tan(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_tan(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_atan(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_atan(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_tanh(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_tanh(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_sqrt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_sqrt(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_rsqrt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_rsqrt(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_sigmoid(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_sigmoid(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_cinv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_cinv(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_ceil(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_ceil(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_floor(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_floor(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_neg(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_neg(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_round(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_round(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_trunc(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_trunc(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_frac(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_frac(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaHalfTensor_norm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
half arg2 = THC_float2half((float) 2);
float arg3 = 0;
THCudaHalfTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaHalfTensor *arg5 = NULL;
half arg6 = THC_float2half((float) 0);
long arg7 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg2 = THC_float2half((float) lua_tonumber(L, 2));
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg6 = THC_float2half((float) lua_tonumber(L, 2));
arg7 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg4_idx = 1;
arg6 = THC_float2half((float) lua_tonumber(L, 3));
arg7 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaHalfTensor [half] | [*CudaHalfTensor*] CudaHalfTensor half index", type_buf);
}
if(argset == 1)
{
arg3 = THCudaHalfTensor_normall(default_arg1,arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaHalfTensor");
THCudaHalfTensor_norm(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_renorm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
long arg4 = 0;
half arg5 = THC_float2half((float) 0);
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 2));
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = THC_float2half((float) lua_tonumber(L, 4));
arg2 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
&& lua_isnumber(L, 5)
)
{
arg1_idx = 1;
arg3 = THC_float2half((float) lua_tonumber(L, 3));
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = THC_float2half((float) lua_tonumber(L, 5));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor] half index half", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_renorm(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int m_cutorch_CudaHalfTensor_var(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
float arg2 = 0;
THCudaHalfTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaHalfTensor *arg4 = NULL;
long arg5 = 0;
int arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg6 = lua_toboolean(L, 3);
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaHalfTensor | [*CudaHalfTensor*] CudaHalfTensor index [boolean]", type_buf);
}
if(argset == 1)
{
arg2 = THCudaHalfTensor_varall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaHalfTensor");
THCudaHalfTensor_var(default_arg1,arg3,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_std(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
float arg2 = 0;
THCudaHalfTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaHalfTensor *arg4 = NULL;
long arg5 = 0;
int arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg6 = lua_toboolean(L, 3);
arg3 = THCudaHalfTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaHalfTensor | [*CudaHalfTensor*] CudaHalfTensor index [boolean]", type_buf);
}
if(argset == 1)
{
arg2 = THCudaHalfTensor_stdall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaHalfTensor");
THCudaHalfTensor_std(default_arg1,arg3,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_lerp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaHalfTensor *arg2 = NULL;
THCudaHalfTensor *arg3 = NULL;
half arg4 = THC_float2half((float) 0);
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg4 = THC_float2half((float) lua_tonumber(L, 3));
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaHalfTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = THC_float2half((float) lua_tonumber(L, 4));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* [CudaHalfTensor] CudaHalfTensor half", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_lerp(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int m_cutorch_CudaHalfTensor_mv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
half arg2 = THC_float2half((float) 1);
THCudaHalfTensor *arg3 = NULL;
half arg4 = THC_float2half((float) 1);
THCudaHalfTensor *arg5 = NULL;
THCudaHalfTensor *arg6 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* CudaHalfTensor~2D CudaHalfTensor~1D", type_buf);
}
THCudaHalfTensor_zero(cutorch_getstate(L), arg1);
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_addmv(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int m_cutorch_CudaHalfTensor_mm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
half arg2 = THC_float2half((float) 0);
THCudaHalfTensor *arg3 = NULL;
half arg4 = THC_float2half((float) 1);
THCudaHalfTensor *arg5 = NULL;
THCudaHalfTensor *arg6 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg6->nDimension == 2)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* CudaHalfTensor~2D CudaHalfTensor~2D", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_addmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int m_cutorch_CudaHalfTensor_bmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
half arg2 = THC_float2half((float) 0);
THCudaHalfTensor *arg3 = NULL;
half arg4 = THC_float2half((float) 1);
THCudaHalfTensor *arg5 = NULL;
THCudaHalfTensor *arg6 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* CudaHalfTensor~3D CudaHalfTensor~3D", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_baddbmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int m_cutorch_CudaHalfTensor_ger(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
half arg2 = THC_float2half((float) 1);
THCudaHalfTensor *arg3 = NULL;
half arg4 = THC_float2half((float) 1);
THCudaHalfTensor *arg5 = NULL;
THCudaHalfTensor *arg6 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor* CudaHalfTensor~1D CudaHalfTensor~1D", type_buf);
}
THCudaHalfTensor_zero(cutorch_getstate(L), arg1);
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_addr(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int m_cutorch_CudaHalfTensor_addmv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
half arg2 = THC_float2half((float) 1);
THCudaHalfTensor *arg3 = NULL;
half arg4 = THC_float2half((float) 1);
THCudaHalfTensor *arg5 = NULL;
THCudaHalfTensor *arg6 = NULL;
THCudaHalfTensor *arg7 = NULL;
int arg7_idx = 0;
half arg8 = THC_float2half((float) 0);
THCudaHalfTensor *arg9 = NULL;
half arg10 = THC_float2half((float) 0);
THCudaHalfTensor *arg11 = NULL;
THCudaHalfTensor *arg12 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg1->nDimension == 1)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
arg3 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg1->nDimension == 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 1)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg1->nDimension == 1)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
arg4 = THC_float2half((float) lua_tonumber(L, 2));
arg3 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg1->nDimension == 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 1)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
arg4 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 5
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg7->nDimension == 1)
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg11->nDimension == 2)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg12->nDimension == 1)
)
{
argset = 2;
arg7_idx = 1;
arg8 = THC_float2half((float) lua_tonumber(L, 2));
arg10 = THC_float2half((float) lua_tonumber(L, 3));
arg9 = arg7;
}
else if(narg == 6
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg7->nDimension == 1)
&& lua_isnumber(L, 2)
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg9->nDimension == 1)
&& lua_isnumber(L, 4)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg11->nDimension == 2)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 6, "torch.CudaHalfTensor")) && (arg12->nDimension == 1)
)
{
argset = 2;
arg7_idx = 1;
arg8 = THC_float2half((float) lua_tonumber(L, 2));
arg10 = THC_float2half((float) lua_tonumber(L, 4));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor~1D* [CudaHalfTensor~1D] [half] CudaHalfTensor~2D CudaHalfTensor~1D | *CudaHalfTensor~1D* half [CudaHalfTensor~1D] half CudaHalfTensor~2D CudaHalfTensor~1D", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_addmv(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg7_idx);
THCudaHalfTensor_addmv(default_arg1,arg7,arg8,arg9,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_addmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
half arg2 = THC_float2half((float) 1);
THCudaHalfTensor *arg3 = NULL;
half arg4 = THC_float2half((float) 1);
THCudaHalfTensor *arg5 = NULL;
THCudaHalfTensor *arg6 = NULL;
THCudaHalfTensor *arg7 = NULL;
int arg7_idx = 0;
half arg8 = THC_float2half((float) 0);
THCudaHalfTensor *arg9 = NULL;
half arg10 = THC_float2half((float) 0);
THCudaHalfTensor *arg11 = NULL;
THCudaHalfTensor *arg12 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg1->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg6->nDimension == 2)
)
{
argset = 1;
arg1_idx = 1;
arg3 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg1->nDimension == 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 2)
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg1->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 2)
)
{
argset = 1;
arg1_idx = 1;
arg4 = THC_float2half((float) lua_tonumber(L, 2));
arg3 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg1->nDimension == 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg6->nDimension == 2)
)
{
argset = 1;
arg1_idx = 1;
arg4 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 5
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg7->nDimension == 2)
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg11->nDimension == 2)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg12->nDimension == 2)
)
{
argset = 2;
arg7_idx = 1;
arg8 = THC_float2half((float) lua_tonumber(L, 2));
arg10 = THC_float2half((float) lua_tonumber(L, 3));
arg9 = arg7;
}
else if(narg == 6
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg7->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg9->nDimension == 2)
&& lua_isnumber(L, 4)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg11->nDimension == 2)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 6, "torch.CudaHalfTensor")) && (arg12->nDimension == 2)
)
{
argset = 2;
arg7_idx = 1;
arg8 = THC_float2half((float) lua_tonumber(L, 2));
arg10 = THC_float2half((float) lua_tonumber(L, 4));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor~2D* [CudaHalfTensor~2D] [half] CudaHalfTensor~2D CudaHalfTensor~2D | *CudaHalfTensor~2D* half [CudaHalfTensor~2D] half CudaHalfTensor~2D CudaHalfTensor~2D", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_addmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg7_idx);
THCudaHalfTensor_addmm(default_arg1,arg7,arg8,arg9,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_addr(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
half arg2 = THC_float2half((float) 1);
THCudaHalfTensor *arg3 = NULL;
half arg4 = THC_float2half((float) 1);
THCudaHalfTensor *arg5 = NULL;
THCudaHalfTensor *arg6 = NULL;
THCudaHalfTensor *arg7 = NULL;
int arg7_idx = 0;
half arg8 = THC_float2half((float) 0);
THCudaHalfTensor *arg9 = NULL;
half arg10 = THC_float2half((float) 0);
THCudaHalfTensor *arg11 = NULL;
THCudaHalfTensor *arg12 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg1->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
arg3 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg1->nDimension == 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg1->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
arg4 = THC_float2half((float) lua_tonumber(L, 2));
arg3 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg1->nDimension == 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
arg4 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 5
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg7->nDimension == 2)
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg11->nDimension == 1)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg12->nDimension == 1)
)
{
argset = 2;
arg7_idx = 1;
arg8 = THC_float2half((float) lua_tonumber(L, 2));
arg10 = THC_float2half((float) lua_tonumber(L, 3));
arg9 = arg7;
}
else if(narg == 6
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg7->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg9->nDimension == 2)
&& lua_isnumber(L, 4)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg11->nDimension == 1)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 6, "torch.CudaHalfTensor")) && (arg12->nDimension == 1)
)
{
argset = 2;
arg7_idx = 1;
arg8 = THC_float2half((float) lua_tonumber(L, 2));
arg10 = THC_float2half((float) lua_tonumber(L, 4));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor~2D* [CudaHalfTensor~2D] [half] CudaHalfTensor~1D CudaHalfTensor~1D | *CudaHalfTensor~2D* half [CudaHalfTensor~2D] half CudaHalfTensor~1D CudaHalfTensor~1D", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_addr(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg7_idx);
THCudaHalfTensor_addr(default_arg1,arg7,arg8,arg9,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_baddbmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
half arg2 = THC_float2half((float) 1);
THCudaHalfTensor *arg3 = NULL;
half arg4 = THC_float2half((float) 1);
THCudaHalfTensor *arg5 = NULL;
THCudaHalfTensor *arg6 = NULL;
THCudaHalfTensor *arg7 = NULL;
int arg7_idx = 0;
half arg8 = THC_float2half((float) 0);
THCudaHalfTensor *arg9 = NULL;
half arg10 = THC_float2half((float) 0);
THCudaHalfTensor *arg11 = NULL;
THCudaHalfTensor *arg12 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg1->nDimension == 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg1->nDimension == 3)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg1->nDimension == 3)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
arg4 = THC_float2half((float) lua_tonumber(L, 2));
arg3 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg1->nDimension == 3)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 3)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
arg4 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 5
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg7->nDimension == 3)
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg11->nDimension == 3)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg12->nDimension == 3)
)
{
argset = 2;
arg7_idx = 1;
arg8 = THC_float2half((float) lua_tonumber(L, 2));
arg10 = THC_float2half((float) lua_tonumber(L, 3));
arg9 = arg7;
}
else if(narg == 6
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg7->nDimension == 3)
&& lua_isnumber(L, 2)
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg9->nDimension == 3)
&& lua_isnumber(L, 4)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg11->nDimension == 3)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 6, "torch.CudaHalfTensor")) && (arg12->nDimension == 3)
)
{
argset = 2;
arg7_idx = 1;
arg8 = THC_float2half((float) lua_tonumber(L, 2));
arg10 = THC_float2half((float) lua_tonumber(L, 4));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor~3D* [CudaHalfTensor~3D] [half] CudaHalfTensor~3D CudaHalfTensor~3D | *CudaHalfTensor~3D* half [CudaHalfTensor~3D] half CudaHalfTensor~3D CudaHalfTensor~3D", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_baddbmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg7_idx);
THCudaHalfTensor_baddbmm(default_arg1,arg7,arg8,arg9,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_addbmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaHalfTensor *arg1 = NULL;
int arg1_idx = 0;
half arg2 = THC_float2half((float) 1);
THCudaHalfTensor *arg3 = NULL;
half arg4 = THC_float2half((float) 1);
THCudaHalfTensor *arg5 = NULL;
THCudaHalfTensor *arg6 = NULL;
THCudaHalfTensor *arg7 = NULL;
int arg7_idx = 0;
half arg8 = THC_float2half((float) 0);
THCudaHalfTensor *arg9 = NULL;
half arg10 = THC_float2half((float) 0);
THCudaHalfTensor *arg11 = NULL;
THCudaHalfTensor *arg12 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg1->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg1->nDimension == 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg1->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
arg4 = THC_float2half((float) lua_tonumber(L, 2));
arg3 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg1->nDimension == 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaHalfTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
arg4 = THC_float2half((float) lua_tonumber(L, 3));
}
else if(narg == 5
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg7->nDimension == 2)
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 4, "torch.CudaHalfTensor")) && (arg11->nDimension == 3)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg12->nDimension == 3)
)
{
argset = 2;
arg7_idx = 1;
arg8 = THC_float2half((float) lua_tonumber(L, 2));
arg10 = THC_float2half((float) lua_tonumber(L, 3));
arg9 = arg7;
}
else if(narg == 6
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaHalfTensor")) && (arg7->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaHalfTensor")) && (arg9->nDimension == 2)
&& lua_isnumber(L, 4)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 5, "torch.CudaHalfTensor")) && (arg11->nDimension == 3)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 6, "torch.CudaHalfTensor")) && (arg12->nDimension == 3)
)
{
argset = 2;
arg7_idx = 1;
arg8 = THC_float2half((float) lua_tonumber(L, 2));
arg10 = THC_float2half((float) lua_tonumber(L, 4));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaHalfTensor~2D* [CudaHalfTensor~2D] [half] CudaHalfTensor~3D CudaHalfTensor~3D | *CudaHalfTensor~2D* half [CudaHalfTensor~2D] half CudaHalfTensor~3D CudaHalfTensor~3D", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaHalfTensor_addbmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg7_idx);
THCudaHalfTensor_addbmm(default_arg1,arg7,arg8,arg9,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaHalfTensor_dot(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaHalfTensor *arg1 = NULL;
THCudaHalfTensor *arg2 = NULL;
half arg3 = THC_float2half((float) 0);
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaHalfTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaHalfTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaHalfTensor CudaHalfTensor", type_buf);
}
arg3 = THCudaHalfTensor_dot(default_arg1,arg1,arg2);
lua_pushnumber(L, (lua_Number) THC_half2float(arg3));
return 1;
}

static const struct luaL_Reg m_cutorch_CudaHalfTensorMath__ [] = {
{"fill", m_cutorch_CudaHalfTensor_fill},
{"zero", m_cutorch_CudaHalfTensor_zero},
{"zeros", m_cutorch_CudaHalfTensor_zeros},
{"ones", m_cutorch_CudaHalfTensor_ones},
{"reshape", m_cutorch_CudaHalfTensor_reshape},
{"numel", m_cutorch_CudaHalfTensor_numel},
{"add", m_cutorch_CudaHalfTensor_add},
{"csub", m_cutorch_CudaHalfTensor_csub},
{"mul", m_cutorch_CudaHalfTensor_mul},
{"clamp", m_cutorch_CudaHalfTensor_clamp},
{"cross", m_cutorch_CudaHalfTensor_cross},
{"div", m_cutorch_CudaHalfTensor_div},
{"cmul", m_cutorch_CudaHalfTensor_cmul},
{"cpow", m_cutorch_CudaHalfTensor_cpow},
{"cdiv", m_cutorch_CudaHalfTensor_cdiv},
{"addcmul", m_cutorch_CudaHalfTensor_addcmul},
{"addcdiv", m_cutorch_CudaHalfTensor_addcdiv},
{"min", m_cutorch_CudaHalfTensor_min},
{"max", m_cutorch_CudaHalfTensor_max},
{"cmin", m_cutorch_CudaHalfTensor_cmin},
{"cmax", m_cutorch_CudaHalfTensor_cmax},
{"lt", m_cutorch_CudaHalfTensor_lt},
{"gt", m_cutorch_CudaHalfTensor_gt},
{"le", m_cutorch_CudaHalfTensor_le},
{"ge", m_cutorch_CudaHalfTensor_ge},
{"eq", m_cutorch_CudaHalfTensor_eq},
{"ne", m_cutorch_CudaHalfTensor_ne},
{"sum", m_cutorch_CudaHalfTensor_sum},
{"prod", m_cutorch_CudaHalfTensor_prod},
{"mean", m_cutorch_CudaHalfTensor_mean},
{"maskedFill", m_cutorch_CudaHalfTensor_maskedFill},
{"maskedCopy", m_cutorch_CudaHalfTensor_maskedCopy},
{"maskedSelect", m_cutorch_CudaHalfTensor_maskedSelect},
{"gather", m_cutorch_CudaHalfTensor_gather},
{"scatter", m_cutorch_CudaHalfTensor_scatter},
{"sort", m_cutorch_CudaHalfTensor_sort},
{"squeeze", m_cutorch_CudaHalfTensor_squeeze},
{"abs", m_cutorch_CudaHalfTensor_abs},
{"sign", m_cutorch_CudaHalfTensor_sign},
{"cat", m_cutorch_CudaHalfTensor_cat},
{"log", m_cutorch_CudaHalfTensor_log},
{"log1p", m_cutorch_CudaHalfTensor_log1p},
{"exp", m_cutorch_CudaHalfTensor_exp},
{"cos", m_cutorch_CudaHalfTensor_cos},
{"acos", m_cutorch_CudaHalfTensor_acos},
{"cosh", m_cutorch_CudaHalfTensor_cosh},
{"sin", m_cutorch_CudaHalfTensor_sin},
{"asin", m_cutorch_CudaHalfTensor_asin},
{"sinh", m_cutorch_CudaHalfTensor_sinh},
{"tan", m_cutorch_CudaHalfTensor_tan},
{"atan", m_cutorch_CudaHalfTensor_atan},
{"tanh", m_cutorch_CudaHalfTensor_tanh},
{"sqrt", m_cutorch_CudaHalfTensor_sqrt},
{"rsqrt", m_cutorch_CudaHalfTensor_rsqrt},
{"sigmoid", m_cutorch_CudaHalfTensor_sigmoid},
{"cinv", m_cutorch_CudaHalfTensor_cinv},
{"ceil", m_cutorch_CudaHalfTensor_ceil},
{"floor", m_cutorch_CudaHalfTensor_floor},
{"neg", m_cutorch_CudaHalfTensor_neg},
{"round", m_cutorch_CudaHalfTensor_round},
{"trunc", m_cutorch_CudaHalfTensor_trunc},
{"frac", m_cutorch_CudaHalfTensor_frac},
{"norm", m_cutorch_CudaHalfTensor_norm},
{"renorm", m_cutorch_CudaHalfTensor_renorm},
{"var", m_cutorch_CudaHalfTensor_var},
{"std", m_cutorch_CudaHalfTensor_std},
{"lerp", m_cutorch_CudaHalfTensor_lerp},
{"mv", m_cutorch_CudaHalfTensor_mv},
{"mm", m_cutorch_CudaHalfTensor_mm},
{"bmm", m_cutorch_CudaHalfTensor_bmm},
{"ger", m_cutorch_CudaHalfTensor_ger},
{"addmv", m_cutorch_CudaHalfTensor_addmv},
{"addmm", m_cutorch_CudaHalfTensor_addmm},
{"addr", m_cutorch_CudaHalfTensor_addr},
{"baddbmm", m_cutorch_CudaHalfTensor_baddbmm},
{"addbmm", m_cutorch_CudaHalfTensor_addbmm},
{"dot", m_cutorch_CudaHalfTensor_dot},
{NULL, NULL}
};

static const struct luaL_Reg cutorch_CudaHalfTensorMath__ [] = {
{"fill", cutorch_CudaHalfTensor_fill},
{"zero", cutorch_CudaHalfTensor_zero},
{"zeros", cutorch_CudaHalfTensor_zeros},
{"ones", cutorch_CudaHalfTensor_ones},
{"reshape", cutorch_CudaHalfTensor_reshape},
{"numel", cutorch_CudaHalfTensor_numel},
{"add", cutorch_CudaHalfTensor_add},
{"csub", cutorch_CudaHalfTensor_csub},
{"mul", cutorch_CudaHalfTensor_mul},
{"clamp", cutorch_CudaHalfTensor_clamp},
{"cross", cutorch_CudaHalfTensor_cross},
{"div", cutorch_CudaHalfTensor_div},
{"cmul", cutorch_CudaHalfTensor_cmul},
{"cpow", cutorch_CudaHalfTensor_cpow},
{"cdiv", cutorch_CudaHalfTensor_cdiv},
{"addcmul", cutorch_CudaHalfTensor_addcmul},
{"addcdiv", cutorch_CudaHalfTensor_addcdiv},
{"min", cutorch_CudaHalfTensor_min},
{"max", cutorch_CudaHalfTensor_max},
{"cmin", cutorch_CudaHalfTensor_cmin},
{"cmax", cutorch_CudaHalfTensor_cmax},
{"lt", cutorch_CudaHalfTensor_lt},
{"gt", cutorch_CudaHalfTensor_gt},
{"le", cutorch_CudaHalfTensor_le},
{"ge", cutorch_CudaHalfTensor_ge},
{"eq", cutorch_CudaHalfTensor_eq},
{"ne", cutorch_CudaHalfTensor_ne},
{"sum", cutorch_CudaHalfTensor_sum},
{"prod", cutorch_CudaHalfTensor_prod},
{"mean", cutorch_CudaHalfTensor_mean},
{"maskedFill", cutorch_CudaHalfTensor_maskedFill},
{"maskedCopy", cutorch_CudaHalfTensor_maskedCopy},
{"maskedSelect", cutorch_CudaHalfTensor_maskedSelect},
{"gather", cutorch_CudaHalfTensor_gather},
{"scatter", cutorch_CudaHalfTensor_scatter},
{"sort", cutorch_CudaHalfTensor_sort},
{"squeeze", cutorch_CudaHalfTensor_squeeze},
{"abs", cutorch_CudaHalfTensor_abs},
{"sign", cutorch_CudaHalfTensor_sign},
{"cat", cutorch_CudaHalfTensor_cat},
{"log", cutorch_CudaHalfTensor_log},
{"log1p", cutorch_CudaHalfTensor_log1p},
{"exp", cutorch_CudaHalfTensor_exp},
{"cos", cutorch_CudaHalfTensor_cos},
{"acos", cutorch_CudaHalfTensor_acos},
{"cosh", cutorch_CudaHalfTensor_cosh},
{"sin", cutorch_CudaHalfTensor_sin},
{"asin", cutorch_CudaHalfTensor_asin},
{"sinh", cutorch_CudaHalfTensor_sinh},
{"tan", cutorch_CudaHalfTensor_tan},
{"atan", cutorch_CudaHalfTensor_atan},
{"tanh", cutorch_CudaHalfTensor_tanh},
{"sqrt", cutorch_CudaHalfTensor_sqrt},
{"rsqrt", cutorch_CudaHalfTensor_rsqrt},
{"sigmoid", cutorch_CudaHalfTensor_sigmoid},
{"cinv", cutorch_CudaHalfTensor_cinv},
{"ceil", cutorch_CudaHalfTensor_ceil},
{"floor", cutorch_CudaHalfTensor_floor},
{"neg", cutorch_CudaHalfTensor_neg},
{"round", cutorch_CudaHalfTensor_round},
{"trunc", cutorch_CudaHalfTensor_trunc},
{"frac", cutorch_CudaHalfTensor_frac},
{"norm", cutorch_CudaHalfTensor_norm},
{"renorm", cutorch_CudaHalfTensor_renorm},
{"var", cutorch_CudaHalfTensor_var},
{"std", cutorch_CudaHalfTensor_std},
{"lerp", cutorch_CudaHalfTensor_lerp},
{"mv", cutorch_CudaHalfTensor_mv},
{"mm", cutorch_CudaHalfTensor_mm},
{"bmm", cutorch_CudaHalfTensor_bmm},
{"ger", cutorch_CudaHalfTensor_ger},
{"addmv", cutorch_CudaHalfTensor_addmv},
{"addmm", cutorch_CudaHalfTensor_addmm},
{"addr", cutorch_CudaHalfTensor_addr},
{"baddbmm", cutorch_CudaHalfTensor_baddbmm},
{"addbmm", cutorch_CudaHalfTensor_addbmm},
{"dot", cutorch_CudaHalfTensor_dot},
{NULL, NULL}
};

void cutorch_CudaHalfTensorMath_init(lua_State *L)
{
  luaT_pushmetatable(L, "torch.CudaHalfTensor");

  /* register methods */
  luaL_setfuncs(L, m_cutorch_CudaHalfTensorMath__, 0);

  /* register functions into the "torch" field of the tensor metaclass */
  lua_pushstring(L, "torch");
  lua_newtable(L);
  luaL_setfuncs(L, cutorch_CudaHalfTensorMath__, 0);
  lua_rawset(L, -3);
  lua_pop(L, 1);
}

#endif
static int cutorch_CudaTensor_zero(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor*", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_zero(default_arg1,arg1);
return 1;
}

static int cutorch_CudaTensor_fill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* float", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_fill(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_zeros(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 1
&& cutorch_islongargs(L, 1)
)
{
arg2 = cutorch_checklongargs(L, 1);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_zeros(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int cutorch_CudaTensor_ones(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 1
&& cutorch_islongargs(L, 1)
)
{
arg2 = cutorch_checklongargs(L, 1);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_ones(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int cutorch_CudaTensor_reshape(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THLongStorage *arg3 = NULL;
if(narg >= 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg3 = cutorch_checklongargs(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg >= 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& cutorch_islongargs(L, 3)
)
{
arg1_idx = 1;
arg3 = cutorch_checklongargs(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_reshape(default_arg1,arg1,arg2,arg3);
THLongStorage_free(arg3);
return 1;
}

static int cutorch_CudaTensor_numel(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
long arg2 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor", type_buf);
}
arg2 = THCudaTensor_numel(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}

static int cutorch_CudaTensor_add(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 1;
THCudaTensor *arg7 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 2;
arg4 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 2;
arg6 = (float)lua_tonumber(L, 2);
arg4 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor float | [*CudaTensor*] CudaTensor [float] CudaTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_add(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaTensor");
THCudaTensor_cadd(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_csub(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 1;
THCudaTensor *arg7 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 2;
arg4 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 2;
arg6 = (float)lua_tonumber(L, 2);
arg4 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor float | [*CudaTensor*] CudaTensor [float] CudaTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_sub(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaTensor");
THCudaTensor_csub(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_mul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor float", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_mul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_div(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor float", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_div(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_cmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_cmul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_cpow(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_cpow(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_cdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_cdiv(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_addcmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 1;
THCudaTensor *arg4 = NULL;
THCudaTensor *arg5 = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor [float] CudaTensor CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_addcmul(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int cutorch_CudaTensor_addcdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 1;
THCudaTensor *arg4 = NULL;
THCudaTensor *arg5 = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor [float] CudaTensor CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_addcdiv(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int cutorch_CudaTensor_maskedFill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
float arg3 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* CudaByteTensor float", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_maskedFill(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_maskedCopy(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* CudaByteTensor CudaTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_maskedCopy(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_maskedSelect(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_maskedSelect(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_gather(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
THCudaTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaTensor *arg6 = NULL;
long arg7 = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaTensor *dummyIndexTensor = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
THCudaTensor_checkGPU(cutorch_getstate(L), 1, arg4);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg4);
		  THCudaTensor_resize(state, arg1, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg6 = (decltype(arg6))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 2;
arg7 = (long)lua_tonumber(L, 2)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaFloat(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
arg5 = THCudaTensor_new(cutorch_getstate(L));
THCudaTensor_checkGPU(cutorch_getstate(L), 1, arg8);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg8);
		  THCudaTensor_resize(state, arg5, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg7 = (long)lua_tonumber(L, 3)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaFloat(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor index CudaLongTensor | [*CudaTensor*] CudaTensor index CudaTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_gather(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaTensor");
THCudaTensor_gather(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int cutorch_CudaTensor_scatter(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
THCudaTensor *arg4 = NULL;
THCudaTensor *arg5 = NULL;
int arg5_idx = 0;
long arg6 = 0;
THCudaLongTensor *arg7 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaTensor *dummyIndexTensor = NULL;
THCudaTensor *arg8 = NULL;
THCudaTensor *arg9 = NULL;
int arg9_idx = 0;
long arg10 = 0;
THCudaLongTensor *arg11 = NULL;
float arg12 = 0;
THCudaTensor *arg13 = NULL;
int arg13_idx = 0;
long arg14 = 0;
THCudaLongTensor *arg15 = NULL;
float arg16 = 0;
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = (long)lua_tonumber(L, 2)-1;
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg6 = (long)lua_tonumber(L, 2)-1;
arg7 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg7, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaFloat(default_arg1, arg7, dummyIndexTensor);
indexLongTensor = arg7;
}
else if(narg == 4
&& (arg9 = (decltype(arg9))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 3;
arg9_idx = 1;
arg10 = (long)lua_tonumber(L, 2)-1;
arg12 = (float)lua_tonumber(L, 4);
}
else if(narg == 4
&& (arg13 = (decltype(arg13))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 4;
arg13_idx = 1;
arg14 = (long)lua_tonumber(L, 2)-1;
arg15 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg15, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaFloat(default_arg1, arg15, dummyIndexTensor);
indexLongTensor = arg15;
arg16 = (float)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* index CudaLongTensor CudaTensor | *CudaTensor* index CudaTensor CudaTensor | *CudaTensor* index CudaLongTensor float | *CudaTensor* index CudaTensor float", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaTensor_scatter(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg5_idx);
THCudaTensor_scatter(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
else if(argset == 3)
{
lua_pushvalue(L, arg9_idx);
THCudaTensor_scatterFill(default_arg1,arg9,arg10,arg11,arg12);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg13_idx);
THCudaTensor_scatterFill(default_arg1,arg13,arg14,arg15,arg16);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int cutorch_CudaTensor_sort(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaTensor *arg3 = NULL;
long arg4 = 0;
int arg5 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg2_idx = 1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg4 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isboolean(L, 2)
)
{
arg5 = lua_toboolean(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isboolean(L, 3)
)
{
arg1_idx = 1;
arg5 = lua_toboolean(L, 3);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isboolean(L, 3)
)
{
arg2_idx = 1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg4 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = lua_toboolean(L, 4);
arg4 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = lua_toboolean(L, 5);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] [*CudaLongTensor*] CudaTensor [index] [boolean]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
if(arg2_idx)
lua_pushvalue(L, arg2_idx);
else
luaT_pushudata(L, arg2, "torch.CudaLongTensor");
THCudaTensor_sort(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 2;
}

static int cutorch_CudaTensor_topk(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaTensor *arg3 = NULL;
long arg4 = 1;
long arg5 = 0;
int arg6 = 0;
int arg7 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg2_idx = 1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg4 = (long)lua_tonumber(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4);
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg5 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg2_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 2);
arg5 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg5 = (long)lua_tonumber(L, 4)-1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg5 = (long)lua_tonumber(L, 4)-1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
&& lua_isnumber(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4);
arg5 = (long)lua_tonumber(L, 5)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isboolean(L, 2)
)
{
arg6 = lua_toboolean(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isboolean(L, 3)
)
{
arg1_idx = 1;
arg6 = lua_toboolean(L, 3);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isboolean(L, 3)
)
{
arg2_idx = 1;
arg6 = lua_toboolean(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg6 = lua_toboolean(L, 4);
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 2);
arg6 = lua_toboolean(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg6 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg6 = lua_toboolean(L, 4);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4);
arg6 = lua_toboolean(L, 5);
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg5 = (long)lua_tonumber(L, 2)-1;
arg6 = lua_toboolean(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = (long)lua_tonumber(L, 4)-1;
arg6 = lua_toboolean(L, 5);
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg4 = (long)lua_tonumber(L, 2);
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg5 = (long)lua_tonumber(L, 4)-1;
arg6 = lua_toboolean(L, 5);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg5 = (long)lua_tonumber(L, 4)-1;
arg6 = lua_toboolean(L, 5);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
&& lua_isnumber(L, 5)
&& lua_isboolean(L, 6)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4);
arg5 = (long)lua_tonumber(L, 5)-1;
arg6 = lua_toboolean(L, 6);
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isboolean(L, 2)
)
{
arg7 = lua_toboolean(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isboolean(L, 3)
)
{
arg1_idx = 1;
arg7 = lua_toboolean(L, 3);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isboolean(L, 3)
)
{
arg2_idx = 1;
arg7 = lua_toboolean(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg7 = lua_toboolean(L, 4);
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 2);
arg7 = lua_toboolean(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg7 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg7 = lua_toboolean(L, 4);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4);
arg7 = lua_toboolean(L, 5);
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg5 = (long)lua_tonumber(L, 2)-1;
arg7 = lua_toboolean(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg7 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg7 = lua_toboolean(L, 4);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = (long)lua_tonumber(L, 4)-1;
arg7 = lua_toboolean(L, 5);
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg4 = (long)lua_tonumber(L, 2);
arg5 = (long)lua_tonumber(L, 3)-1;
arg7 = lua_toboolean(L, 4);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg5 = (long)lua_tonumber(L, 4)-1;
arg7 = lua_toboolean(L, 5);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg5 = (long)lua_tonumber(L, 4)-1;
arg7 = lua_toboolean(L, 5);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
&& lua_isnumber(L, 5)
&& lua_isboolean(L, 6)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4);
arg5 = (long)lua_tonumber(L, 5)-1;
arg7 = lua_toboolean(L, 6);
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isboolean(L, 2)
&& lua_isboolean(L, 3)
)
{
arg6 = lua_toboolean(L, 2);
arg7 = lua_toboolean(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isboolean(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg6 = lua_toboolean(L, 3);
arg7 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isboolean(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg6 = lua_toboolean(L, 3);
arg7 = lua_toboolean(L, 4);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isboolean(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg6 = lua_toboolean(L, 4);
arg7 = lua_toboolean(L, 5);
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
&& lua_isboolean(L, 4)
)
{
arg4 = (long)lua_tonumber(L, 2);
arg6 = lua_toboolean(L, 3);
arg7 = lua_toboolean(L, 4);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg6 = lua_toboolean(L, 4);
arg7 = lua_toboolean(L, 5);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 5
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
&& lua_isboolean(L, 5)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg6 = lua_toboolean(L, 4);
arg7 = lua_toboolean(L, 5);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
&& lua_isboolean(L, 6)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4);
arg6 = lua_toboolean(L, 5);
arg7 = lua_toboolean(L, 6);
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
&& lua_isboolean(L, 4)
)
{
arg5 = (long)lua_tonumber(L, 2)-1;
arg6 = lua_toboolean(L, 3);
arg7 = lua_toboolean(L, 4);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
arg7 = lua_toboolean(L, 5);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
&& lua_isboolean(L, 5)
)
{
arg2_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
arg7 = lua_toboolean(L, 5);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
&& lua_isboolean(L, 6)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = (long)lua_tonumber(L, 4)-1;
arg6 = lua_toboolean(L, 5);
arg7 = lua_toboolean(L, 6);
}
else if(narg == 5
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
&& lua_isboolean(L, 5)
)
{
arg4 = (long)lua_tonumber(L, 2);
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
arg7 = lua_toboolean(L, 5);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
&& lua_isboolean(L, 6)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg5 = (long)lua_tonumber(L, 4)-1;
arg6 = lua_toboolean(L, 5);
arg7 = lua_toboolean(L, 6);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
&& lua_isboolean(L, 6)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg5 = (long)lua_tonumber(L, 4)-1;
arg6 = lua_toboolean(L, 5);
arg7 = lua_toboolean(L, 6);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 7
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
&& lua_isnumber(L, 5)
&& lua_isboolean(L, 6)
&& lua_isboolean(L, 7)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4);
arg5 = (long)lua_tonumber(L, 5)-1;
arg6 = lua_toboolean(L, 6);
arg7 = lua_toboolean(L, 7);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] [*CudaLongTensor*] CudaTensor [long] [index] [boolean] [boolean]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
if(arg2_idx)
lua_pushvalue(L, arg2_idx);
else
luaT_pushudata(L, arg2, "torch.CudaLongTensor");
THCudaTensor_topk(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6,arg7);
return 2;
}

static int cutorch_CudaTensor_mv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
THCudaTensor *arg3 = NULL;
float arg4 = 1;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
THCudaTensor_checkGPU(cutorch_getstate(L), 1, arg5);
THCudaTensor_resize1d(cutorch_getstate(L), arg1, arg5->size[0]);
arg3 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor~2D CudaTensor~1D", type_buf);
}
THCudaTensor_zero(cutorch_getstate(L), arg1);
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_addmv(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaTensor_mm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
THCudaTensor *arg3 = NULL;
float arg4 = 1;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg6->nDimension == 2)
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
THCudaTensor_checkGPU(cutorch_getstate(L), 2, arg5, arg6);
THCudaTensor_resize2d(cutorch_getstate(L), arg1, arg5->size[0], arg6->size[1]);
arg3 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg6->nDimension == 2)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor~2D CudaTensor~2D", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_addmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaTensor_bmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
THCudaTensor *arg3 = NULL;
float arg4 = 1;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
THCudaTensor_checkGPU(cutorch_getstate(L), 2, arg5, arg6);
THCudaTensor_resize3d(cutorch_getstate(L), arg1, arg5->size[0], arg5->size[1], arg6->size[2]);
arg3 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor~3D CudaTensor~3D", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_baddbmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaTensor_ger(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
THCudaTensor *arg3 = NULL;
float arg4 = 1;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
THCudaTensor_checkGPU(cutorch_getstate(L), 2, arg5, arg6);
THCudaTensor_resize2d(cutorch_getstate(L), arg1, arg5->size[0], arg6->size[0]);
arg3 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor~1D CudaTensor~1D", type_buf);
}
THCudaTensor_zero(cutorch_getstate(L), arg1);
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_addr(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaTensor_addmv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
THCudaTensor *arg3 = NULL;
float arg4 = 1;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg3->nDimension == 1)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 1)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
}
else if(narg == 4
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 1)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
arg2 = (float)lua_tonumber(L, 1);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg3->nDimension == 1)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg3->nDimension == 1)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
arg4 = (float)lua_tonumber(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 1)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg4 = (float)lua_tonumber(L, 3);
}
else if(narg == 5
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 1)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
arg2 = (float)lua_tonumber(L, 1);
arg4 = (float)lua_tonumber(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg3->nDimension == 1)
&& lua_isnumber(L, 4)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 6, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
arg4 = (float)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] [float] CudaTensor~1D [float] CudaTensor~2D CudaTensor~1D", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_addmv(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaTensor_addmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
THCudaTensor *arg3 = NULL;
float arg4 = 1;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg6->nDimension == 2)
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 2)
)
{
arg1_idx = 1;
}
else if(narg == 4
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 2)
)
{
arg2 = (float)lua_tonumber(L, 1);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg6->nDimension == 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 2)
)
{
arg4 = (float)lua_tonumber(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg6->nDimension == 2)
)
{
arg1_idx = 1;
arg4 = (float)lua_tonumber(L, 3);
}
else if(narg == 5
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg6->nDimension == 2)
)
{
arg2 = (float)lua_tonumber(L, 1);
arg4 = (float)lua_tonumber(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 4)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 6, "torch.CudaTensor")) && (arg6->nDimension == 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
arg4 = (float)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] [float] CudaTensor~2D [float] CudaTensor~2D CudaTensor~2D", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_addmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaTensor_addr(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
THCudaTensor *arg3 = NULL;
float arg4 = 1;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
}
else if(narg == 4
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
arg2 = (float)lua_tonumber(L, 1);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
arg4 = (float)lua_tonumber(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg4 = (float)lua_tonumber(L, 3);
}
else if(narg == 5
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
arg2 = (float)lua_tonumber(L, 1);
arg4 = (float)lua_tonumber(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 4)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 6, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
arg4 = (float)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] [float] CudaTensor~2D [float] CudaTensor~1D CudaTensor~1D", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_addr(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaTensor_baddbmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
THCudaTensor *arg3 = NULL;
float arg4 = 1;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg3->nDimension == 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
}
else if(narg == 4
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
arg2 = (float)lua_tonumber(L, 1);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg3->nDimension == 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg3->nDimension == 3)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
arg4 = (float)lua_tonumber(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 3)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg4 = (float)lua_tonumber(L, 3);
}
else if(narg == 5
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 3)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
arg2 = (float)lua_tonumber(L, 1);
arg4 = (float)lua_tonumber(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg3->nDimension == 3)
&& lua_isnumber(L, 4)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 6, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
arg4 = (float)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] [float] CudaTensor~3D [float] CudaTensor~3D CudaTensor~3D", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_baddbmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaTensor_addbmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
THCudaTensor *arg3 = NULL;
float arg4 = 1;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
}
else if(narg == 4
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
arg2 = (float)lua_tonumber(L, 1);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
arg4 = (float)lua_tonumber(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg4 = (float)lua_tonumber(L, 3);
}
else if(narg == 5
&& lua_isnumber(L, 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
arg2 = (float)lua_tonumber(L, 1);
arg4 = (float)lua_tonumber(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 4)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 6, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
arg4 = (float)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] [float] CudaTensor~2D [float] CudaTensor~3D CudaTensor~3D", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_addbmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int cutorch_CudaTensor_dot(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor CudaTensor", type_buf);
}
arg3 = THCudaTensor_dot(default_arg1,arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}

static int cutorch_CudaTensor_sum(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
float arg2 = 0;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor | [*CudaTensor*] CudaTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaTensor_sumall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
THCudaTensor_sum(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_cumsum(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
long arg3 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor [index]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_cumsum(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_cumprod(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
long arg3 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor [index]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_cumprod(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_prod(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
float arg2 = 0;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor | [*CudaTensor*] CudaTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaTensor_prodall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
THCudaTensor_prod(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_min(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
float arg2 = 0;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor | [*CudaTensor*] [*CudaLongTensor*] CudaTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaTensor_minall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaTensor_min(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int cutorch_CudaTensor_max(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
float arg2 = 0;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor | [*CudaTensor*] [*CudaLongTensor*] CudaTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaTensor_maxall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaTensor_max(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int cutorch_CudaTensor_cmin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (float)lua_tonumber(L, 2);
arg4 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor CudaTensor | [*CudaTensor*] CudaTensor float", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_cmin(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaTensor");
THCudaTensor_cminValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_cmax(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (float)lua_tonumber(L, 2);
arg4 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor CudaTensor | [*CudaTensor*] CudaTensor float", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_cmax(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaTensor");
THCudaTensor_cmaxValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_cross(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
long arg4 = -1;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor CudaTensor [index]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_cross(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaTensor_tril(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
int arg3 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor [int]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_tril(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_triu(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
int arg3 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor [int]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_triu(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_diag(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
int arg3 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor [int]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_diag(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_trace(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
float arg2 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor", type_buf);
}
arg2 = THCudaTensor_trace(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}

static int cutorch_CudaTensor_log(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_log(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_log1p(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_log1p(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_exp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_exp(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_cos(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_cos(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_acos(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_acos(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_cosh(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_cosh(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_sin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_sin(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_asin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_asin(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_sinh(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_sinh(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_tan(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_tan(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_atan(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_atan(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_tanh(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_tanh(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_sqrt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_sqrt(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_rsqrt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_rsqrt(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_sigmoid(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_sigmoid(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_cinv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_cinv(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_ceil(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_ceil(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_floor(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_floor(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_neg(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_neg(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_abs(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_abs(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_sign(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_sign(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_round(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_round(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_trunc(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_trunc(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_frac(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_frac(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_atan2(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor CudaTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_atan2(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_lerp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
float arg4 = 0;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg4 = (float)lua_tonumber(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = (float)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor CudaTensor float", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_lerp(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaTensor_pow(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
float arg5 = 0;
THCudaTensor *arg6 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 2
&& lua_isnumber(L, 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 2;
arg5 = (float)lua_tonumber(L, 1);
arg4 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg5 = (float)lua_tonumber(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor float | [*CudaTensor*] float CudaTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_pow(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaTensor");
THCudaTensor_tpow(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_rand(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 1
&& cutorch_islongargs(L, 1)
)
{
arg2 = cutorch_checklongargs(L, 1);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_rand(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int cutorch_CudaTensor_randn(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 1
&& cutorch_islongargs(L, 1)
)
{
arg2 = cutorch_checklongargs(L, 1);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_randn(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int cutorch_CudaTensor_multinomial(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
int arg3 = 0;
int arg4 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg3 = (int)lua_tonumber(L, 2);
arg4 = lua_toboolean(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
arg4 = lua_toboolean(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor int [boolean]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_multinomial(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaTensor_clamp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
float arg4 = 0;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg3 = (float)lua_tonumber(L, 2);
arg4 = (float)lua_tonumber(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
arg4 = (float)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor float float", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_clamp(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaTensor_lt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaTensor *arg8 = NULL;
THCudaTensor *arg9 = NULL;
THCudaTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaTensor *arg11 = NULL;
THCudaTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaTensor float | *CudaTensor* CudaTensor float | [*CudaByteTensor*] CudaTensor CudaTensor | *CudaTensor* CudaTensor CudaTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaTensor_ltValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaTensor_ltValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaTensor_ltTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaTensor_ltTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_gt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaTensor *arg8 = NULL;
THCudaTensor *arg9 = NULL;
THCudaTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaTensor *arg11 = NULL;
THCudaTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaTensor float | *CudaTensor* CudaTensor float | [*CudaByteTensor*] CudaTensor CudaTensor | *CudaTensor* CudaTensor CudaTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaTensor_gtValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaTensor_gtValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaTensor_gtTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaTensor_gtTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_le(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaTensor *arg8 = NULL;
THCudaTensor *arg9 = NULL;
THCudaTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaTensor *arg11 = NULL;
THCudaTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaTensor float | *CudaTensor* CudaTensor float | [*CudaByteTensor*] CudaTensor CudaTensor | *CudaTensor* CudaTensor CudaTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaTensor_leValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaTensor_leValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaTensor_leTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaTensor_leTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_ge(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaTensor *arg8 = NULL;
THCudaTensor *arg9 = NULL;
THCudaTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaTensor *arg11 = NULL;
THCudaTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaTensor float | *CudaTensor* CudaTensor float | [*CudaByteTensor*] CudaTensor CudaTensor | *CudaTensor* CudaTensor CudaTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaTensor_geValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaTensor_geValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaTensor_geTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaTensor_geTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_eq(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaTensor *arg8 = NULL;
THCudaTensor *arg9 = NULL;
THCudaTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaTensor *arg11 = NULL;
THCudaTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaTensor float | *CudaTensor* CudaTensor float | [*CudaByteTensor*] CudaTensor CudaTensor | *CudaTensor* CudaTensor CudaTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaTensor_eqValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaTensor_eqValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaTensor_eqTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaTensor_eqTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_ne(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaTensor *arg8 = NULL;
THCudaTensor *arg9 = NULL;
THCudaTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaTensor *arg11 = NULL;
THCudaTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaTensor float | *CudaTensor* CudaTensor float | [*CudaByteTensor*] CudaTensor CudaTensor | *CudaTensor* CudaTensor CudaTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaTensor_neValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaTensor_neValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaTensor_neTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaTensor_neTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_cat(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
long arg4 = 0;
THCudaTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaTensor **arg6_data = NULL;
long arg6_size = 0;
int arg6_i = 0;
long arg7 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg4 = THCudaTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg4 = THCudaTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 1
&& torch_isnonemptytable(L, 1)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaTensor**)THAlloc(arg6_size * sizeof(THCudaTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaTensor*)luaT_toudata(L, -1, "torch.CudaTensor")))
    luaL_error(L, "expected CudaTensor in tensor array");
  lua_pop(L, 1);
}

arg5 = THCudaTensor_new(cutorch_getstate(L));
arg7 = THCudaTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& torch_isnonemptytable(L, 2)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaTensor**)THAlloc(arg6_size * sizeof(THCudaTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaTensor*)luaT_toudata(L, -1, "torch.CudaTensor")))
    luaL_error(L, "expected CudaTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = THCudaTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& torch_isnonemptytable(L, 1)
&& lua_isnumber(L, 2)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaTensor**)THAlloc(arg6_size * sizeof(THCudaTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaTensor*)luaT_toudata(L, -1, "torch.CudaTensor")))
    luaL_error(L, "expected CudaTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 2)-1;
arg5 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& torch_isnonemptytable(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaTensor**)THAlloc(arg6_size * sizeof(THCudaTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaTensor*)luaT_toudata(L, -1, "torch.CudaTensor")))
    luaL_error(L, "expected CudaTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor CudaTensor [index] | [*CudaTensor*] {CudaTensor+} [index]", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_cat(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaTensor");
THCudaTensor_catArray(default_arg1,arg5,arg6_data,arg6_size,arg7);
THFree(arg6_data);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_geometric(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* float", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_geometric(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_bernoulli(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0.5;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [float]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_bernoulli(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_uniform(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
float arg3 = 1;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
arg3 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [float] [float]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_uniform(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_normal(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
float arg3 = 1;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
arg3 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [float] [float]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_normal(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_cauchy(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
float arg3 = 1;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
arg3 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [float] [float]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_cauchy(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_logNormal(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
float arg3 = 2;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
arg3 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [float] [float]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_logNormal(default_arg1,arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_exponential(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* float", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_exponential(default_arg1,arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_gesv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaTensor *arg3 = NULL;
THCudaTensor *arg4 = NULL;
THCudaTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaTensor *arg6 = NULL;
int arg6_idx = 0;
THCudaTensor *arg7 = NULL;
THCudaTensor *arg8 = NULL;
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2_idx = 2;
}
else if(narg == 2
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 2;
arg5 = THCudaTensor_new(cutorch_getstate(L));
arg6 = THCudaTensor_new(cutorch_getstate(L));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* *CudaTensor* CudaTensor CudaTensor | CudaTensor CudaTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
lua_pushvalue(L, arg2_idx);
THCudaTensor_gesv(default_arg1,arg1,arg2,arg3,arg4);
return 2;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaTensor");
if(arg6_idx)
lua_pushvalue(L, arg6_idx);
else
luaT_pushudata(L, arg6, "torch.CudaTensor");
THCudaTensor_gesv(default_arg1,arg5,arg6,arg7,arg8);
return 2;
}
return 0;
}

static int cutorch_CudaTensor_gels(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaTensor *arg3 = NULL;
THCudaTensor *arg4 = NULL;
THCudaTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaTensor *arg6 = NULL;
int arg6_idx = 0;
THCudaTensor *arg7 = NULL;
THCudaTensor *arg8 = NULL;
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2_idx = 2;
}
else if(narg == 2
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 2;
arg5 = THCudaTensor_new(cutorch_getstate(L));
arg6 = THCudaTensor_new(cutorch_getstate(L));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* *CudaTensor* CudaTensor CudaTensor | CudaTensor CudaTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
lua_pushvalue(L, arg2_idx);
THCudaTensor_gels(default_arg1,arg1,arg2,arg3,arg4);
return 2;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaTensor");
if(arg6_idx)
lua_pushvalue(L, arg6_idx);
else
luaT_pushudata(L, arg6, "torch.CudaTensor");
THCudaTensor_gels(default_arg1,arg5,arg6,arg7,arg8);
return 2;
}
return 0;
}

static int cutorch_CudaTensor_symeig(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaTensor *arg3 = NULL;
const char *arg4 = NULL;
char arg4_default = 'N';
const char *arg5 = NULL;
char arg5_default = 'U';
THCudaTensor *arg6 = NULL;
int arg6_idx = 0;
THCudaTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaTensor *arg8 = NULL;
const char *arg9 = NULL;
char arg9_default = 'N';
const char *arg10 = NULL;
char arg10_default = 'U';
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2_idx = 2;
arg4 = &arg4_default;
arg5 = &arg5_default;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg4 = lua_tostring(L, 4)) && (*arg4 == 'N' || *arg4 == 'V')
)
{
argset = 1;
arg1_idx = 1;
arg2_idx = 2;
arg5 = &arg5_default;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg5 = lua_tostring(L, 4)) && (*arg5 == 'U' || *arg5 == 'L')
)
{
argset = 1;
arg1_idx = 1;
arg2_idx = 2;
arg4 = &arg4_default;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg4 = lua_tostring(L, 4)) && (*arg4 == 'N' || *arg4 == 'V')
&& (arg5 = lua_tostring(L, 5)) && (*arg5 == 'U' || *arg5 == 'L')
)
{
argset = 1;
arg1_idx = 1;
arg2_idx = 2;
}
else if(narg == 1
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 2;
arg6 = THCudaTensor_new(cutorch_getstate(L));
arg7 = THCudaTensor_new(cutorch_getstate(L));
arg9 = &arg9_default;
arg10 = &arg10_default;
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg9 = lua_tostring(L, 2)) && (*arg9 == 'N' || *arg9 == 'V')
)
{
argset = 2;
arg6 = THCudaTensor_new(cutorch_getstate(L));
arg7 = THCudaTensor_new(cutorch_getstate(L));
arg10 = &arg10_default;
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg10 = lua_tostring(L, 2)) && (*arg10 == 'U' || *arg10 == 'L')
)
{
argset = 2;
arg6 = THCudaTensor_new(cutorch_getstate(L));
arg7 = THCudaTensor_new(cutorch_getstate(L));
arg9 = &arg9_default;
}
else if(narg == 3
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg9 = lua_tostring(L, 2)) && (*arg9 == 'N' || *arg9 == 'V')
&& (arg10 = lua_tostring(L, 3)) && (*arg10 == 'U' || *arg10 == 'L')
)
{
argset = 2;
arg6 = THCudaTensor_new(cutorch_getstate(L));
arg7 = THCudaTensor_new(cutorch_getstate(L));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* *CudaTensor* CudaTensor [(N|V)] [(U|L)] | CudaTensor [(N|V)] [(U|L)]", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
lua_pushvalue(L, arg2_idx);
THCudaTensor_syev(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 2;
}
else if(argset == 2)
{
if(arg6_idx)
lua_pushvalue(L, arg6_idx);
else
luaT_pushudata(L, arg6, "torch.CudaTensor");
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaTensor");
THCudaTensor_syev(default_arg1,arg6,arg7,arg8,arg9,arg10);
return 2;
}
return 0;
}

static int cutorch_CudaTensor_eig(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaTensor *arg3 = NULL;
const char *arg4 = NULL;
char arg4_default = 'N';
THCudaTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaTensor *arg6 = NULL;
int arg6_idx = 0;
THCudaTensor *arg7 = NULL;
const char *arg8 = NULL;
char arg8_default = 'N';
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2_idx = 2;
arg4 = &arg4_default;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg4 = lua_tostring(L, 4)) && (*arg4 == 'N' || *arg4 == 'V')
)
{
argset = 1;
arg1_idx = 1;
arg2_idx = 2;
}
else if(narg == 1
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 2;
arg5 = THCudaTensor_new(cutorch_getstate(L));
arg6 = THCudaTensor_new(cutorch_getstate(L));
arg8 = &arg8_default;
}
else if(narg == 2
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg8 = lua_tostring(L, 2)) && (*arg8 == 'N' || *arg8 == 'V')
)
{
argset = 2;
arg5 = THCudaTensor_new(cutorch_getstate(L));
arg6 = THCudaTensor_new(cutorch_getstate(L));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* *CudaTensor* CudaTensor [(N|V)] | CudaTensor [(N|V)]", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
lua_pushvalue(L, arg2_idx);
THCudaTensor_geev(default_arg1,arg1,arg2,arg3,arg4);
return 2;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaTensor");
if(arg6_idx)
lua_pushvalue(L, arg6_idx);
else
luaT_pushudata(L, arg6, "torch.CudaTensor");
THCudaTensor_geev(default_arg1,arg5,arg6,arg7,arg8);
return 2;
}
return 0;
}

static int cutorch_CudaTensor_svd(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
const char *arg5 = NULL;
char arg5_default = 'S';
THCudaTensor *arg6 = NULL;
int arg6_idx = 0;
THCudaTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaTensor *arg8 = NULL;
int arg8_idx = 0;
THCudaTensor *arg9 = NULL;
const char *arg10 = NULL;
char arg10_default = 'S';
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2_idx = 2;
arg3_idx = 3;
arg5 = &arg5_default;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaTensor"))
&& (arg5 = lua_tostring(L, 5)) && (*arg5 == 'A' || *arg5 == 'S')
)
{
argset = 1;
arg1_idx = 1;
arg2_idx = 2;
arg3_idx = 3;
}
else if(narg == 1
&& (arg9 = (decltype(arg9))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 2;
arg6 = THCudaTensor_new(cutorch_getstate(L));
arg7 = THCudaTensor_new(cutorch_getstate(L));
arg8 = THCudaTensor_new(cutorch_getstate(L));
arg10 = &arg10_default;
}
else if(narg == 2
&& (arg9 = (decltype(arg9))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg10 = lua_tostring(L, 2)) && (*arg10 == 'A' || *arg10 == 'S')
)
{
argset = 2;
arg6 = THCudaTensor_new(cutorch_getstate(L));
arg7 = THCudaTensor_new(cutorch_getstate(L));
arg8 = THCudaTensor_new(cutorch_getstate(L));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* *CudaTensor* *CudaTensor* CudaTensor [(A|S)] | CudaTensor [(A|S)]", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
lua_pushvalue(L, arg2_idx);
lua_pushvalue(L, arg3_idx);
THCudaTensor_gesvd(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 3;
}
else if(argset == 2)
{
if(arg6_idx)
lua_pushvalue(L, arg6_idx);
else
luaT_pushudata(L, arg6, "torch.CudaTensor");
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaTensor");
if(arg8_idx)
lua_pushvalue(L, arg8_idx);
else
luaT_pushudata(L, arg8, "torch.CudaTensor");
THCudaTensor_gesvd(default_arg1,arg6,arg7,arg8,arg9,arg10);
return 3;
}
return 0;
}

static int cutorch_CudaTensor_inverse(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 1
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 2;
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* CudaTensor | CudaTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaTensor_getri(default_arg1,arg1,arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
THCudaTensor_getri(default_arg1,arg3,arg4);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_potri(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 1
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 2;
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* CudaTensor | CudaTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaTensor_potri(default_arg1,arg1,arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
THCudaTensor_potri(default_arg1,arg3,arg4);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_potrf(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 1
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 2;
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* CudaTensor | CudaTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaTensor_potrf(default_arg1,arg1,arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
THCudaTensor_potrf(default_arg1,arg3,arg4);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_potrs(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 2;
arg4 = THCudaTensor_new(cutorch_getstate(L));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* CudaTensor CudaTensor | CudaTensor CudaTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaTensor_potrs(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaTensor");
THCudaTensor_potrs(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_qr(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaTensor *arg3 = NULL;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaTensor *arg6 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2_idx = 2;
}
else if(narg == 1
&& (arg6 = (decltype(arg6))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 2;
arg4 = THCudaTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_new(cutorch_getstate(L));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* *CudaTensor* CudaTensor | CudaTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
lua_pushvalue(L, arg2_idx);
THCudaTensor_qr(default_arg1,arg1,arg2,arg3);
return 2;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaTensor");
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaTensor");
THCudaTensor_qr(default_arg1,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int cutorch_CudaTensor_mean(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
float arg2 = 0;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor | [*CudaTensor*] CudaTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaTensor_meanall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
THCudaTensor_mean(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_var(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
float arg2 = 0;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
long arg5 = 0;
int arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg6 = lua_toboolean(L, 3);
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor | [*CudaTensor*] CudaTensor index [boolean]", type_buf);
}
if(argset == 1)
{
arg2 = THCudaTensor_varall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
THCudaTensor_var(default_arg1,arg3,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_std(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
float arg2 = 0;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
long arg5 = 0;
int arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg6 = lua_toboolean(L, 3);
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor | [*CudaTensor*] CudaTensor index [boolean]", type_buf);
}
if(argset == 1)
{
arg2 = THCudaTensor_stdall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
THCudaTensor_std(default_arg1,arg3,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_norm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
float arg2 = 2;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 0;
long arg7 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg6 = (float)lua_tonumber(L, 2);
arg7 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
arg7 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor [float] | [*CudaTensor*] CudaTensor float index", type_buf);
}
if(argset == 1)
{
arg3 = THCudaTensor_normall(default_arg1,arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaTensor");
THCudaTensor_norm(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_renorm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
long arg4 = 0;
float arg5 = 0;
if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg3 = (float)lua_tonumber(L, 2);
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = (float)lua_tonumber(L, 4);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
&& lua_isnumber(L, 5)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = (float)lua_tonumber(L, 5);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor float index float", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_renorm(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int cutorch_CudaTensor_dist(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
THCudaTensor *arg2 = NULL;
float arg3 = 2;
float arg4 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg3 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor CudaTensor [float]", type_buf);
}
arg4 = THCudaTensor_dist(default_arg1,arg1,arg2,arg3);
lua_pushnumber(L, (lua_Number)arg4);
return 1;
}

static int cutorch_CudaTensor_squeeze(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor | [*CudaTensor*] CudaTensor index", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_squeeze(default_arg1,arg1,arg2);
if(arg1->nDimension == 1 && arg1->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaTensor_get1d(cutorch_getstate(L), arg1, 0)));
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
{int hasdims = arg4->nDimension > 1;
THCudaTensor_squeeze1d(default_arg1,arg3,arg4,arg5);
if(!hasdims && arg3->nDimension == 1 && arg3->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaTensor_get1d(cutorch_getstate(L), arg3, 0)));}
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_zero(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor*", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_zero(default_arg1,arg1);
return 1;
}

static int m_cutorch_CudaTensor_fill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* float", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_fill(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_zeros(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* (LongStorage | dim1 [dim2...])", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_zeros(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int m_cutorch_CudaTensor_ones(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* (LongStorage | dim1 [dim2...])", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_ones(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int m_cutorch_CudaTensor_reshape(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THLongStorage *arg3 = NULL;
if(narg >= 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg3 = cutorch_checklongargs(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg >= 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& cutorch_islongargs(L, 3)
)
{
arg1_idx = 1;
arg3 = cutorch_checklongargs(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor (LongStorage | dim1 [dim2...])", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_reshape(default_arg1,arg1,arg2,arg3);
THLongStorage_free(arg3);
return 1;
}

static int m_cutorch_CudaTensor_numel(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
long arg2 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor", type_buf);
}
arg2 = THCudaTensor_numel(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}

static int m_cutorch_CudaTensor_add(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 1;
THCudaTensor *arg7 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg5 = arg4;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor] float | *CudaTensor* [CudaTensor] [float] CudaTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaTensor_add(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaTensor_cadd(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_csub(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 1;
THCudaTensor *arg7 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg5 = arg4;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& (arg7 = (decltype(arg7))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor] float | *CudaTensor* [CudaTensor] [float] CudaTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaTensor_sub(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaTensor_csub(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_mul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor] float", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_mul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaTensor_div(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor] float", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_div(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaTensor_cmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor] CudaTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_cmul(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaTensor_cpow(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor] CudaTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_cpow(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaTensor_cdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor] CudaTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_cdiv(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaTensor_addcmul(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 1;
THCudaTensor *arg4 = NULL;
THCudaTensor *arg5 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor] [float] CudaTensor CudaTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_addcmul(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int m_cutorch_CudaTensor_addcdiv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 1;
THCudaTensor *arg4 = NULL;
THCudaTensor *arg5 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 5, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor] [float] CudaTensor CudaTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_addcdiv(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int m_cutorch_CudaTensor_maskedFill(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
float arg3 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* CudaByteTensor float", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_maskedFill(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaTensor_maskedCopy(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaByteTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaByteTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* CudaByteTensor CudaTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_maskedCopy(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaTensor_maskedSelect(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaByteTensor *arg3 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaByteTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaByteTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor CudaByteTensor", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_maskedSelect(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaTensor_gather(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
long arg3 = 0;
THCudaLongTensor *arg4 = NULL;
THCudaTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaTensor *arg6 = NULL;
long arg7 = 0;
THCudaLongTensor *arg8 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaTensor *dummyIndexTensor = NULL;
if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 3, "torch.CudaLongTensor"))
)
{
argset = 1;
arg3 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
THCudaTensor_checkGPU(cutorch_getstate(L), 1, arg4);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg4);
		  THCudaTensor_resize(state, arg1, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaLongTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg6 = (decltype(arg6))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 2;
arg7 = (long)lua_tonumber(L, 2)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaFloat(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
arg5 = THCudaTensor_new(cutorch_getstate(L));
THCudaTensor_checkGPU(cutorch_getstate(L), 1, arg8);
		  THCState *state = cutorch_getstate(L);
		  THLongStorage *indicesSize = THCudaLongTensor_newSizeOf(state, arg8);
		  THCudaTensor_resize(state, arg5, indicesSize, NULL);
		  THLongStorage_free(indicesSize);
	    
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg7 = (long)lua_tonumber(L, 3)-1;
arg8 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg8, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaFloat(default_arg1, arg8, dummyIndexTensor);
indexLongTensor = arg8;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor index CudaLongTensor | [*CudaTensor*] CudaTensor index CudaTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_gather(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaTensor");
THCudaTensor_gather(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_scatter(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
long arg2 = 0;
THCudaLongTensor *arg3 = NULL;
THCudaTensor *arg4 = NULL;
THCudaTensor *arg5 = NULL;
int arg5_idx = 0;
long arg6 = 0;
THCudaLongTensor *arg7 = NULL;
THCudaLongTensor *indexLongTensor = NULL;
THCudaTensor *dummyIndexTensor = NULL;
THCudaTensor *arg8 = NULL;
THCudaTensor *arg9 = NULL;
int arg9_idx = 0;
long arg10 = 0;
THCudaLongTensor *arg11 = NULL;
float arg12 = 0;
THCudaTensor *arg13 = NULL;
int arg13_idx = 0;
long arg14 = 0;
THCudaLongTensor *arg15 = NULL;
float arg16 = 0;
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = (long)lua_tonumber(L, 2)-1;
}
else if(narg == 4
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
argset = 2;
arg5_idx = 1;
arg6 = (long)lua_tonumber(L, 2)-1;
arg7 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg7, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaFloat(default_arg1, arg7, dummyIndexTensor);
indexLongTensor = arg7;
}
else if(narg == 4
&& (arg9 = (decltype(arg9))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 3, "torch.CudaLongTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 3;
arg9_idx = 1;
arg10 = (long)lua_tonumber(L, 2)-1;
arg12 = (float)lua_tonumber(L, 4);
}
else if(narg == 4
&& (arg13 = (decltype(arg13))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (dummyIndexTensor = (decltype(dummyIndexTensor))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 4;
arg13_idx = 1;
arg14 = (long)lua_tonumber(L, 2)-1;
arg15 = THCudaLongTensor_new(default_arg1);
THLongStorage *indexSize = THCudaTensor_newSizeOf(default_arg1, dummyIndexTensor);
THCudaLongTensor_resize(default_arg1, arg15, indexSize, NULL);
THLongStorage_free(indexSize);
THCudaLongTensor_copyCudaFloat(default_arg1, arg15, dummyIndexTensor);
indexLongTensor = arg15;
arg16 = (float)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* index CudaLongTensor CudaTensor | *CudaTensor* index CudaTensor CudaTensor | *CudaTensor* index CudaLongTensor float | *CudaTensor* index CudaTensor float", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaTensor_scatter(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg5_idx);
THCudaTensor_scatter(default_arg1,arg5,arg6,arg7,arg8);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
else if(argset == 3)
{
lua_pushvalue(L, arg9_idx);
THCudaTensor_scatterFill(default_arg1,arg9,arg10,arg11,arg12);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg13_idx);
THCudaTensor_scatterFill(default_arg1,arg13,arg14,arg15,arg16);
if (indexLongTensor != NULL) THCudaLongTensor_free(default_arg1, indexLongTensor);

return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_sort(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaTensor *arg3 = NULL;
long arg4 = 0;
int arg5 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg2_idx = 1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg4 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isboolean(L, 2)
)
{
arg5 = lua_toboolean(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isboolean(L, 3)
)
{
arg1_idx = 1;
arg5 = lua_toboolean(L, 3);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg4 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isboolean(L, 3)
)
{
arg2_idx = 1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg4 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = lua_toboolean(L, 4);
arg4 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 2)-1;
arg5 = lua_toboolean(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = lua_toboolean(L, 4);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = lua_toboolean(L, 5);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] [*CudaLongTensor*] CudaTensor [index] [boolean]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
if(arg2_idx)
lua_pushvalue(L, arg2_idx);
else
luaT_pushudata(L, arg2, "torch.CudaLongTensor");
THCudaTensor_sort(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 2;
}

static int m_cutorch_CudaTensor_topk(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaLongTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaTensor *arg3 = NULL;
long arg4 = 1;
long arg5 = 0;
int arg6 = 0;
int arg7 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg2_idx = 1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg4 = (long)lua_tonumber(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4);
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg5 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg2_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 2);
arg5 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg5 = (long)lua_tonumber(L, 4)-1;
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg5 = (long)lua_tonumber(L, 4)-1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
&& lua_isnumber(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4);
arg5 = (long)lua_tonumber(L, 5)-1;
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isboolean(L, 2)
)
{
arg6 = lua_toboolean(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isboolean(L, 3)
)
{
arg1_idx = 1;
arg6 = lua_toboolean(L, 3);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isboolean(L, 3)
)
{
arg2_idx = 1;
arg6 = lua_toboolean(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg6 = lua_toboolean(L, 4);
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 2);
arg6 = lua_toboolean(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg6 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg6 = lua_toboolean(L, 4);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4);
arg6 = lua_toboolean(L, 5);
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg5 = (long)lua_tonumber(L, 2)-1;
arg6 = lua_toboolean(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = (long)lua_tonumber(L, 4)-1;
arg6 = lua_toboolean(L, 5);
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg4 = (long)lua_tonumber(L, 2);
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg5 = (long)lua_tonumber(L, 4)-1;
arg6 = lua_toboolean(L, 5);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg5 = (long)lua_tonumber(L, 4)-1;
arg6 = lua_toboolean(L, 5);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
&& lua_isnumber(L, 5)
&& lua_isboolean(L, 6)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4);
arg5 = (long)lua_tonumber(L, 5)-1;
arg6 = lua_toboolean(L, 6);
}
else if(narg == 2
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isboolean(L, 2)
)
{
arg7 = lua_toboolean(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isboolean(L, 3)
)
{
arg1_idx = 1;
arg7 = lua_toboolean(L, 3);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isboolean(L, 3)
)
{
arg2_idx = 1;
arg7 = lua_toboolean(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg7 = lua_toboolean(L, 4);
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 2);
arg7 = lua_toboolean(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg7 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg7 = lua_toboolean(L, 4);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4);
arg7 = lua_toboolean(L, 5);
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
arg5 = (long)lua_tonumber(L, 2)-1;
arg7 = lua_toboolean(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg7 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg7 = lua_toboolean(L, 4);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = (long)lua_tonumber(L, 4)-1;
arg7 = lua_toboolean(L, 5);
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg4 = (long)lua_tonumber(L, 2);
arg5 = (long)lua_tonumber(L, 3)-1;
arg7 = lua_toboolean(L, 4);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg5 = (long)lua_tonumber(L, 4)-1;
arg7 = lua_toboolean(L, 5);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg5 = (long)lua_tonumber(L, 4)-1;
arg7 = lua_toboolean(L, 5);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
&& lua_isnumber(L, 5)
&& lua_isboolean(L, 6)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4);
arg5 = (long)lua_tonumber(L, 5)-1;
arg7 = lua_toboolean(L, 6);
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isboolean(L, 2)
&& lua_isboolean(L, 3)
)
{
arg6 = lua_toboolean(L, 2);
arg7 = lua_toboolean(L, 3);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isboolean(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg6 = lua_toboolean(L, 3);
arg7 = lua_toboolean(L, 4);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isboolean(L, 3)
&& lua_isboolean(L, 4)
)
{
arg2_idx = 1;
arg6 = lua_toboolean(L, 3);
arg7 = lua_toboolean(L, 4);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isboolean(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg6 = lua_toboolean(L, 4);
arg7 = lua_toboolean(L, 5);
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
&& lua_isboolean(L, 4)
)
{
arg4 = (long)lua_tonumber(L, 2);
arg6 = lua_toboolean(L, 3);
arg7 = lua_toboolean(L, 4);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg6 = lua_toboolean(L, 4);
arg7 = lua_toboolean(L, 5);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 5
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
&& lua_isboolean(L, 5)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg6 = lua_toboolean(L, 4);
arg7 = lua_toboolean(L, 5);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
&& lua_isboolean(L, 6)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4);
arg6 = lua_toboolean(L, 5);
arg7 = lua_toboolean(L, 6);
arg5 = THCudaTensor_nDimension(cutorch_getstate(L), arg3)-1;
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
&& lua_isboolean(L, 4)
)
{
arg5 = (long)lua_tonumber(L, 2)-1;
arg6 = lua_toboolean(L, 3);
arg7 = lua_toboolean(L, 4);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
&& lua_isboolean(L, 5)
)
{
arg1_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
arg7 = lua_toboolean(L, 5);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 5
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
&& lua_isboolean(L, 5)
)
{
arg2_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
arg7 = lua_toboolean(L, 5);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
&& lua_isboolean(L, 6)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg5 = (long)lua_tonumber(L, 4)-1;
arg6 = lua_toboolean(L, 5);
arg7 = lua_toboolean(L, 6);
}
else if(narg == 5
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
&& lua_isboolean(L, 5)
)
{
arg4 = (long)lua_tonumber(L, 2);
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
arg7 = lua_toboolean(L, 5);
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
&& lua_isboolean(L, 6)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg5 = (long)lua_tonumber(L, 4)-1;
arg6 = lua_toboolean(L, 5);
arg7 = lua_toboolean(L, 6);
arg2 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 6
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
&& lua_isboolean(L, 5)
&& lua_isboolean(L, 6)
)
{
arg2_idx = 1;
arg4 = (long)lua_tonumber(L, 3);
arg5 = (long)lua_tonumber(L, 4)-1;
arg6 = lua_toboolean(L, 5);
arg7 = lua_toboolean(L, 6);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 7
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
&& lua_isnumber(L, 5)
&& lua_isboolean(L, 6)
&& lua_isboolean(L, 7)
)
{
arg1_idx = 1;
arg2_idx = 2;
arg4 = (long)lua_tonumber(L, 4);
arg5 = (long)lua_tonumber(L, 5)-1;
arg6 = lua_toboolean(L, 6);
arg7 = lua_toboolean(L, 7);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] [*CudaLongTensor*] CudaTensor [long] [index] [boolean] [boolean]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
if(arg2_idx)
lua_pushvalue(L, arg2_idx);
else
luaT_pushudata(L, arg2, "torch.CudaLongTensor");
THCudaTensor_topk(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6,arg7);
return 2;
}

static int m_cutorch_CudaTensor_mv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
THCudaTensor *arg3 = NULL;
float arg4 = 1;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* CudaTensor~2D CudaTensor~1D", type_buf);
}
THCudaTensor_zero(cutorch_getstate(L), arg1);
lua_pushvalue(L, arg1_idx);
THCudaTensor_addmv(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int m_cutorch_CudaTensor_mm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
THCudaTensor *arg3 = NULL;
float arg4 = 1;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg6->nDimension == 2)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* CudaTensor~2D CudaTensor~2D", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_addmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int m_cutorch_CudaTensor_bmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
THCudaTensor *arg3 = NULL;
float arg4 = 1;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* CudaTensor~3D CudaTensor~3D", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_baddbmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int m_cutorch_CudaTensor_ger(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
THCudaTensor *arg3 = NULL;
float arg4 = 1;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
arg1_idx = 1;
arg3 = arg1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* CudaTensor~1D CudaTensor~1D", type_buf);
}
THCudaTensor_zero(cutorch_getstate(L), arg1);
lua_pushvalue(L, arg1_idx);
THCudaTensor_addr(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}

static int m_cutorch_CudaTensor_addmv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
THCudaTensor *arg3 = NULL;
float arg4 = 1;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
THCudaTensor *arg7 = NULL;
int arg7_idx = 0;
float arg8 = 0;
THCudaTensor *arg9 = NULL;
float arg10 = 0;
THCudaTensor *arg11 = NULL;
THCudaTensor *arg12 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg1->nDimension == 1)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
arg3 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg1->nDimension == 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 1)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg1->nDimension == 1)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (float)lua_tonumber(L, 2);
arg3 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg1->nDimension == 1)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 1)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (float)lua_tonumber(L, 3);
}
else if(narg == 5
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg7->nDimension == 1)
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg11->nDimension == 2)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg12->nDimension == 1)
)
{
argset = 2;
arg7_idx = 1;
arg8 = (float)lua_tonumber(L, 2);
arg10 = (float)lua_tonumber(L, 3);
arg9 = arg7;
}
else if(narg == 6
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg7->nDimension == 1)
&& lua_isnumber(L, 2)
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg9->nDimension == 1)
&& lua_isnumber(L, 4)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg11->nDimension == 2)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 6, "torch.CudaTensor")) && (arg12->nDimension == 1)
)
{
argset = 2;
arg7_idx = 1;
arg8 = (float)lua_tonumber(L, 2);
arg10 = (float)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor~1D* [CudaTensor~1D] [float] CudaTensor~2D CudaTensor~1D | *CudaTensor~1D* float [CudaTensor~1D] float CudaTensor~2D CudaTensor~1D", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaTensor_addmv(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg7_idx);
THCudaTensor_addmv(default_arg1,arg7,arg8,arg9,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_addmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
THCudaTensor *arg3 = NULL;
float arg4 = 1;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
THCudaTensor *arg7 = NULL;
int arg7_idx = 0;
float arg8 = 0;
THCudaTensor *arg9 = NULL;
float arg10 = 0;
THCudaTensor *arg11 = NULL;
THCudaTensor *arg12 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg1->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg6->nDimension == 2)
)
{
argset = 1;
arg1_idx = 1;
arg3 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg1->nDimension == 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 2)
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg1->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 2)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (float)lua_tonumber(L, 2);
arg3 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg1->nDimension == 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg5->nDimension == 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg6->nDimension == 2)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (float)lua_tonumber(L, 3);
}
else if(narg == 5
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg7->nDimension == 2)
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg11->nDimension == 2)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg12->nDimension == 2)
)
{
argset = 2;
arg7_idx = 1;
arg8 = (float)lua_tonumber(L, 2);
arg10 = (float)lua_tonumber(L, 3);
arg9 = arg7;
}
else if(narg == 6
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg7->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg9->nDimension == 2)
&& lua_isnumber(L, 4)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg11->nDimension == 2)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 6, "torch.CudaTensor")) && (arg12->nDimension == 2)
)
{
argset = 2;
arg7_idx = 1;
arg8 = (float)lua_tonumber(L, 2);
arg10 = (float)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor~2D* [CudaTensor~2D] [float] CudaTensor~2D CudaTensor~2D | *CudaTensor~2D* float [CudaTensor~2D] float CudaTensor~2D CudaTensor~2D", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaTensor_addmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg7_idx);
THCudaTensor_addmm(default_arg1,arg7,arg8,arg9,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_addr(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
THCudaTensor *arg3 = NULL;
float arg4 = 1;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
THCudaTensor *arg7 = NULL;
int arg7_idx = 0;
float arg8 = 0;
THCudaTensor *arg9 = NULL;
float arg10 = 0;
THCudaTensor *arg11 = NULL;
THCudaTensor *arg12 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg1->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
arg3 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg1->nDimension == 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg1->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (float)lua_tonumber(L, 2);
arg3 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg1->nDimension == 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg5->nDimension == 1)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg6->nDimension == 1)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (float)lua_tonumber(L, 3);
}
else if(narg == 5
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg7->nDimension == 2)
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg11->nDimension == 1)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg12->nDimension == 1)
)
{
argset = 2;
arg7_idx = 1;
arg8 = (float)lua_tonumber(L, 2);
arg10 = (float)lua_tonumber(L, 3);
arg9 = arg7;
}
else if(narg == 6
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg7->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg9->nDimension == 2)
&& lua_isnumber(L, 4)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg11->nDimension == 1)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 6, "torch.CudaTensor")) && (arg12->nDimension == 1)
)
{
argset = 2;
arg7_idx = 1;
arg8 = (float)lua_tonumber(L, 2);
arg10 = (float)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor~2D* [CudaTensor~2D] [float] CudaTensor~1D CudaTensor~1D | *CudaTensor~2D* float [CudaTensor~2D] float CudaTensor~1D CudaTensor~1D", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaTensor_addr(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg7_idx);
THCudaTensor_addr(default_arg1,arg7,arg8,arg9,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_baddbmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
THCudaTensor *arg3 = NULL;
float arg4 = 1;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
THCudaTensor *arg7 = NULL;
int arg7_idx = 0;
float arg8 = 0;
THCudaTensor *arg9 = NULL;
float arg10 = 0;
THCudaTensor *arg11 = NULL;
THCudaTensor *arg12 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg1->nDimension == 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg1->nDimension == 3)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg1->nDimension == 3)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (float)lua_tonumber(L, 2);
arg3 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg1->nDimension == 3)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 3)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (float)lua_tonumber(L, 3);
}
else if(narg == 5
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg7->nDimension == 3)
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg11->nDimension == 3)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg12->nDimension == 3)
)
{
argset = 2;
arg7_idx = 1;
arg8 = (float)lua_tonumber(L, 2);
arg10 = (float)lua_tonumber(L, 3);
arg9 = arg7;
}
else if(narg == 6
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg7->nDimension == 3)
&& lua_isnumber(L, 2)
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg9->nDimension == 3)
&& lua_isnumber(L, 4)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg11->nDimension == 3)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 6, "torch.CudaTensor")) && (arg12->nDimension == 3)
)
{
argset = 2;
arg7_idx = 1;
arg8 = (float)lua_tonumber(L, 2);
arg10 = (float)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor~3D* [CudaTensor~3D] [float] CudaTensor~3D CudaTensor~3D | *CudaTensor~3D* float [CudaTensor~3D] float CudaTensor~3D CudaTensor~3D", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaTensor_baddbmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg7_idx);
THCudaTensor_baddbmm(default_arg1,arg7,arg8,arg9,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_addbmm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
THCudaTensor *arg3 = NULL;
float arg4 = 1;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
THCudaTensor *arg7 = NULL;
int arg7_idx = 0;
float arg8 = 0;
THCudaTensor *arg9 = NULL;
float arg10 = 0;
THCudaTensor *arg11 = NULL;
THCudaTensor *arg12 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg1->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg1->nDimension == 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg1->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (float)lua_tonumber(L, 2);
arg3 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg1->nDimension == 2)
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor")) && (arg3->nDimension == 2)
&& lua_isnumber(L, 3)
&& (arg5 = (decltype(arg5))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg5->nDimension == 3)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg6->nDimension == 3)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (float)lua_tonumber(L, 3);
}
else if(narg == 5
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg7->nDimension == 2)
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 4, "torch.CudaTensor")) && (arg11->nDimension == 3)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg12->nDimension == 3)
)
{
argset = 2;
arg7_idx = 1;
arg8 = (float)lua_tonumber(L, 2);
arg10 = (float)lua_tonumber(L, 3);
arg9 = arg7;
}
else if(narg == 6
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaTensor")) && (arg7->nDimension == 2)
&& lua_isnumber(L, 2)
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaTensor")) && (arg9->nDimension == 2)
&& lua_isnumber(L, 4)
&& (arg11 = (decltype(arg11))luaT_toudata(L, 5, "torch.CudaTensor")) && (arg11->nDimension == 3)
&& (arg12 = (decltype(arg12))luaT_toudata(L, 6, "torch.CudaTensor")) && (arg12->nDimension == 3)
)
{
argset = 2;
arg7_idx = 1;
arg8 = (float)lua_tonumber(L, 2);
arg10 = (float)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor~2D* [CudaTensor~2D] [float] CudaTensor~3D CudaTensor~3D | *CudaTensor~2D* float [CudaTensor~2D] float CudaTensor~3D CudaTensor~3D", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaTensor_addbmm(default_arg1,arg1,arg2,arg3,arg4,arg5,arg6);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg7_idx);
THCudaTensor_addbmm(default_arg1,arg7,arg8,arg9,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_dot(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor CudaTensor", type_buf);
}
arg3 = THCudaTensor_dot(default_arg1,arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}

static int m_cutorch_CudaTensor_sum(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
float arg2 = 0;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor | [*CudaTensor*] CudaTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaTensor_sumall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
THCudaTensor_sum(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_cumsum(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
long arg3 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor [index]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_cumsum(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaTensor_cumprod(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
long arg3 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (long)lua_tonumber(L, 2)-1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor [index]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_cumprod(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaTensor_prod(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
float arg2 = 0;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor | [*CudaTensor*] CudaTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaTensor_prodall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
THCudaTensor_prod(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_min(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
float arg2 = 0;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor | [*CudaTensor*] [*CudaLongTensor*] CudaTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaTensor_minall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaTensor_min(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int m_cutorch_CudaTensor_max(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
float arg2 = 0;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaLongTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
long arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaTensor_new(cutorch_getstate(L));
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaLongTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (long)lua_tonumber(L, 3)-1;
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaLongTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg4_idx = 2;
arg6 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor | [*CudaTensor*] [*CudaLongTensor*] CudaTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaTensor_maxall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaLongTensor");
THCudaTensor_max(default_arg1,arg3,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int m_cutorch_CudaTensor_cmin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 1
&& lua_isnumber(L, 1)
)
{
argset = 2;
arg6 = (float)lua_tonumber(L, 1);
arg4 = THCudaTensor_new(cutorch_getstate(L));
arg5 = arg4;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (float)lua_tonumber(L, 2);
arg4 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] [CudaTensor] CudaTensor | [*CudaTensor*] [CudaTensor] float", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_cmin(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaTensor");
THCudaTensor_cminValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_cmax(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 0;
if(narg == 1
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 1
&& lua_isnumber(L, 1)
)
{
argset = 2;
arg6 = (float)lua_tonumber(L, 1);
arg4 = THCudaTensor_new(cutorch_getstate(L));
arg5 = arg4;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 2);
arg5 = arg4;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg6 = (float)lua_tonumber(L, 2);
arg4 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] [CudaTensor] CudaTensor | [*CudaTensor*] [CudaTensor] float", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_cmax(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaTensor");
THCudaTensor_cmaxValue(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_cross(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
long arg4 = -1;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor CudaTensor [index]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_cross(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int m_cutorch_CudaTensor_tril(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
int arg3 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor [int]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_tril(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaTensor_triu(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
int arg3 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor [int]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_triu(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaTensor_diag(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
int arg3 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg3 = (int)lua_tonumber(L, 2);
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor [int]", type_buf);
}
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_diag(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaTensor_trace(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
float arg2 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor", type_buf);
}
arg2 = THCudaTensor_trace(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}

static int m_cutorch_CudaTensor_log(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_log(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_log1p(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_log1p(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_exp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_exp(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_cos(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_cos(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_acos(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_acos(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_cosh(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_cosh(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_sin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_sin(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_asin(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_asin(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_sinh(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_sinh(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_tan(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_tan(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_atan(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_atan(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_tanh(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_tanh(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_sqrt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_sqrt(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_rsqrt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_rsqrt(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_sigmoid(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_sigmoid(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_cinv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_cinv(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_ceil(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_ceil(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_floor(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_floor(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_neg(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_neg(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_abs(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_abs(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_sign(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_sign(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_round(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_round(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_trunc(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_trunc(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_frac(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_frac(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_atan2(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor] CudaTensor", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_atan2(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaTensor_lerp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
float arg4 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg4 = (float)lua_tonumber(L, 3);
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg4 = (float)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor] CudaTensor float", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_lerp(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int m_cutorch_CudaTensor_pow(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
float arg5 = 0;
THCudaTensor *arg6 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg4_idx = 1;
arg5 = (float)lua_tonumber(L, 2);
arg6 = arg4;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg6 = (decltype(arg6))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 2;
arg4_idx = 1;
arg5 = (float)lua_tonumber(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor] float | *CudaTensor* float [CudaTensor]", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaTensor_pow(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaTensor_tpow(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_rand(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* (LongStorage | dim1 [dim2...])", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_rand(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int m_cutorch_CudaTensor_randn(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THLongStorage *arg2 = NULL;
if(narg >= 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& cutorch_islongargs(L, 2)
)
{
arg1_idx = 1;
arg2 = cutorch_checklongargs(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* (LongStorage | dim1 [dim2...])", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_randn(default_arg1,arg1,arg2);
THLongStorage_free(arg2);
return 1;
}

static int m_cutorch_CudaTensor_multinomial(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
int arg3 = 0;
int arg4 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
arg1_idx = 1;
arg3 = (int)lua_tonumber(L, 3);
arg4 = lua_toboolean(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* CudaTensor int [boolean]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_multinomial(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int m_cutorch_CudaTensor_clamp(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
float arg4 = 0;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
arg4 = (float)lua_tonumber(L, 3);
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
arg4 = (float)lua_tonumber(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor] float float", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_clamp(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}

static int m_cutorch_CudaTensor_lt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaTensor *arg8 = NULL;
THCudaTensor *arg9 = NULL;
THCudaTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaTensor *arg11 = NULL;
THCudaTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaTensor float | *CudaTensor* CudaTensor float | [*CudaByteTensor*] CudaTensor CudaTensor | *CudaTensor* CudaTensor CudaTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaTensor_ltValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaTensor_ltValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaTensor_ltTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaTensor_ltTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_gt(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaTensor *arg8 = NULL;
THCudaTensor *arg9 = NULL;
THCudaTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaTensor *arg11 = NULL;
THCudaTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaTensor float | *CudaTensor* CudaTensor float | [*CudaByteTensor*] CudaTensor CudaTensor | *CudaTensor* CudaTensor CudaTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaTensor_gtValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaTensor_gtValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaTensor_gtTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaTensor_gtTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_le(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaTensor *arg8 = NULL;
THCudaTensor *arg9 = NULL;
THCudaTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaTensor *arg11 = NULL;
THCudaTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaTensor float | *CudaTensor* CudaTensor float | [*CudaByteTensor*] CudaTensor CudaTensor | *CudaTensor* CudaTensor CudaTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaTensor_leValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaTensor_leValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaTensor_leTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaTensor_leTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_ge(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaTensor *arg8 = NULL;
THCudaTensor *arg9 = NULL;
THCudaTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaTensor *arg11 = NULL;
THCudaTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaTensor float | *CudaTensor* CudaTensor float | [*CudaByteTensor*] CudaTensor CudaTensor | *CudaTensor* CudaTensor CudaTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaTensor_geValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaTensor_geValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaTensor_geTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaTensor_geTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_eq(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaTensor *arg8 = NULL;
THCudaTensor *arg9 = NULL;
THCudaTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaTensor *arg11 = NULL;
THCudaTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaTensor float | *CudaTensor* CudaTensor float | [*CudaByteTensor*] CudaTensor CudaTensor | *CudaTensor* CudaTensor CudaTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaTensor_eqValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaTensor_eqValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaTensor_eqTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaTensor_eqTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_ne(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaByteTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 0;
THCudaByteTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaTensor *arg8 = NULL;
THCudaTensor *arg9 = NULL;
THCudaTensor *arg10 = NULL;
int arg10_idx = 0;
THCudaTensor *arg11 = NULL;
THCudaTensor *arg12 = NULL;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 3;
arg7 = THCudaByteTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaByteTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg9 = (decltype(arg9))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 3;
arg7_idx = 1;
}
else if(narg == 3
&& (arg10 = (decltype(arg10))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg11 = (decltype(arg11))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg12 = (decltype(arg12))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 4;
arg10_idx = 1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaByteTensor*] CudaTensor float | *CudaTensor* CudaTensor float | [*CudaByteTensor*] CudaTensor CudaTensor | *CudaTensor* CudaTensor CudaTensor", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaByteTensor");
THCudaTensor_neValue(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaTensor_neValueT(default_arg1,arg4,arg5,arg6);
return 1;
}
else if(argset == 3)
{
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaByteTensor");
THCudaTensor_neTensor(default_arg1,arg7,arg8,arg9);
return 1;
}
else if(argset == 4)
{
lua_pushvalue(L, arg10_idx);
THCudaTensor_neTensorT(default_arg1,arg10,arg11,arg12);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_cat(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
long arg4 = 0;
THCudaTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaTensor **arg6_data = NULL;
long arg6_size = 0;
int arg6_i = 0;
long arg7 = 0;
if(narg == 2
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
arg4 = THCudaTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg4 = THCudaTensor_nDimension(cutorch_getstate(L), arg2)-1;
}
else if(narg == 3
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg4 = (long)lua_tonumber(L, 3)-1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& lua_isnumber(L, 4)
)
{
argset = 1;
arg1_idx = 1;
arg4 = (long)lua_tonumber(L, 4)-1;
}
else if(narg == 1
&& torch_isnonemptytable(L, 1)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaTensor**)THAlloc(arg6_size * sizeof(THCudaTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaTensor*)luaT_toudata(L, -1, "torch.CudaTensor")))
    luaL_error(L, "expected CudaTensor in tensor array");
  lua_pop(L, 1);
}

arg5 = THCudaTensor_new(cutorch_getstate(L));
arg7 = THCudaTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& torch_isnonemptytable(L, 2)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaTensor**)THAlloc(arg6_size * sizeof(THCudaTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaTensor*)luaT_toudata(L, -1, "torch.CudaTensor")))
    luaL_error(L, "expected CudaTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = THCudaTensor_nDimension(cutorch_getstate(L), arg6_data[0])-1;
}
else if(narg == 2
&& torch_isnonemptytable(L, 1)
&& lua_isnumber(L, 2)
)
{
argset = 2;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 1, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaTensor**)THAlloc(arg6_size * sizeof(THCudaTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaTensor*)luaT_toudata(L, -1, "torch.CudaTensor")))
    luaL_error(L, "expected CudaTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 2)-1;
arg5 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& torch_isnonemptytable(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg5_idx = 1;
do
{
  arg6_size++;
  lua_checkstack(L, 1);
  lua_rawgeti(L, 2, arg6_size);
}
while (!lua_isnil(L, -1));
arg6_size--;
lua_pop(L, 1);
arg6_data = (THCudaTensor**)THAlloc(arg6_size * sizeof(THCudaTensor*));
for (arg6_i = arg6_size - 1; arg6_i >= 0; arg6_i--)
{
  if (!(arg6_data[arg6_i] = (THCudaTensor*)luaT_toudata(L, -1, "torch.CudaTensor")))
    luaL_error(L, "expected CudaTensor in tensor array");
  lua_pop(L, 1);
}

arg7 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor CudaTensor [index] | [*CudaTensor*] {CudaTensor+} [index]", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_cat(default_arg1,arg1,arg2,arg3,arg4);
return 1;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaTensor");
THCudaTensor_catArray(default_arg1,arg5,arg6_data,arg6_size,arg7);
THFree(arg6_data);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_geometric(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* float", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_geometric(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_bernoulli(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0.5;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [float]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_bernoulli(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_uniform(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
float arg3 = 1;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
arg3 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [float] [float]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_uniform(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaTensor_normal(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
float arg3 = 1;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
arg3 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [float] [float]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_normal(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaTensor_cauchy(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
float arg3 = 1;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
arg3 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [float] [float]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_cauchy(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaTensor_logNormal(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
float arg3 = 2;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
arg3 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [float] [float]", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_logNormal(default_arg1,arg1,arg2,arg3);
return 1;
}

static int m_cutorch_CudaTensor_exponential(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* float", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_exponential(default_arg1,arg1,arg2);
return 1;
}

static int m_cutorch_CudaTensor_gesv(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaTensor *arg3 = NULL;
THCudaTensor *arg4 = NULL;
THCudaTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaTensor *arg6 = NULL;
int arg6_idx = 0;
THCudaTensor *arg7 = NULL;
THCudaTensor *arg8 = NULL;
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2_idx = 2;
}
else if(narg == 2
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 2;
arg5 = THCudaTensor_new(cutorch_getstate(L));
arg6 = THCudaTensor_new(cutorch_getstate(L));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* *CudaTensor* CudaTensor CudaTensor | CudaTensor CudaTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
lua_pushvalue(L, arg2_idx);
THCudaTensor_gesv(default_arg1,arg1,arg2,arg3,arg4);
return 2;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaTensor");
if(arg6_idx)
lua_pushvalue(L, arg6_idx);
else
luaT_pushudata(L, arg6, "torch.CudaTensor");
THCudaTensor_gesv(default_arg1,arg5,arg6,arg7,arg8);
return 2;
}
return 0;
}

static int m_cutorch_CudaTensor_gels(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaTensor *arg3 = NULL;
THCudaTensor *arg4 = NULL;
THCudaTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaTensor *arg6 = NULL;
int arg6_idx = 0;
THCudaTensor *arg7 = NULL;
THCudaTensor *arg8 = NULL;
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2_idx = 2;
}
else if(narg == 2
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg8 = (decltype(arg8))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 2;
arg5 = THCudaTensor_new(cutorch_getstate(L));
arg6 = THCudaTensor_new(cutorch_getstate(L));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* *CudaTensor* CudaTensor CudaTensor | CudaTensor CudaTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
lua_pushvalue(L, arg2_idx);
THCudaTensor_gels(default_arg1,arg1,arg2,arg3,arg4);
return 2;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaTensor");
if(arg6_idx)
lua_pushvalue(L, arg6_idx);
else
luaT_pushudata(L, arg6, "torch.CudaTensor");
THCudaTensor_gels(default_arg1,arg5,arg6,arg7,arg8);
return 2;
}
return 0;
}

static int m_cutorch_CudaTensor_symeig(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaTensor *arg3 = NULL;
const char *arg4 = NULL;
char arg4_default = 'N';
const char *arg5 = NULL;
char arg5_default = 'U';
THCudaTensor *arg6 = NULL;
int arg6_idx = 0;
THCudaTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaTensor *arg8 = NULL;
const char *arg9 = NULL;
char arg9_default = 'N';
const char *arg10 = NULL;
char arg10_default = 'U';
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2_idx = 2;
arg4 = &arg4_default;
arg5 = &arg5_default;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg4 = lua_tostring(L, 4)) && (*arg4 == 'N' || *arg4 == 'V')
)
{
argset = 1;
arg1_idx = 1;
arg2_idx = 2;
arg5 = &arg5_default;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg5 = lua_tostring(L, 4)) && (*arg5 == 'U' || *arg5 == 'L')
)
{
argset = 1;
arg1_idx = 1;
arg2_idx = 2;
arg4 = &arg4_default;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg4 = lua_tostring(L, 4)) && (*arg4 == 'N' || *arg4 == 'V')
&& (arg5 = lua_tostring(L, 5)) && (*arg5 == 'U' || *arg5 == 'L')
)
{
argset = 1;
arg1_idx = 1;
arg2_idx = 2;
}
else if(narg == 1
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 2;
arg6 = THCudaTensor_new(cutorch_getstate(L));
arg7 = THCudaTensor_new(cutorch_getstate(L));
arg9 = &arg9_default;
arg10 = &arg10_default;
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg9 = lua_tostring(L, 2)) && (*arg9 == 'N' || *arg9 == 'V')
)
{
argset = 2;
arg6 = THCudaTensor_new(cutorch_getstate(L));
arg7 = THCudaTensor_new(cutorch_getstate(L));
arg10 = &arg10_default;
}
else if(narg == 2
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg10 = lua_tostring(L, 2)) && (*arg10 == 'U' || *arg10 == 'L')
)
{
argset = 2;
arg6 = THCudaTensor_new(cutorch_getstate(L));
arg7 = THCudaTensor_new(cutorch_getstate(L));
arg9 = &arg9_default;
}
else if(narg == 3
&& (arg8 = (decltype(arg8))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg9 = lua_tostring(L, 2)) && (*arg9 == 'N' || *arg9 == 'V')
&& (arg10 = lua_tostring(L, 3)) && (*arg10 == 'U' || *arg10 == 'L')
)
{
argset = 2;
arg6 = THCudaTensor_new(cutorch_getstate(L));
arg7 = THCudaTensor_new(cutorch_getstate(L));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* *CudaTensor* CudaTensor [(N|V)] [(U|L)] | CudaTensor [(N|V)] [(U|L)]", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
lua_pushvalue(L, arg2_idx);
THCudaTensor_syev(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 2;
}
else if(argset == 2)
{
if(arg6_idx)
lua_pushvalue(L, arg6_idx);
else
luaT_pushudata(L, arg6, "torch.CudaTensor");
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaTensor");
THCudaTensor_syev(default_arg1,arg6,arg7,arg8,arg9,arg10);
return 2;
}
return 0;
}

static int m_cutorch_CudaTensor_eig(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaTensor *arg3 = NULL;
const char *arg4 = NULL;
char arg4_default = 'N';
THCudaTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaTensor *arg6 = NULL;
int arg6_idx = 0;
THCudaTensor *arg7 = NULL;
const char *arg8 = NULL;
char arg8_default = 'N';
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2_idx = 2;
arg4 = &arg4_default;
}
else if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg4 = lua_tostring(L, 4)) && (*arg4 == 'N' || *arg4 == 'V')
)
{
argset = 1;
arg1_idx = 1;
arg2_idx = 2;
}
else if(narg == 1
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 2;
arg5 = THCudaTensor_new(cutorch_getstate(L));
arg6 = THCudaTensor_new(cutorch_getstate(L));
arg8 = &arg8_default;
}
else if(narg == 2
&& (arg7 = (decltype(arg7))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg8 = lua_tostring(L, 2)) && (*arg8 == 'N' || *arg8 == 'V')
)
{
argset = 2;
arg5 = THCudaTensor_new(cutorch_getstate(L));
arg6 = THCudaTensor_new(cutorch_getstate(L));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* *CudaTensor* CudaTensor [(N|V)] | CudaTensor [(N|V)]", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
lua_pushvalue(L, arg2_idx);
THCudaTensor_geev(default_arg1,arg1,arg2,arg3,arg4);
return 2;
}
else if(argset == 2)
{
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaTensor");
if(arg6_idx)
lua_pushvalue(L, arg6_idx);
else
luaT_pushudata(L, arg6, "torch.CudaTensor");
THCudaTensor_geev(default_arg1,arg5,arg6,arg7,arg8);
return 2;
}
return 0;
}

static int m_cutorch_CudaTensor_svd(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
const char *arg5 = NULL;
char arg5_default = 'S';
THCudaTensor *arg6 = NULL;
int arg6_idx = 0;
THCudaTensor *arg7 = NULL;
int arg7_idx = 0;
THCudaTensor *arg8 = NULL;
int arg8_idx = 0;
THCudaTensor *arg9 = NULL;
const char *arg10 = NULL;
char arg10_default = 'S';
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2_idx = 2;
arg3_idx = 3;
arg5 = &arg5_default;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 4, "torch.CudaTensor"))
&& (arg5 = lua_tostring(L, 5)) && (*arg5 == 'A' || *arg5 == 'S')
)
{
argset = 1;
arg1_idx = 1;
arg2_idx = 2;
arg3_idx = 3;
}
else if(narg == 1
&& (arg9 = (decltype(arg9))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 2;
arg6 = THCudaTensor_new(cutorch_getstate(L));
arg7 = THCudaTensor_new(cutorch_getstate(L));
arg8 = THCudaTensor_new(cutorch_getstate(L));
arg10 = &arg10_default;
}
else if(narg == 2
&& (arg9 = (decltype(arg9))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg10 = lua_tostring(L, 2)) && (*arg10 == 'A' || *arg10 == 'S')
)
{
argset = 2;
arg6 = THCudaTensor_new(cutorch_getstate(L));
arg7 = THCudaTensor_new(cutorch_getstate(L));
arg8 = THCudaTensor_new(cutorch_getstate(L));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* *CudaTensor* *CudaTensor* CudaTensor [(A|S)] | CudaTensor [(A|S)]", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
lua_pushvalue(L, arg2_idx);
lua_pushvalue(L, arg3_idx);
THCudaTensor_gesvd(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 3;
}
else if(argset == 2)
{
if(arg6_idx)
lua_pushvalue(L, arg6_idx);
else
luaT_pushudata(L, arg6, "torch.CudaTensor");
if(arg7_idx)
lua_pushvalue(L, arg7_idx);
else
luaT_pushudata(L, arg7, "torch.CudaTensor");
if(arg8_idx)
lua_pushvalue(L, arg8_idx);
else
luaT_pushudata(L, arg8, "torch.CudaTensor");
THCudaTensor_gesvd(default_arg1,arg6,arg7,arg8,arg9,arg10);
return 3;
}
return 0;
}

static int m_cutorch_CudaTensor_inverse(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 1
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 2;
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* CudaTensor | CudaTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaTensor_getri(default_arg1,arg1,arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
THCudaTensor_getri(default_arg1,arg3,arg4);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_potri(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 1
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 2;
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* CudaTensor | CudaTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaTensor_potri(default_arg1,arg1,arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
THCudaTensor_potri(default_arg1,arg3,arg4);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_potrf(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 1
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 2;
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* CudaTensor | CudaTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaTensor_potrf(default_arg1,arg1,arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
THCudaTensor_potrf(default_arg1,arg3,arg4);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_potrs(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg6 = (decltype(arg6))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 2;
arg4 = THCudaTensor_new(cutorch_getstate(L));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* CudaTensor CudaTensor | CudaTensor CudaTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaTensor_potrs(default_arg1,arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaTensor");
THCudaTensor_potrs(default_arg1,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_qr(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
int arg2_idx = 0;
THCudaTensor *arg3 = NULL;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
int arg5_idx = 0;
THCudaTensor *arg6 = NULL;
if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (decltype(arg3))luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg2_idx = 2;
}
else if(narg == 1
&& (arg6 = (decltype(arg6))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 2;
arg4 = THCudaTensor_new(cutorch_getstate(L));
arg5 = THCudaTensor_new(cutorch_getstate(L));
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* *CudaTensor* CudaTensor | CudaTensor", type_buf);
}
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
lua_pushvalue(L, arg2_idx);
THCudaTensor_qr(default_arg1,arg1,arg2,arg3);
return 2;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaTensor");
if(arg5_idx)
lua_pushvalue(L, arg5_idx);
else
luaT_pushudata(L, arg5, "torch.CudaTensor");
THCudaTensor_qr(default_arg1,arg4,arg5,arg6);
return 2;
}
return 0;
}

static int m_cutorch_CudaTensor_mean(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
float arg2 = 0;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor | [*CudaTensor*] CudaTensor index", type_buf);
}
if(argset == 1)
{
arg2 = THCudaTensor_meanall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
THCudaTensor_mean(default_arg1,arg3,arg4,arg5);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_var(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
float arg2 = 0;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
long arg5 = 0;
int arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg6 = lua_toboolean(L, 3);
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor | [*CudaTensor*] CudaTensor index [boolean]", type_buf);
}
if(argset == 1)
{
arg2 = THCudaTensor_varall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
THCudaTensor_var(default_arg1,arg3,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_std(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
float arg2 = 0;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
long arg5 = 0;
int arg6 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else if(narg == 3
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isboolean(L, 3)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg6 = lua_toboolean(L, 3);
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isboolean(L, 4)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
arg6 = lua_toboolean(L, 4);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor | [*CudaTensor*] CudaTensor index [boolean]", type_buf);
}
if(argset == 1)
{
arg2 = THCudaTensor_stdall(default_arg1,arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
THCudaTensor_std(default_arg1,arg3,arg4,arg5,arg6);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_norm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
float arg2 = 2;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 0;
long arg7 = 0;
if(narg == 1
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg5 = (decltype(arg5))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg6 = (float)lua_tonumber(L, 2);
arg7 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 4
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (decltype(arg5))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
arg7 = (long)lua_tonumber(L, 4)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor [float] | [*CudaTensor*] CudaTensor float index", type_buf);
}
if(argset == 1)
{
arg3 = THCudaTensor_normall(default_arg1,arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaTensor");
THCudaTensor_norm(default_arg1,arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int m_cutorch_CudaTensor_renorm(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
long arg4 = 0;
float arg5 = 0;
if(narg == 4
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = (float)lua_tonumber(L, 4);
arg2 = arg1;
}
else if(narg == 5
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
&& lua_isnumber(L, 5)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = (float)lua_tonumber(L, 5);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: *CudaTensor* [CudaTensor] float index float", type_buf);
}
lua_pushvalue(L, arg1_idx);
THCudaTensor_renorm(default_arg1,arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int m_cutorch_CudaTensor_dist(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
THCudaTensor *arg1 = NULL;
THCudaTensor *arg2 = NULL;
float arg3 = 2;
float arg4 = 0;
if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
}
else if(narg == 3
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg3 = (float)lua_tonumber(L, 3);
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: CudaTensor CudaTensor [float]", type_buf);
}
arg4 = THCudaTensor_dist(default_arg1,arg1,arg2,arg3);
lua_pushnumber(L, (lua_Number)arg4);
return 1;
}

static int m_cutorch_CudaTensor_squeeze(lua_State *L)
{
int narg = lua_gettop(L);
lua_getglobal(L, "cutorch");
lua_getfield(L, -1, "_state");
THCState *default_arg1 = (THCState*)lua_touserdata(L, -1);
lua_pop(L, 2);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg2 = (decltype(arg2))luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
arg1 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 2
&& (arg1 = (decltype(arg1))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (decltype(arg2))luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg4 = (decltype(arg4))luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaTensor_new(cutorch_getstate(L));
}
else if(narg == 3
&& (arg3 = (decltype(arg3))luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (decltype(arg4))luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
{
char type_buf[512];
str_arg_types(L, type_buf, 512);
luaL_error(L, "invalid arguments: %s\nexpected arguments: [*CudaTensor*] CudaTensor | [*CudaTensor*] CudaTensor index", type_buf);
}
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_squeeze(default_arg1,arg1,arg2);
if(arg1->nDimension == 1 && arg1->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaTensor_get1d(cutorch_getstate(L), arg1, 0)));
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
{int hasdims = arg4->nDimension > 1;
THCudaTensor_squeeze1d(default_arg1,arg3,arg4,arg5);
if(!hasdims && arg3->nDimension == 1 && arg3->size[0] == 1)
lua_pushnumber(L, (lua_Number)(THCudaTensor_get1d(cutorch_getstate(L), arg3, 0)));}
return 1;
}
return 0;
}

static const struct luaL_Reg m_cutorch_CudaTensorMath__ [] = {
{"zero", m_cutorch_CudaTensor_zero},
{"fill", m_cutorch_CudaTensor_fill},
{"zeros", m_cutorch_CudaTensor_zeros},
{"ones", m_cutorch_CudaTensor_ones},
{"reshape", m_cutorch_CudaTensor_reshape},
{"numel", m_cutorch_CudaTensor_numel},
{"add", m_cutorch_CudaTensor_add},
{"csub", m_cutorch_CudaTensor_csub},
{"mul", m_cutorch_CudaTensor_mul},
{"div", m_cutorch_CudaTensor_div},
{"cmul", m_cutorch_CudaTensor_cmul},
{"cpow", m_cutorch_CudaTensor_cpow},
{"cdiv", m_cutorch_CudaTensor_cdiv},
{"addcmul", m_cutorch_CudaTensor_addcmul},
{"addcdiv", m_cutorch_CudaTensor_addcdiv},
{"maskedFill", m_cutorch_CudaTensor_maskedFill},
{"maskedCopy", m_cutorch_CudaTensor_maskedCopy},
{"maskedSelect", m_cutorch_CudaTensor_maskedSelect},
{"gather", m_cutorch_CudaTensor_gather},
{"scatter", m_cutorch_CudaTensor_scatter},
{"sort", m_cutorch_CudaTensor_sort},
{"topk", m_cutorch_CudaTensor_topk},
{"mv", m_cutorch_CudaTensor_mv},
{"mm", m_cutorch_CudaTensor_mm},
{"bmm", m_cutorch_CudaTensor_bmm},
{"ger", m_cutorch_CudaTensor_ger},
{"addmv", m_cutorch_CudaTensor_addmv},
{"addmm", m_cutorch_CudaTensor_addmm},
{"addr", m_cutorch_CudaTensor_addr},
{"baddbmm", m_cutorch_CudaTensor_baddbmm},
{"addbmm", m_cutorch_CudaTensor_addbmm},
{"dot", m_cutorch_CudaTensor_dot},
{"sum", m_cutorch_CudaTensor_sum},
{"cumsum", m_cutorch_CudaTensor_cumsum},
{"cumprod", m_cutorch_CudaTensor_cumprod},
{"prod", m_cutorch_CudaTensor_prod},
{"min", m_cutorch_CudaTensor_min},
{"max", m_cutorch_CudaTensor_max},
{"cmin", m_cutorch_CudaTensor_cmin},
{"cmax", m_cutorch_CudaTensor_cmax},
{"cross", m_cutorch_CudaTensor_cross},
{"tril", m_cutorch_CudaTensor_tril},
{"triu", m_cutorch_CudaTensor_triu},
{"diag", m_cutorch_CudaTensor_diag},
{"trace", m_cutorch_CudaTensor_trace},
{"log", m_cutorch_CudaTensor_log},
{"log1p", m_cutorch_CudaTensor_log1p},
{"exp", m_cutorch_CudaTensor_exp},
{"cos", m_cutorch_CudaTensor_cos},
{"acos", m_cutorch_CudaTensor_acos},
{"cosh", m_cutorch_CudaTensor_cosh},
{"sin", m_cutorch_CudaTensor_sin},
{"asin", m_cutorch_CudaTensor_asin},
{"sinh", m_cutorch_CudaTensor_sinh},
{"tan", m_cutorch_CudaTensor_tan},
{"atan", m_cutorch_CudaTensor_atan},
{"tanh", m_cutorch_CudaTensor_tanh},
{"sqrt", m_cutorch_CudaTensor_sqrt},
{"rsqrt", m_cutorch_CudaTensor_rsqrt},
{"sigmoid", m_cutorch_CudaTensor_sigmoid},
{"cinv", m_cutorch_CudaTensor_cinv},
{"ceil", m_cutorch_CudaTensor_ceil},
{"floor", m_cutorch_CudaTensor_floor},
{"neg", m_cutorch_CudaTensor_neg},
{"abs", m_cutorch_CudaTensor_abs},
{"sign", m_cutorch_CudaTensor_sign},
{"round", m_cutorch_CudaTensor_round},
{"trunc", m_cutorch_CudaTensor_trunc},
{"frac", m_cutorch_CudaTensor_frac},
{"atan2", m_cutorch_CudaTensor_atan2},
{"lerp", m_cutorch_CudaTensor_lerp},
{"pow", m_cutorch_CudaTensor_pow},
{"rand", m_cutorch_CudaTensor_rand},
{"randn", m_cutorch_CudaTensor_randn},
{"multinomial", m_cutorch_CudaTensor_multinomial},
{"clamp", m_cutorch_CudaTensor_clamp},
{"lt", m_cutorch_CudaTensor_lt},
{"gt", m_cutorch_CudaTensor_gt},
{"le", m_cutorch_CudaTensor_le},
{"ge", m_cutorch_CudaTensor_ge},
{"eq", m_cutorch_CudaTensor_eq},
{"ne", m_cutorch_CudaTensor_ne},
{"cat", m_cutorch_CudaTensor_cat},
{"geometric", m_cutorch_CudaTensor_geometric},
{"bernoulli", m_cutorch_CudaTensor_bernoulli},
{"uniform", m_cutorch_CudaTensor_uniform},
{"normal", m_cutorch_CudaTensor_normal},
{"cauchy", m_cutorch_CudaTensor_cauchy},
{"logNormal", m_cutorch_CudaTensor_logNormal},
{"exponential", m_cutorch_CudaTensor_exponential},
{"gesv", m_cutorch_CudaTensor_gesv},
{"gels", m_cutorch_CudaTensor_gels},
{"symeig", m_cutorch_CudaTensor_symeig},
{"eig", m_cutorch_CudaTensor_eig},
{"svd", m_cutorch_CudaTensor_svd},
{"inverse", m_cutorch_CudaTensor_inverse},
{"potri", m_cutorch_CudaTensor_potri},
{"potrf", m_cutorch_CudaTensor_potrf},
{"potrs", m_cutorch_CudaTensor_potrs},
{"qr", m_cutorch_CudaTensor_qr},
{"mean", m_cutorch_CudaTensor_mean},
{"var", m_cutorch_CudaTensor_var},
{"std", m_cutorch_CudaTensor_std},
{"norm", m_cutorch_CudaTensor_norm},
{"renorm", m_cutorch_CudaTensor_renorm},
{"dist", m_cutorch_CudaTensor_dist},
{"squeeze", m_cutorch_CudaTensor_squeeze},
{NULL, NULL}
};

static const struct luaL_Reg cutorch_CudaTensorMath__ [] = {
{"zero", cutorch_CudaTensor_zero},
{"fill", cutorch_CudaTensor_fill},
{"zeros", cutorch_CudaTensor_zeros},
{"ones", cutorch_CudaTensor_ones},
{"reshape", cutorch_CudaTensor_reshape},
{"numel", cutorch_CudaTensor_numel},
{"add", cutorch_CudaTensor_add},
{"csub", cutorch_CudaTensor_csub},
{"mul", cutorch_CudaTensor_mul},
{"div", cutorch_CudaTensor_div},
{"cmul", cutorch_CudaTensor_cmul},
{"cpow", cutorch_CudaTensor_cpow},
{"cdiv", cutorch_CudaTensor_cdiv},
{"addcmul", cutorch_CudaTensor_addcmul},
{"addcdiv", cutorch_CudaTensor_addcdiv},
{"maskedFill", cutorch_CudaTensor_maskedFill},
{"maskedCopy", cutorch_CudaTensor_maskedCopy},
{"maskedSelect", cutorch_CudaTensor_maskedSelect},
{"gather", cutorch_CudaTensor_gather},
{"scatter", cutorch_CudaTensor_scatter},
{"sort", cutorch_CudaTensor_sort},
{"topk", cutorch_CudaTensor_topk},
{"mv", cutorch_CudaTensor_mv},
{"mm", cutorch_CudaTensor_mm},
{"bmm", cutorch_CudaTensor_bmm},
{"ger", cutorch_CudaTensor_ger},
{"addmv", cutorch_CudaTensor_addmv},
{"addmm", cutorch_CudaTensor_addmm},
{"addr", cutorch_CudaTensor_addr},
{"baddbmm", cutorch_CudaTensor_baddbmm},
{"addbmm", cutorch_CudaTensor_addbmm},
{"dot", cutorch_CudaTensor_dot},
{"sum", cutorch_CudaTensor_sum},
{"cumsum", cutorch_CudaTensor_cumsum},
{"cumprod", cutorch_CudaTensor_cumprod},
{"prod", cutorch_CudaTensor_prod},
{"min", cutorch_CudaTensor_min},
{"max", cutorch_CudaTensor_max},
{"cmin", cutorch_CudaTensor_cmin},
{"cmax", cutorch_CudaTensor_cmax},
{"cross", cutorch_CudaTensor_cross},
{"tril", cutorch_CudaTensor_tril},
{"triu", cutorch_CudaTensor_triu},
{"diag", cutorch_CudaTensor_diag},
{"trace", cutorch_CudaTensor_trace},
{"log", cutorch_CudaTensor_log},
{"log1p", cutorch_CudaTensor_log1p},
{"exp", cutorch_CudaTensor_exp},
{"cos", cutorch_CudaTensor_cos},
{"acos", cutorch_CudaTensor_acos},
{"cosh", cutorch_CudaTensor_cosh},
{"sin", cutorch_CudaTensor_sin},
{"asin", cutorch_CudaTensor_asin},
{"sinh", cutorch_CudaTensor_sinh},
{"tan", cutorch_CudaTensor_tan},
{"atan", cutorch_CudaTensor_atan},
{"tanh", cutorch_CudaTensor_tanh},
{"sqrt", cutorch_CudaTensor_sqrt},
{"rsqrt", cutorch_CudaTensor_rsqrt},
{"sigmoid", cutorch_CudaTensor_sigmoid},
{"cinv", cutorch_CudaTensor_cinv},
{"ceil", cutorch_CudaTensor_ceil},
{"floor", cutorch_CudaTensor_floor},
{"neg", cutorch_CudaTensor_neg},
{"abs", cutorch_CudaTensor_abs},
{"sign", cutorch_CudaTensor_sign},
{"round", cutorch_CudaTensor_round},
{"trunc", cutorch_CudaTensor_trunc},
{"frac", cutorch_CudaTensor_frac},
{"atan2", cutorch_CudaTensor_atan2},
{"lerp", cutorch_CudaTensor_lerp},
{"pow", cutorch_CudaTensor_pow},
{"rand", cutorch_CudaTensor_rand},
{"randn", cutorch_CudaTensor_randn},
{"multinomial", cutorch_CudaTensor_multinomial},
{"clamp", cutorch_CudaTensor_clamp},
{"lt", cutorch_CudaTensor_lt},
{"gt", cutorch_CudaTensor_gt},
{"le", cutorch_CudaTensor_le},
{"ge", cutorch_CudaTensor_ge},
{"eq", cutorch_CudaTensor_eq},
{"ne", cutorch_CudaTensor_ne},
{"cat", cutorch_CudaTensor_cat},
{"geometric", cutorch_CudaTensor_geometric},
{"bernoulli", cutorch_CudaTensor_bernoulli},
{"uniform", cutorch_CudaTensor_uniform},
{"normal", cutorch_CudaTensor_normal},
{"cauchy", cutorch_CudaTensor_cauchy},
{"logNormal", cutorch_CudaTensor_logNormal},
{"exponential", cutorch_CudaTensor_exponential},
{"gesv", cutorch_CudaTensor_gesv},
{"gels", cutorch_CudaTensor_gels},
{"symeig", cutorch_CudaTensor_symeig},
{"eig", cutorch_CudaTensor_eig},
{"svd", cutorch_CudaTensor_svd},
{"inverse", cutorch_CudaTensor_inverse},
{"potri", cutorch_CudaTensor_potri},
{"potrf", cutorch_CudaTensor_potrf},
{"potrs", cutorch_CudaTensor_potrs},
{"qr", cutorch_CudaTensor_qr},
{"mean", cutorch_CudaTensor_mean},
{"var", cutorch_CudaTensor_var},
{"std", cutorch_CudaTensor_std},
{"norm", cutorch_CudaTensor_norm},
{"renorm", cutorch_CudaTensor_renorm},
{"dist", cutorch_CudaTensor_dist},
{"squeeze", cutorch_CudaTensor_squeeze},
{NULL, NULL}
};

void cutorch_CudaTensorMath_init(lua_State *L)
{
  luaT_pushmetatable(L, "torch.CudaTensor");

  /* register methods */
  luaL_setfuncs(L, m_cutorch_CudaTensorMath__, 0);

  /* register functions into the "torch" field of the tensor metaclass */
  lua_pushstring(L, "torch");
  lua_newtable(L);
  luaL_setfuncs(L, cutorch_CudaTensorMath__, 0);
  lua_rawset(L, -3);
  lua_pop(L, 1);
}
